"use strict";(self.webpackChunksample_website=self.webpackChunksample_website||[]).push([[2556],{5680:(e,t,r)=>{r.d(t,{xA:()=>c,yg:()=>y});var n=r(6540);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(r),g=a,y=u["".concat(s,".").concat(g)]||u[g]||d[g]||o;return r?n.createElement(y,l(l({ref:t},c),{},{components:r})):n.createElement(y,l({ref:t},c))}));function y(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=g;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:a,l[1]=i;for(var p=2;p<o;p++)l[p]=r[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}g.displayName="MDXCreateElement"},9742:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var n=r(8168),a=(r(6540),r(5680));const o={title:"Cluster adapter",sidebar_position:6,slug:"/cluster-adapter/"},l=void 0,i={unversionedId:"categories/Adapters/adapter-cluster",id:"categories/Adapters/adapter-cluster",title:"Cluster adapter",description:"How it works",source:"@site/docs/categories/05-Adapters/adapter-cluster.md",sourceDirName:"categories/05-Adapters",slug:"/cluster-adapter/",permalink:"/docs/v4/cluster-adapter/",draft:!1,editUrl:"https://github.com/socketio/socket.io-website/edit/main/docs/categories/05-Adapters/adapter-cluster.md",tags:[],version:"current",lastUpdatedAt:1710497863,formattedLastUpdatedAt:"Mar 15, 2024",sidebarPosition:6,frontMatter:{title:"Cluster adapter",sidebar_position:6,slug:"/cluster-adapter/"},sidebar:"sidebar",previous:{title:"Postgres adapter",permalink:"/docs/v4/postgres-adapter/"},next:{title:"Google Cloud Pub/Sub adapter",permalink:"/docs/v4/gcp-pubsub-adapter/"}},s={},p=[{value:"How it works",id:"how-it-works",level:2},{value:"Supported features",id:"supported-features",level:2},{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"With Node.js cluster",id:"with-nodejs-cluster",level:3},{value:"With PM2",id:"with-pm2",level:3},{value:"With <code>recluster</code>",id:"with-recluster",level:3},{value:"Options",id:"options",level:2},{value:"Latest releases",id:"latest-releases",level:2}],c={toc:p},u="wrapper";function d(e){let{components:t,...r}=e;return(0,a.yg)(u,(0,n.A)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h2",{id:"how-it-works"},"How it works"),(0,a.yg)("p",null,"The Cluster adapter allows to use Socket.IO within a ",(0,a.yg)("a",{parentName:"p",href:"https://nodejs.org/api/cluster.html"},"Node.js cluster"),"."),(0,a.yg)("p",null,"Every packet that is sent to multiple clients (e.g. ",(0,a.yg)("inlineCode",{parentName:"p"},'io.to("room1").emit()')," or ",(0,a.yg)("inlineCode",{parentName:"p"},"socket.broadcast.emit()"),") is also sent to other workers via the IPC channel."),(0,a.yg)("p",null,"The source code of this adapter can be found ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/socketio/socket.io-cluster-adapter"},"here"),"."),(0,a.yg)("h2",{id:"supported-features"},"Supported features"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Feature"),(0,a.yg)("th",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"th"},"socket.io")," version"),(0,a.yg)("th",{parentName:"tr",align:null},"Support"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"Socket management"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"4.0.0")),(0,a.yg)("td",{parentName:"tr",align:null},"\u2705 YES (since version ",(0,a.yg)("inlineCode",{parentName:"td"},"0.1.0"),")")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"Inter-server communication"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"4.1.0")),(0,a.yg)("td",{parentName:"tr",align:null},"\u2705 YES (since version ",(0,a.yg)("inlineCode",{parentName:"td"},"0.1.0"),")")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"Broadcast with acknowledgements"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/v4/changelog/4.5.0"},(0,a.yg)("inlineCode",{parentName:"a"},"4.5.0"))),(0,a.yg)("td",{parentName:"tr",align:null},"\u2705 YES (since version ",(0,a.yg)("inlineCode",{parentName:"td"},"0.2.0"),")")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"Connection state recovery"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"/docs/v4/changelog/4.6.0"},(0,a.yg)("inlineCode",{parentName:"a"},"4.6.0"))),(0,a.yg)("td",{parentName:"tr",align:null},"\u274c NO")))),(0,a.yg)("h2",{id:"installation"},"Installation"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"npm install @socket.io/cluster-adapter\n")),(0,a.yg)("h2",{id:"usage"},"Usage"),(0,a.yg)("h3",{id:"with-nodejs-cluster"},"With Node.js cluster"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},'const cluster = require("cluster");\nconst http = require("http");\nconst { Server } = require("socket.io");\nconst numCPUs = require("os").cpus().length;\nconst { setupMaster, setupWorker } = require("@socket.io/sticky");\nconst { createAdapter, setupPrimary } = require("@socket.io/cluster-adapter");\n\nif (cluster.isMaster) {\n  console.log(`Master ${process.pid} is running`);\n\n  const httpServer = http.createServer();\n\n  // setup sticky sessions\n  setupMaster(httpServer, {\n    loadBalancingMethod: "least-connection",\n  });\n\n  // setup connections between the workers\n  setupPrimary();\n\n  // needed for packets containing buffers (you can ignore it if you only send plaintext objects)\n  // Node.js < 16.0.0\n  cluster.setupMaster({\n    serialization: "advanced",\n  });\n  // Node.js > 16.0.0\n  // cluster.setupPrimary({\n  //   serialization: "advanced",\n  // });\n\n  httpServer.listen(3000);\n\n  for (let i = 0; i < numCPUs; i++) {\n    cluster.fork();\n  }\n\n  cluster.on("exit", (worker) => {\n    console.log(`Worker ${worker.process.pid} died`);\n    cluster.fork();\n  });\n} else {\n  console.log(`Worker ${process.pid} started`);\n\n  const httpServer = http.createServer();\n  const io = new Server(httpServer);\n\n  // use the cluster adapter\n  io.adapter(createAdapter());\n\n  // setup connection with the primary process\n  setupWorker(io);\n\n  io.on("connection", (socket) => {\n    /* ... */\n  });\n}\n')),(0,a.yg)("h3",{id:"with-pm2"},"With PM2"),(0,a.yg)("p",null,"See the ",(0,a.yg)("a",{parentName:"p",href:"/docs/v4/pm2/"},"associated documentation"),"."),(0,a.yg)("h3",{id:"with-recluster"},"With ",(0,a.yg)("inlineCode",{parentName:"h3"},"recluster")),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"cluster.js")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},'const cluster = require("cluster");\nconst http = require("http");\nconst { setupMaster } = require("@socket.io/sticky");\nconst { setupPrimary } = require("@socket.io/cluster-adapter");\nconst recluster = require("recluster");\nconst path = require("path");\n\nconst httpServer = http.createServer();\n\n// setup sticky sessions\nsetupMaster(httpServer, {\n  loadBalancingMethod: "least-connection",\n});\n\n// setup connections between the workers\nsetupPrimary();\n\n// needed for packets containing buffers (you can ignore it if you only send plaintext objects)\n// Node.js < 16.0.0\ncluster.setupMaster({\n  serialization: "advanced",\n});\n// Node.js > 16.0.0\n// cluster.setupPrimary({\n//   serialization: "advanced",\n// });\n\nhttpServer.listen(3000);\n\nconst balancer = recluster(path.join(__dirname, "worker.js"));\n\nbalancer.run();\n')),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"worker.js")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},'const http = require("http");\nconst { Server } = require("socket.io");\nconst { setupWorker } = require("@socket.io/sticky");\nconst { createAdapter } = require("@socket.io/cluster-adapter");\n\nconst httpServer = http.createServer();\nconst io = new Server(httpServer);\n\n// use the cluster adapter\nio.adapter(createAdapter());\n\n// setup connection with the primary process\nsetupWorker(io);\n\nio.on("connection", (socket) => {\n  /* ... */\n});\n')),(0,a.yg)("h2",{id:"options"},"Options"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Name"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"),(0,a.yg)("th",{parentName:"tr",align:null},"Default value"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"requestsTimeout")),(0,a.yg)("td",{parentName:"tr",align:null},"the timeout for inter-server requests such as ",(0,a.yg)("inlineCode",{parentName:"td"},"fetchSockets()")," or ",(0,a.yg)("inlineCode",{parentName:"td"},"serverSideEmit()")," with ack"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"5000"))))),(0,a.yg)("h2",{id:"latest-releases"},"Latest releases"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Version"),(0,a.yg)("th",{parentName:"tr",align:null},"Release date"),(0,a.yg)("th",{parentName:"tr",align:null},"Release notes"),(0,a.yg)("th",{parentName:"tr",align:null},"Diff"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"0.2.2")),(0,a.yg)("td",{parentName:"tr",align:null},"March 2022"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"https://github.com/socketio/socket.io-cluster-adapter/releases/tag/0.2.2"},"link")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"https://github.com/socketio/socket.io-cluster-adapter/compare/0.2.1...0.2.2"},(0,a.yg)("inlineCode",{parentName:"a"},"0.2.1...0.2.2")))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"0.2.1")),(0,a.yg)("td",{parentName:"tr",align:null},"October 2022"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"https://github.com/socketio/socket.io-cluster-adapter/releases/tag/0.2.1"},"link")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"https://github.com/socketio/socket.io-cluster-adapter/compare/0.2.0...0.2.1"},(0,a.yg)("inlineCode",{parentName:"a"},"0.2.0...0.2.1")))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"0.2.0")),(0,a.yg)("td",{parentName:"tr",align:null},"April 2022"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"https://github.com/socketio/socket.io-cluster-adapter/releases/tag/0.2.0"},"link")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"https://github.com/socketio/socket.io-cluster-adapter/compare/0.1.0...0.2.0"},(0,a.yg)("inlineCode",{parentName:"a"},"0.1.0...0.2.0")))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"0.1.0")),(0,a.yg)("td",{parentName:"tr",align:null},"June 2021"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"https://github.com/socketio/socket.io-cluster-adapter/releases/tag/0.1.0"},"link")),(0,a.yg)("td",{parentName:"tr",align:null})))),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://github.com/socketio/socket.io-cluster-adapter/blob/main/CHANGELOG.md"},"Complete changelog")))}d.isMDXComponent=!0}}]);