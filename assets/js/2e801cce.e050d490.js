"use strict";(self.webpackChunksample_website=self.webpackChunksample_website||[]).push([[7636],{1422:n=>{n.exports=JSON.parse('{"blogPosts":[{"id":"/basic-programming/","metadata":{"permalink":"/basic-programming/","editUrl":"https://github.com/nhonvo/nhonvo.github.io/edit/main/blog/blog/2024-8-12-basic-prorgramming.md","source":"@site/blog/2024-8-12-basic-prorgramming.md","title":"L\u1eadp tr\xecnh c\u01a1 b\u1ea3n","description":"L\u1eadp tr\xecnh c\u01a1 b\u1ea3n Cpp.","date":"2024-08-12T00:00:00.000Z","formattedDate":"August 12, 2024","tags":[{"label":"programming","permalink":"/tags/programming"},{"label":"cpp","permalink":"/tags/cpp"}],"readingTime":18.125,"hasTruncateMarker":true,"authors":[{"name":"Truong Nhon","title":"Admin","url":"https://github.com/nhonvo","socials":{"x":"nhonvo","github":"nhonvo"},"imageURL":"https://github.com/nhonvo.png","key":"truongnhon"}],"frontMatter":{"title":"L\u1eadp tr\xecnh c\u01a1 b\u1ea3n","description":"L\u1eadp tr\xecnh c\u01a1 b\u1ea3n Cpp.","slug":"/basic-programming/","image":"https://i.imgur.com/mErPwqL.png","hide_table_of_contents":false,"authors":["truongnhon"],"tags":["programming","cpp"]},"nextItem":{"title":"AWS cloud practitioner sample exam","permalink":"/2024/4/19/aws-cloud"}},"content":"L\u1eadp tr\xecnh c\u01a1 b\u1ea3n trong 3 th\xe1ng\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n### B\xe0i 1: L\xe0m quen v\u1edbi C++\\r\\n\\r\\n**C\xe2u 1**:\\r\\n\\r\\n- L\xe0m quen v\u1edbi c\u1ea5u tr\xfac chung c\u1ee7a m\u1ed9t ch\u01b0\u01a1ng tr\xecnh C:\\r\\n  - M\u1edf C-free/Dev-C, v\xe0o File/New/Source file.\\r\\n  - L\u01b0u file v\u1edbi ph\u1ea7n m\u1edf r\u1ed9ng l\xe0 .cpp.\\r\\n  - Th\xeam `#include <iostream>`.\\r\\n  - Vi\u1ebft ch\u01b0\u01a1ng tr\xecnh \\"Hello, World!\\" v\xe0 c\xe1c bi\u1ebfn th\u1ec3 c\u1ee7a n\xf3, bi\xean d\u1ecbch v\xe0 ch\u1ea1y ch\u01b0\u01a1ng tr\xecnh.\\r\\n\\r\\n**C\xe2u 2**:\\r\\n\\r\\n- Vi\u1ebft thi\u1ec7p m\u1eddi d\u1ef1 sinh nh\u1eadt c\xf3 d\u1ea1ng:\\r\\n\\r\\n```markdown\\r\\n*******************************************\\r\\nTHI\u1ec6P M\u1edcI\\r\\n\\r\\nT\xf4i d\u1ef1 l\u1ec5 sinh nh\u1eadt c\u1ee7a m\xecnh\\r\\nV\xe0o l\xfac 19h ng\xe0y 20/10/2016\\r\\nT\u1ea1i: 05/42 V\u0129nh Vi\u1ec5n, TP. HCM\\r\\nR\u1ea5t mong \u0111\u01b0\u1ee3c \u0111\xf3n ti\u1ebfp!\\r\\n\\r\\nH\u1ed3 L\xea Thu\\r\\n*******************************************\\r\\n```\\r\\n\\r\\n**C\xe2u 3**:\\r\\n\\r\\n- Vi\u1ebft ch\u01b0\u01a1ng tr\xecnh nh\u1eadp v\xe0 xu\u1ea5t ra m\xe0n h\xecnh:\\r\\n  - M\u1ed9t s\u1ed1 nguy\xean.\\r\\n  - M\u1ed9t s\u1ed1 th\u1ef1c.\\r\\n  - M\u1ed9t k\xfd t\u1ef1.\\r\\n  - Hai s\u1ed1 nguy\xean, t\xednh t\u1ed5ng, hi\u1ec7u c\u1ee7a hai s\u1ed1 v\xe0 xu\u1ea5t k\u1ebft qu\u1ea3 ra m\xe0n h\xecnh.\\r\\n\\r\\n#### N\xe2ng cao\\r\\n\\r\\n**C\xe2u 4**: Vi\u1ebft ch\u01b0\u01a1ng tr\xecnh nh\u1eadp v\xe0o b\xe1n k\xednh r c\u1ee7a m\u1ed9t h\xecnh tr\xf2n. T\xednh chu vi v\xe0 di\u1ec7n t\xedch c\u1ee7a h\xecnh tr\xf2n. In c\xe1c k\u1ebft qu\u1ea3 l\xean m\xe0n h\xecnh.\\r\\n\\r\\n**C\xe2u 5**: Vi\u1ebft ch\u01b0\u01a1ng tr\xecnh th\u1ef1c hi\u1ec7n:\\r\\na. Nh\u1eadp v\xe0o hai s\u1ed1 nguy\xean. Xu\u1ea5t ra m\xe0n h\xecnh gi\xe1 tr\u1ecb l\u1edbn nh\u1ea5t.\\r\\nb. Nh\u1eadp v\xe0o ba s\u1ed1 nguy\xean. Xu\u1ea5t ra m\xe0n h\xecnh gi\xe1 tr\u1ecb l\u1edbn nh\u1ea5t.\\r\\n\\r\\n**C\xe2u 6**: Nh\u1eadp v\xe0o 3 s\u1ed1 nguy\xean d\u01b0\u01a1ng a, b, c. Ki\u1ec3m tra xem 3 s\u1ed1 \u0111\xf3 c\xf3 l\u1eadp th\xe0nh tam gi\xe1c kh\xf4ng? N\u1ebfu c\xf3, h\xe3y t\xednh chu vi v\xe0 di\u1ec7n t\xedch c\u1ee7a tam gi\xe1c theo c\xf4ng th\u1ee9c:\\r\\n\\r\\nChu vi $CV = a + b + c$.\\r\\n\\r\\nDi\u1ec7n t\xedch $S = sqrt(p *(p - a)* (p - b) * (p - c))$, trong \u0111\xf3: $p = CV / 2$.\\r\\n\\r\\nXu\u1ea5t c\xe1c k\u1ebft qu\u1ea3 ra m\xe0n h\xecnh.\\r\\n\\r\\n**C\xe2u 7**: Vi\u1ebft ch\u01b0\u01a1ng tr\xecnh \u0111\u1ea3o ng\u01b0\u1ee3c m\u1ed9t s\u1ed1 nguy\xean d\u01b0\u01a1ng c\xf3 \u0111\xfang 3 ch\u1eef s\u1ed1.\\r\\n\\r\\n- h\u01b0\u1edbng d\u1eabn:\\r\\n\\r\\nL\u1ea7n l\u01b0\u1ee3t l\u1ea5y c\xe1c ch\u1eef s\u1ed1 d\xf9ng ph\xe9p chia / v\xe0 ph\xe9p chia l\u1ea5y ph\u1ea7n d\u01b0 % v\xe0 in ra m\xe0n h\xecnh theo th\u1ee9 t\u1ef1:\\r\\n\\r\\n- Ch\u1eef s\u1ed1 h\xe0ng \u0111\u01a1n v\u1ecb\\r\\n- Ch\u1eef s\u1ed1 h\xe0ng ch\u1ee5c\\r\\n- Ch\u1eef s\u1ed1 h\xe0ng tr\u0103m.\\r\\nV\xed d\u1ee5:\\r\\n\\r\\nV\u1edbi s\u1ed1 234, th\u1ef1c hi\u1ec7n:\\r\\n\\r\\n- 234 % 10 = 4 (l\u1ea5y ch\u1eef s\u1ed1 h\xe0ng \u0111\u01a1n v\u1ecb)\\r\\n- 234 / 10 = 23\\r\\n- 23 % 10 = 3 (l\u1ea5y ch\u1eef s\u1ed1 h\xe0ng ch\u1ee5c)\\r\\n- 23 / 10 = 2\\r\\n- 2 % 10 = 2 (l\u1ea5y ch\u1eef s\u1ed1 h\xe0ng tr\u0103m)\\r\\n\\r\\nk\u1ebft qu\u1ea3\\r\\n\\r\\n- H\xe0ng \u0111\u01a1n v\u1ecb: 4\\r\\n- H\xe0ng ch\u1ee5c: 3\\r\\n- H\xe0ng tr\u0103m: 2\\r\\n\\r\\n### B\xe0i 2: C\u1ea5u tr\xfac \u0111i\u1ec1u ki\u1ec7n If v\xe0 switch\\r\\n\\r\\n**C\xe2u 1:**\\r\\n\\r\\n- Vi\u1ebft ch\u01b0\u01a1ng tr\xecnh gi\u1ea3i ph\u01b0\u01a1ng tr\xecnh b\u1eadc nh\u1ea5t $ax+b=0$ v\u1edbi a,b nh\u1eadp t\u1eeb b\xe0n ph\xedm.\\r\\n\\r\\n**C\xe2u 2:**\\r\\n\\r\\n- Vi\u1ebft ch\u01b0\u01a1ng tr\xecnh gi\u1ea3i ph\u01b0\u01a1ng tr\xecnh b\u1eadc hai $ax^2+bx+c=0$. V\u1edbi a,b,c nh\u1eadp t\u1eeb b\xe0n ph\xedm.\\r\\n\\r\\n<details>\\r\\n<summary>Click to view full code !</summary>\\r\\n\\r\\n```cpp\\r\\n# include <iostream>\\r\\n# include <cmath>\\r\\n\\r\\nint main()\\r\\n{\\r\\n    float a, b, c;\\r\\n    std::cout << \\"------Giai pt bac hai Ax^2+Bx+C=0------\\\\n\\";\\r\\n    std::cout << \\"Nhap a: \\";\\r\\n    std::cin >> a;\\r\\n    std::cout << \\"Nhap b: \\";\\r\\n    std::cin >> b;\\r\\n    std::cout << \\"Nhap c: \\";\\r\\n    std::cin >> c;\\r\\n\\r\\n    if (a == 0)\\r\\n    {\\r\\n        if (b == 0)\\r\\n        {\\r\\n            if (c == 0)\\r\\n            {\\r\\n                std::cout << \\"Pt vo so nghiem\\";\\r\\n            }\\r\\n            else\\r\\n            {\\r\\n                std::cout << \\"Pt vo nghiem\\";\\r\\n            }\\r\\n        }\\r\\n        else\\r\\n        {\\r\\n            std::cout << \\"Phuong trinh co nghiem x=-c/b=\\" << -c / b;\\r\\n        }\\r\\n    }\\r\\n    else\\r\\n    {\\r\\n        float x1, x2, Delta;\\r\\n        Delta = b * b - 4 * a * c;\\r\\n        std::cout << \\"Delta=\\" << Delta;\\r\\n        if (Delta < 0)\\r\\n        {\\r\\n            std::cout << \\"\\\\nPt vo nghiem\\";\\r\\n        }\\r\\n        else if (Delta == 0)\\r\\n        {\\r\\n            std::cout << \\"\\\\nPhuong trinh co nghiem kep x=\\" << -b / (2 * a);\\r\\n        }\\r\\n        else\\r\\n        {\\r\\n            x1 = (-b + std::sqrt(Delta)) / (2 * a);\\r\\n            x2 = (-b - std::sqrt(Delta)) / (2 * a);\\r\\n            std::cout << \\"\\\\nPhuong trinh co 2 nghiem: x1=\\" << x1 << \\", x2=\\" << x2;\\r\\n        }\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n```\\r\\n\\r\\n</details>\\r\\n\\r\\n**C\xe2u 3:**\\r\\n\\r\\n- Nh\u1eadp v\xe0o 3 s\u1ed1 a,b,c. Ki\u1ec3m tra xem 3 s\u1ed1 c\xf3 l\u1eadp th\xe0nh tam gi\xe1c kh\xf4ng? N\u1ebfu c\xf3, h\xe3y cho bi\u1ebft lo\u1ea1i tam gi\xe1c.\\r\\n\\r\\n**C\xe2u 4:**\\r\\n\\r\\n- Vi\u1ebft ch\u01b0\u01a1ng tr\xecnh hi\u1ec3n th\u1ecb c\xe1ch \u0111\u1ecdc s\u1ed1 nguy\xean c\xf3 hai ch\u1eef s\u1ed1. V\xed d\u1ee5: 21 -> \\"hai m\u1ed1t\\".\\r\\n\\r\\n<details>\\r\\n<summary>Click to view full code !</summary>\\r\\n\\r\\n```cpp\\r\\n#include <iostream>\\r\\n\\r\\nusing namespace std;\\r\\n\\r\\nint main() {\\r\\n    int n;\\r\\n    cout << \\"Nhap vao so nguyen co hai chu so\\\\n\\";\\r\\n    do {\\r\\n        cout << \\"Enter number n: \\";\\r\\n        cin >> n;\\r\\n        if (n < 0 || n > 100)\\r\\n            cout << \\"Nhap sai, nhap lai\\\\n\\";\\r\\n    } while (n < 0 || n > 100);\\r\\n\\r\\n    switch (n / 10) {\\r\\n        case 1: cout << \\"Muoi\\"; break;\\r\\n        case 2: cout << \\"Hai Muoi\\"; break;\\r\\n        case 3: cout << \\"Ba Muoi\\"; break;\\r\\n        case 4: cout << \\"Bon Muoi\\"; break;\\r\\n        case 5: cout << \\"Nam Muoi\\"; break;\\r\\n        case 6: cout << \\"Sau Muoi\\"; break;\\r\\n        case 7: cout << \\"Bay Muoi\\"; break;\\r\\n        case 8: cout << \\"Tam Muoi\\"; break;\\r\\n        case 9: cout << \\"Chin Muoi\\"; break;\\r\\n    }\\r\\n\\r\\n    switch (n % 10) {\\r\\n        case 1: cout << \\" mot\\"; break;\\r\\n        case 2: cout << \\" hai\\"; break;\\r\\n        case 3: cout << \\" ba\\"; break;\\r\\n        case 4: cout << \\" bon\\"; break;\\r\\n        case 5: cout << \\" nam\\"; break;\\r\\n        case 6: cout << \\" sau\\"; break;\\r\\n        case 7: cout << \\" bay\\"; break;\\r\\n        case 8: cout << \\" tam\\"; break;\\r\\n        case 9: cout << \\" chin\\"; break;\\r\\n    }\\r\\n\\r\\n    return 0;\\r\\n}\\r\\n```\\r\\n\\r\\n</details>\\r\\n\\r\\n**C\xe2u 5:**\\r\\n\\r\\n- Vi\u1ebft ch\u01b0\u01a1ng tr\xecnh nh\u1eadp v\xe0o th\xe1ng c\u1ee7a m\u1ed9t n\u0103m v\xe0 cho bi\u1ebft s\u1ed1 ng\xe0y c\u1ee7a th\xe1ng \u0111\xf3.\\r\\n\\r\\n<details>\\r\\n<summary>Click to view full code !</summary>\\r\\n\\r\\n```cpp\\r\\n#include <iostream>\\r\\nusing namespace std;\\r\\n\\r\\nvoid calendar(int month) {\\r\\n    int year;\\r\\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\\r\\n        cout << \\"Day: 31\\" << endl;\\r\\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\\r\\n        cout << \\"Day: 30\\" << endl;\\r\\n    } else if (month == 2) {\\r\\n        cout << \\"Enter year: \\";\\r\\n        cin >> year;\\r\\n        if (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0)) {\\r\\n            cout << \\"Day: 29\\" << endl;\\r\\n        } else {\\r\\n            cout << \\"Day: 28\\" << endl;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nint main() {\\r\\n    int month;\\r\\n    do {\\r\\n        cout << \\"Enter month: \\";\\r\\n        cin >> month;\\r\\n        if (month < 1 || month > 12) {\\r\\n            cout << \\"Enter again.\\" << endl;\\r\\n        }\\r\\n    } while (month < 1 || month > 12);\\r\\n\\r\\n    calendar(month);\\r\\n    return 0;\\r\\n}\\r\\n```\\r\\n\\r\\n</details>\\r\\n\\r\\n**C\xe2u 6:**\\r\\n\\r\\n- Nh\u1eadp m\u1ed9t s\u1ed1, ki\u1ec3m tra s\u1ed1 \u0111\xf3 c\xf3 ph\u1ea3i l\xe0 s\u1ed1 nguy\xean t\u1ed1 hay kh\xf4ng? In k\u1ebft qu\u1ea3 ra m\xe0n h\xecnh.\\r\\n\\r\\n**C\xe2u 7:**\\r\\n\\r\\n- Vi\u1ebft ch\u01b0\u01a1ng tr\xecnh t\xednh ti\u1ec1n taxi d\u1ef1a tr\xean s\u1ed1 km nh\u1eadp v\xe0o.\\r\\n\\r\\n1 km \u0111\u1ea7u ti\xean l\xe0 5000 \u0111\u1ed3ng.\\r\\nM\u1ed7i 200m ti\u1ebfp theo l\xe0 1000 \u0111\u1ed3ng.\\r\\nN\u1ebfu l\u1edbn h\u01a1n 30 km th\xec m\u1ed7i km th\xeam s\u1ebd l\xe0 3000 \u0111\u1ed3ng.\\r\\nH\xe3y nh\u1eadp s\u1ed1 km, sau \u0111\xf3 in ra s\u1ed1 ti\u1ec1n ph\u1ea3i tr\u1ea3.\\r\\n\\r\\n<details>\\r\\n<summary>Click to view full code !</summary>\\r\\n\\r\\n```cpp\\r\\n#include <iostream>\\r\\n#include <cmath> // for std::ceil, if needed\\r\\n\\r\\nusing namespace std;\\r\\n\\r\\nint main() {\\r\\n    float n;\\r\\n    cout << \\"Enter distance n: \\";\\r\\n    cin >> n;\\r\\n    cout << \\"\\\\n          Distance is \\" << n << \\" km\\" << endl;\\r\\n\\r\\n    if (n <= 1) {\\r\\n        int s = 5000;\\r\\n        cout << \\"              Fee: \\" << s << \\" VND\\" << endl;\\r\\n    } else if (n > 1 && n <= 30) {\\r\\n        int t;\\r\\n        int tien;\\r\\n        int duong = static_cast<int>(n * 1000);\\r\\n        if (duong % 200 == 0) {\\r\\n            t = (duong - 1000) / 200;\\r\\n        } else {\\r\\n            t = (duong - 1000) / 200 + 1;\\r\\n        }\\r\\n\\r\\n        tien = t * 1000 + 5000;\\r\\n        cout << \\"              Fee: \\" << tien << \\" VND\\" << endl;\\r\\n    } else if (n > 30) {\\r\\n        int tien = (static_cast<int>(n) - 30) * 3000 + 150000;\\r\\n        cout << \\"              Fee: \\" << tien << \\" VND\\" << endl;\\r\\n    }\\r\\n\\r\\n    return 0;\\r\\n}\\r\\n```\\r\\n\\r\\n</details>\\r\\n\\r\\n### B\xe0i 3: C\u1ea5u tr\xfac l\u1eb7p - do while, while v\xe0 for\\r\\n\\r\\n**C\xe2u 1:**\\r\\n\\r\\n- Vi\u1ebft ch\u01b0\u01a1ng tr\xecnh hi\u1ec3n th\u1ecb 10 d\xf2ng: \\"XIN CH\xc0O C\xc1C B\u1ea0N\\".\\r\\n- Vi\u1ebft ch\u01b0\u01a1ng tr\xecnh hi\u1ec3n th\u1ecb n d\xf2ng: \\"XIN CH\xc0O C\xc1C B\u1ea0N\\", v\u1edbi n nh\u1eadp t\u1eeb b\xe0n ph\xedm.\\r\\n\\r\\n**C\xe2u 2:**\\r\\n\\r\\n- Vi\u1ebft ch\u01b0\u01a1ng tr\xecnh hi\u1ec3n th\u1ecb h\xecnh tam gi\xe1c b\u1eb1ng d\u1ea5u \\"*\\".\\r\\n  - a. Tam gi\xe1c c\xe2n.\\r\\n  - b. Tam gi\xe1c vu\xf4ng.\\r\\n\\r\\n**C\xe2u 3:**\\r\\n\\r\\n- Vi\u1ebft ch\u01b0\u01a1ng tr\xecnh hi\u1ec3n th\u1ecb c\xe1c s\u1ed1 ch\u1eb5n trong kho\u1ea3ng t\u1eeb 1 \u0111\u1ebfn n.\\r\\n\\r\\n- Vi\u1ebft ch\u01b0\u01a1ng tr\xecnh li\u1ec7t k\xea c\xe1c s\u1ed1 nguy\xean t\u1ed1 trong ph\u1ea1m vi t\u1eeb 1 \u0111\u1ebfn n.\\r\\n\\r\\n- Vi\u1ebft ch\u01b0\u01a1ng tr\xecnh t\xednh t\u1ed5ng c\xe1c ch\u1eef s\u1ed1 c\u1ee7a m\u1ed9t s\u1ed1 nguy\xean n.\\r\\n\\r\\n**C\xe2u 4:**\\r\\n\\r\\n- Vi\u1ebft ch\u01b0\u01a1ng tr\xecnh ki\u1ec3m tra m\u1ed9t s\u1ed1 c\xf3 ph\u1ea3i l\xe0 s\u1ed1 ho\xe0n h\u1ea3o hay kh\xf4ng (s\u1ed1 ho\xe0n h\u1ea3o l\xe0 s\u1ed1 b\u1eb1ng t\u1ed5ng c\xe1c \u01b0\u1edbc s\u1ed1 c\u1ee7a n\xf3 tr\u1eeb ch\xednh n\xf3).\\r\\n\\r\\n**C\xe2u 5:** Vi\u1ebft ch\u01b0\u01a1ng tr\xecnh nh\u1eadp v\xe0o m\u1ed9t s\u1ed1 nguy\xean n > 0, h\xe3y:\\r\\n\\r\\n- a. Xu\u1ea5t ra m\xe0n h\xecnh c\xe1c s\u1ed1 trong ph\u1ea1m vi t\u1eeb 1 \u0111\u1ebfn n.\\r\\n- b. Xu\u1ea5t ra m\xe0n h\xecnh c\xe1c s\u1ed1 ch\u1eb5n trong ph\u1ea1m vi t\u1eeb 1 \u0111\u1ebfn n.\\r\\n- c. Xu\u1ea5t ra m\xe0n h\xecnh c\xe1c s\u1ed1 l\u1ebb kh\xf4ng chia h\u1ebft cho 3 trong ph\u1ea1m vi t\u1eeb 1 \u0111\u1ebfn n.\\r\\n- d. T\xednh c\xe1c bi\u1ec3u th\u1ee9c sau:\\r\\n\\r\\nS3 = 1/2 + 2/3 + 3/4 + ...\\r\\nS4 = x^n (v\u1edbi x l\xe0 s\u1ed1 th\u1ef1c nh\u1eadp t\u1eeb b\xe0n ph\xedm).\\r\\ne. T\xednh t\u1ed5ng c\xe1c ch\u1eef s\u1ed1 c\u1ee7a n. V\xed d\u1ee5: n = 125, t\u1ed5ng c\xe1c ch\u1eef s\u1ed1 l\xe0 1 + 2 + 5 = 8.\\r\\n\\r\\n**C\xe2u 6:** Vi\u1ebft ch\u01b0\u01a1ng tr\xecnh th\u1ef1c hi\u1ec7n:\\r\\n\\r\\n- a. Nh\u1eadp m\u1ed9t s\u1ed1 nguy\xean n sao cho 0 < n < 100. N\u1ebfu nh\u1eadp sai th\xec y\xeau c\u1ea7u nh\u1eadp l\u1ea1i.\\r\\n- b. \u0110\u1ebfm s\u1ed1 \u01b0\u1edbc c\u1ee7a n. N\u1ebfu \u0111\u1ebfm b\u1eb1ng 2 th\xec xu\u1ea5t ra m\xe0n h\xecnh \\"n l\xe0 s\u1ed1 nguy\xean t\u1ed1\\", ng\u01b0\u1ee3c l\u1ea1i xu\u1ea5t ra \\"n kh\xf4ng ph\u1ea3i l\xe0 s\u1ed1 nguy\xean t\u1ed1\\".\\r\\n- c. T\xednh t\u1ed5ng c\xe1c \u01b0\u1edbc c\u1ee7a n (kh\xf4ng t\xednh ch\xednh n\xf3). N\u1ebfu t\u1ed5ng c\xe1c \u01b0\u1edbc \u0111\xfang b\u1eb1ng n th\xec xu\u1ea5t ra m\xe0n h\xecnh \\"n l\xe0 s\u1ed1 ho\xe0n thi\u1ec7n\\", ng\u01b0\u1ee3c l\u1ea1i xu\u1ea5t ra \\"n kh\xf4ng l\xe0 s\u1ed1 ho\xe0n thi\u1ec7n\\".\\r\\n\\r\\n**C\xe2u 7:** Vi\u1ebft ch\u01b0\u01a1ng tr\xecnh hi\u1ec3n th\u1ecb b\u1ea3ng c\u1eedu ch\u01b0\u01a1ng ra m\xe0n h\xecnh.\\r\\n\\r\\n<details>\\r\\n<summary>Click to view full code !</summary>\\r\\n\\r\\n```cpp\\r\\n#include <iostream>\\r\\n\\r\\nusing namespace std;\\r\\n\\r\\nint main() {\\r\\n    int i, j, s;\\r\\n    cout << \\"\\\\nBang cuu chuong\\\\n\\";\\r\\n\\r\\n    for (i = 1; i <= 10; i++) {\\r\\n        cout << \\"Bang nhan \\" << i << endl;\\r\\n        for (j = 0; j <= 10; j++) {\\r\\n            s = i * j;\\r\\n            cout << i << \\" x \\" << j << \\" = \\" << s << endl;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return 0;\\r\\n}\\r\\n```\\r\\n\\r\\n</details>\\r\\n\\r\\n**C\xe2u 8:** Vi\u1ebft ch\u01b0\u01a1ng tr\xecnh th\u1ef1c hi\u1ec7n:\\r\\n\\r\\n- a. Nh\u1eadp n > 0.\\r\\n- b. Li\u1ec7t k\xea c\xe1c s\u1ed1 nguy\xean t\u1ed1 trong ph\u1ea1m vi t\u1eeb 1 \u0111\u1ebfn n.\\r\\n- c. \u0110\u1ebfm s\u1ed1 l\u01b0\u1ee3ng s\u1ed1 nguy\xean t\u1ed1 trong ph\u1ea1m vi t\u1eeb 1 \u0111\u1ebfn n.\\r\\n- d. T\xednh t\u1ed5ng c\xe1c s\u1ed1 nguy\xean t\u1ed1 trong ph\u1ea1m vi t\u1eeb 1 \u0111\u1ebfn n.\\r\\n\\r\\n**C\xe2u 9:** Vi\u1ebft ch\u01b0\u01a1ng tr\xecnh th\u1ef1c hi\u1ec7n:\\r\\n\\r\\n- a. Nh\u1eadp n > 0.\\r\\n- b. T\xednh t\u1ed5ng c\xe1c ch\u1eef s\u1ed1 c\u1ee7a n. V\xed d\u1ee5: v\u1edbi n = 12537 th\xec t\u1ed5ng l\xe0 1 + 2 + 5 + 3 + 7 = 18.\\r\\n\\r\\n### B\xe0i 4: H\xe0m\\r\\n\\r\\nC\xe2u 1: Vi\u1ebft ch\u01b0\u01a1ng tr\xecnh th\u1ef1c hi\u1ec7n c\xe1c ch\u1ee9c n\u0103ng sau (d\xf9ng h\xe0m):\\r\\n\\r\\n- a. Nh\u1eadp v\xe0o m\u1ed9t s\u1ed1 nguy\xean n (0 < n < 100).\\r\\n- b. Ki\u1ec3m tra n c\xf3 ph\u1ea3i l\xe0 s\u1ed1 nguy\xean t\u1ed1 kh\xf4ng?\\r\\n- c. Li\u1ec7t k\xea c\xe1c s\u1ed1 nguy\xean t\u1ed1 trong ph\u1ea1m vi t\u1eeb 1 \u0111\u1ebfn n.\\r\\n- d. \u0110\u1ebfm s\u1ed1 l\u01b0\u1ee3ng s\u1ed1 nguy\xean t\u1ed1 trong ph\u1ea1m vi t\u1eeb 1 \u0111\u1ebfn n.\\r\\n- e. T\xednh t\u1ed5ng c\xe1c s\u1ed1 nguy\xean t\u1ed1 trong ph\u1ea1m vi t\u1eeb 1 \u0111\u1ebfn n.\\r\\n- f. T\xednh trung b\xecnh c\u1ed9ng c\xe1c s\u1ed1 nguy\xean t\u1ed1 trong ph\u1ea1m vi t\u1eeb 1 \u0111\u1ebfn n.\\r\\n\\r\\n**C\xe2u 2:** Vi\u1ebft ch\u01b0\u01a1ng tr\xecnh theo h\xe0m cho ph\xe9p th\u1ef1c hi\u1ec7n ch\u1ecdn l\u1ef1a c\xf4ng vi\u1ec7c:\\r\\n\\r\\n- a. Gi\u1ea3i ph\u01b0\u01a1ng tr\xecnh b\u1eadc 1 ax + b = 0.\\r\\n- b. Ki\u1ec3m tra m\u1ed9t s\u1ed1 nguy\xean c\xf3 l\xe0 s\u1ed1 ho\xe0n thi\u1ec7n kh\xf4ng?\\r\\n- c. Li\u1ec7t k\xea c\xe1c s\u1ed1 ho\xe0n thi\u1ec7n trong ph\u1ea1m vi t\u1eeb 1 \u0111\u1ebfn n (n do ng\u01b0\u1eddi d\xf9ng nh\u1eadp).\\r\\n- d. T\xecm \u01b0\u1edbc chung l\u1edbn nh\u1ea5t c\u1ee7a hai s\u1ed1 nguy\xean a, b nh\u1eadp t\u1eeb b\xe0n ph\xedm.\\r\\n- e. Tho\xe1t kh\u1ecfi ch\u01b0\u01a1ng tr\xecnh.\\r\\n\\r\\n**C\xe2u 3:** Vi\u1ebft ch\u01b0\u01a1ng tr\xecnh nh\u1eadp t\u1eeb b\xe0n ph\xedm 2 s\u1ed1 a, b v\xe0 m\u1ed9t k\xfd t\u1ef1 ch. N\u1ebfu:\\r\\n\\r\\n- ch l\xe0 \\"+\\" th\xec th\u1ef1c hi\u1ec7n ph\xe9p t\xednh a + b v\xe0 in k\u1ebft qu\u1ea3 l\xean m\xe0n h\xecnh.\\r\\n- ch l\xe0 \\"-\\" th\xec th\u1ef1c hi\u1ec7n ph\xe9p t\xednh a - b v\xe0 in k\u1ebft qu\u1ea3 l\xean m\xe0n h\xecnh.\\r\\n- ch l\xe0 \\"*\\" th\xec th\u1ef1c hi\u1ec7n ph\xe9p t\xednh a* b v\xe0 in k\u1ebft qu\u1ea3 l\xean m\xe0n h\xecnh.\\r\\n- ch l\xe0 \\"/\\" th\xec th\u1ef1c hi\u1ec7n ph\xe9p t\xednh a / b v\xe0 in k\u1ebft qu\u1ea3 l\xean m\xe0n h\xecnh.\\r\\n\\r\\n**C\xe2u 4:** Vi\u1ebft ch\u01b0\u01a1ng tr\xecnh t\xednh ti\u1ec1n l\u01b0\u01a1ng ng\xe0y cho c\xf4ng nh\xe2n, cho bi\u1ebft tr\u01b0\u1edbc gi\u1edd v\xe0o ca, gi\u1edd ra ca c\u1ee7a m\u1ed7i ng\u01b0\u1eddi.\\r\\n\\r\\nGi\u1ea3 s\u1eed:\\r\\n\\r\\nTi\u1ec1n tr\u1ea3 cho m\u1ed7i gi\u1edd tr\u01b0\u1edbc 12 gi\u1edd l\xe0 6000 \u0111\u1ed3ng v\xe0 sau 12 gi\u1edd l\xe0 7500 \u0111\u1ed3ng.\\r\\nGi\u1edd v\xe0o ca s\u1edbm nh\u1ea5t l\xe0 6 gi\u1edd s\xe1ng v\xe0 gi\u1edd ra ca tr\u1ec5 nh\u1ea5t l\xe0 18 gi\u1edd (Gi\u1edd s\u1eed d\u1ee5ng l\xe0 gi\u1edd nguy\xean).\\r\\n\\r\\n<details>\\r\\n<summary>Click to view full code !</summary>\\r\\n\\r\\n```cpp\\r\\n#include <iostream>\\r\\n\\r\\nusing namespace std;\\r\\n\\r\\nint salaryDay(int v, int r) {\\r\\n    int s, n;\\r\\n    if (r < 0 || v > 24) {\\r\\n        cout << \\"Error. Enter again\\" << endl;\\r\\n    } else {\\r\\n        n = r - v;\\r\\n        cout << \\"Total hour of day: \\" << n << \\"h\\" << endl;\\r\\n        if (n > 12) {\\r\\n            s = n * 6000;\\r\\n            s += (n - 12) * 7500;\\r\\n        } else {\\r\\n            s = n * 6000;\\r\\n        }\\r\\n        cout << \\"Today\'s salary: \\" << s << \\"d\\" << endl;\\r\\n    }\\r\\n    return s;\\r\\n}\\r\\n\\r\\nint main() {\\r\\n    int n, r, v;\\r\\n    cout << \\"Basic\\\\n ----------Hour in 6h---------\\\\n--------Hour out 18h-----------\\\\n\\";\\r\\n    cout << \\"Enter hour in: \\";\\r\\n    cin >> v;\\r\\n    cout << \\"Enter hour out: \\";\\r\\n    cin >> r;\\r\\n    salaryDay(v, r);\\r\\n    return 0;\\r\\n}\\r\\n```\\r\\n\\r\\n</details>\\r\\n\\r\\n**C\xe2u 5:**\\r\\n\\r\\n- Vi\u1ebft ch\u01b0\u01a1ng tr\xecnh s\u1eed d\u1ee5ng h\xe0m \u0111\u1ec3 chuy\u1ec3n \u0111\u1ed5i s\u1ed1 nguy\xean t\u1eeb h\u1ec7 th\u1eadp ph\xe2n sang h\u1ec7 nh\u1ecb ph\xe2n.\\r\\n\\r\\n### B\xe0i 5: M\u1ea3ng - Array\\r\\n\\r\\n**C\xe2u 1**: Th\u1ef1c hi\u1ec7n:\\r\\n\\r\\n- a. Nh\u1eadp m\u1ea3ng s\u1ed1 nguy\xean g\u1ed3m n ph\u1ea7n t\u1eed (0 < n <= 10).\\r\\n- b. Xu\u1ea5t m\u1ea3ng v\u1eeba nh\u1eadp.\\r\\n\\r\\n**C\xe2u 2:** L\xe0m ti\u1ebfp theo trong ch\u01b0\u01a1ng tr\xecnh c\u1ee7a c\xe2u 1 v\u1edbi c\xe1c y\xeau c\u1ea7u sau:\\r\\n\\r\\n- a. Xu\u1ea5t c\xe1c ph\u1ea7n t\u1eed chia h\u1ebft cho 3 c\xf3 trong m\u1ea3ng.\\r\\n- b. \u0110\u1ebfm s\u1ed1 l\u01b0\u1ee3ng s\u1ed1 d\u01b0\u01a1ng c\xf3 trong m\u1ea3ng.\\r\\n- c. T\xednh t\u1ed5ng c\xe1c s\u1ed1 trong m\u1ea3ng.\\r\\n- d. T\xednh trung b\xecnh c\u1ed9ng c\u1ee7a m\u1ea3ng.\\r\\n- e. T\xednh trung b\xecnh c\u1ed9ng c\xe1c ph\u1ea7n t\u1eed d\u01b0\u01a1ng c\xf3 trong m\u1ea3ng.\\r\\n- f. Xu\u1ea5t c\xe1c s\u1ed1 nguy\xean t\u1ed1 c\xf3 trong m\u1ea3ng.\\r\\n- g. \u0110\u1ebfm s\u1ed1 l\u01b0\u1ee3ng s\u1ed1 nguy\xean t\u1ed1 c\xf3 trong m\u1ea3ng.\\r\\n- h. T\xednh t\u1ed5ng c\xe1c s\u1ed1 nguy\xean t\u1ed1 c\xf3 trong m\u1ea3ng.\\r\\n- j. T\xednh trung b\xecnh c\u1ed9ng c\xe1c s\u1ed1 nguy\xean t\u1ed1 c\xf3 trong m\u1ea3ng.\\r\\n- k. T\xecm ph\u1ea7n t\u1eed d\u01b0\u01a1ng \u0111\u1ea7u ti\xean.\\r\\n- l. T\xecm ph\u1ea7n t\u1eed d\u01b0\u01a1ng cu\u1ed1i c\xf9ng.\\r\\n- m. T\xecm gi\xe1 tr\u1ecb ph\u1ea7n t\u1eed l\u1edbn nh\u1ea5t (nh\u1ecf nh\u1ea5t) trong m\u1ea3ng.\\r\\n\\r\\n**C\xe2u 3:** Vi\u1ebft ch\u01b0\u01a1ng tr\xecnh th\u1ef1c hi\u1ec7n:\\r\\n\\r\\n- a. Nh\u1eadp v\xe0o m\u1ea3ng a g\u1ed3m n ph\u1ea7n t\u1eed, trong qu\xe1 tr\xecnh nh\u1eadp ki\u1ec3m tra c\xe1c ph\u1ea7n t\u1eed nh\u1eadp v\xe0o kh\xf4ng \u0111\u01b0\u1ee3c tr\xf9ng, n\u1ebfu tr\xf9ng th\xec th\xf4ng b\xe1o v\xe0 y\xeau c\u1ea7u nh\u1eadp l\u1ea1i.\\r\\n- b. Xu\u1ea5t m\u1ea3ng.\\r\\n- c. Xu\u1ea5t ra m\xe0n h\xecnh c\xe1c ph\u1ea7n t\u1eed l\xe0 s\u1ed1 ch\xednh ph\u01b0\u01a1ng n\u1eb1m t\u1ea1i nh\u1eefng v\u1ecb tr\xed l\u1ebb trong m\u1ea3ng.\\r\\n- d. Xu\u1ea5t ra v\u1ecb tr\xed c\u1ee7a c\xe1c ph\u1ea7n t\u1eed c\xf3 gi\xe1 tr\u1ecb l\u1edbn nh\u1ea5t.\\r\\n- e. Vi\u1ebft h\xe0m t\xednh t\u1ed5ng c\xe1c ph\u1ea7n t\u1eed n\u1eb1m \u1edf v\u1ecb tr\xed ch\u1eb5n trong m\u1ea3ng.\\r\\n- f. Vi\u1ebft h\xe0m s\u1eafp x\u1ebfp m\u1ea3ng theo th\u1ee9 t\u1ef1 t\u0103ng d\u1ea7n.\\r\\n\\r\\n<details>\\r\\n<summary>Click to view full code !</summary>\\r\\n\\r\\n```cpp\\r\\n#include <iostream>\\r\\n#include <cmath>\\r\\n\\r\\nusing namespace std;\\r\\n\\r\\nvoid nhapMang(int n, int a[]) {\\r\\n    for (int i = 0; i < n; i++) {\\r\\n        cout << \\"a[\\" << i << \\"]: \\";\\r\\n        cin >> a[i];\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid mangChiaHetCho3(int n, int a[]) {\\r\\n    cout << \\"Cac so chia het cho 3: \\";\\r\\n    for (int i = 0; i < n; i++) {\\r\\n        if (a[i] % 3 == 0) {\\r\\n            cout << a[i] << \\" \\";\\r\\n        }\\r\\n    }\\r\\n    cout << endl;\\r\\n}\\r\\n\\r\\nint demSoDuong(int n, int a[]) {\\r\\n    int cnt = 0;\\r\\n    for (int i = 0; i < n; i++) {\\r\\n        if (a[i] > 0) {\\r\\n            cnt++;\\r\\n        }\\r\\n    }\\r\\n    return cnt;\\r\\n}\\r\\n\\r\\nint tongMang(int n, int a[]) {\\r\\n    int s = 0;\\r\\n    for (int i = 0; i < n; i++) {\\r\\n        s += a[i];\\r\\n    }\\r\\n    return s;\\r\\n}\\r\\n\\r\\nfloat trungBinhCong(int n, int a[]) {\\r\\n    return static_cast<float>(tongMang(n, a)) / n;\\r\\n}\\r\\n\\r\\nfloat trungBinhCongSoDuong(int n, int a[]) {\\r\\n    int s = 0, cnt = 0;\\r\\n    for (int i = 0; i < n; i++) {\\r\\n        if (a[i] > 0) {\\r\\n            s += a[i];\\r\\n            cnt++;\\r\\n        }\\r\\n    }\\r\\n    return (cnt > 0) ? static_cast<float>(s) / cnt : 0;\\r\\n}\\r\\n\\r\\nbool ktnt(int n) {\\r\\n    if (n < 2) return false;\\r\\n    for (int i = 2; i <= sqrt(n); i++) {\\r\\n        if (n % i == 0) return false;\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\n\\r\\nvoid xuatSoNguyenTo(int n, int a[]) {\\r\\n    cout << \\"Cac so nguyen to trong mang: \\";\\r\\n    for (int i = 0; i < n; i++) {\\r\\n        if (ktnt(a[i])) {\\r\\n            cout << a[i] << \\" \\";\\r\\n        }\\r\\n    }\\r\\n    cout << endl;\\r\\n}\\r\\n\\r\\nint demSoNguyenTo(int n, int a[]) {\\r\\n    int cnt = 0;\\r\\n    for (int i = 0; i < n; i++) {\\r\\n        if (ktnt(a[i])) {\\r\\n            cnt++;\\r\\n        }\\r\\n    }\\r\\n    return cnt;\\r\\n}\\r\\n\\r\\nint tongSoNguyenTo(int n, int a[]) {\\r\\n    int s = 0;\\r\\n    for (int i = 0; i < n; i++) {\\r\\n        if (ktnt(a[i])) {\\r\\n            s += a[i];\\r\\n        }\\r\\n    }\\r\\n    return s;\\r\\n}\\r\\n\\r\\nfloat tbcSoNguyenTo(int n, int a[]) {\\r\\n    int cnt = demSoNguyenTo(n, a);\\r\\n    return (cnt > 0) ? static_cast<float>(tongSoNguyenTo(n, a)) / cnt : 0;\\r\\n}\\r\\n\\r\\nvoid ptuDuongDauTien(int n, int a[]) {\\r\\n    cout << \\"Phan tu duong dau tien: \\";\\r\\n    for (int i = 0; i < n; i++) {\\r\\n        if (a[i] > 0) {\\r\\n            cout << a[i] << endl;\\r\\n            return;\\r\\n        }\\r\\n    }\\r\\n    cout << \\"Khong co phan tu duong\\" << endl;\\r\\n}\\r\\n\\r\\nvoid ptuDuongCuoiCung(int n, int a[]) {\\r\\n    cout << \\"Phan tu duong cuoi cung: \\";\\r\\n    for (int i = n - 1; i >= 0; i--) {\\r\\n        if (a[i] > 0) {\\r\\n            cout << a[i] << endl;\\r\\n            return;\\r\\n        }\\r\\n    }\\r\\n    cout << \\"Khong co phan tu duong\\" << endl;\\r\\n}\\r\\n\\r\\nint Max(int n, int a[]) {\\r\\n    int max = a[0];\\r\\n    for (int i = 1; i < n; i++) {\\r\\n        if (a[i] > max) {\\r\\n            max = a[i];\\r\\n        }\\r\\n    }\\r\\n    return max;\\r\\n}\\r\\n\\r\\nint Min(int n, int a[]) {\\r\\n    int min = a[0];\\r\\n    for (int i = 1; i < n; i++) {\\r\\n        if (a[i] < min) {\\r\\n            min = a[i];\\r\\n        }\\r\\n    }\\r\\n    return min;\\r\\n}\\r\\n\\r\\nint main() {\\r\\n    int n, a[10];\\r\\n    do {\\r\\n        cout << \\"Enter N (1 <= N <= 10): \\";\\r\\n        cin >> n;\\r\\n        if (n <= 0 || n > 10) {\\r\\n            cout << \\"Nhap sai, vui long nhap lai.\\" << endl;\\r\\n        }\\r\\n    } while (n <= 0 || n > 10);\\r\\n\\r\\n    nhapMang(n, a);\\r\\n    mangChiaHetCho3(n, a);\\r\\n    cout << \\"So cac phan tu duong: \\" << demSoDuong(n, a) << endl;\\r\\n    cout << \\"Trung binh cong cua mang: \\" << trungBinhCong(n, a) << endl;\\r\\n    cout << \\"Trung binh cong cac phan tu duong: \\" << trungBinhCongSoDuong(n, a) << endl;\\r\\n    xuatSoNguyenTo(n, a);\\r\\n    cout << \\"So cac phan tu nguyen to: \\" << demSoNguyenTo(n, a) << endl;\\r\\n    cout << \\"Tong cac so nguyen to: \\" << tongSoNguyenTo(n, a) << endl;\\r\\n    cout << \\"Trung binh cong cac so nguyen to: \\" << tbcSoNguyenTo(n, a) << endl;\\r\\n    ptuDuongDauTien(n, a);\\r\\n    ptuDuongCuoiCung(n, a);\\r\\n    cout << \\"Phan tu lon nhat: \\" << Max(n, a) << endl;\\r\\n    cout << \\"Phan tu nho nhat: \\" << Min(n, a) << endl;\\r\\n\\r\\n    return 0;\\r\\n}\\r\\n```\\r\\n\\r\\n</details>\\r\\n\\r\\n### B\xe0i 6: Ki\u1ec3u d\u1eef li\u1ec7u c\u1ea5u tr\xfac - struct\\r\\n\\r\\n**C\xe2u 1:** \u0110\u1ecbnh ngh\u0129a ki\u1ec3u d\u1eef li\u1ec7u ph\u1ea7n s\u1ed1 g\u1ed3m s\u1ed1 v\xe0 m\xe0u s\u1ed1. Vi\u1ebft ch\u01b0\u01a1ng tr\xecnh th\u1ef1c hi\u1ec7n:\\r\\n\\r\\n- a. Nh\u1eadp 1 ph\u1ea7n s\u1ed1.\\r\\n- b. Xu\u1ea5t ph\u1ea7n s\u1ed1.\\r\\n- c. R\xfat g\u1ecdn ph\u1ea7n s\u1ed1.\\r\\n- d. T\xednh t\u1ed5ng 2 ph\u1ea7n s\u1ed1.\\r\\n- e. So s\xe1nh 2 ph\u1ea7n s\u1ed1.\\r\\n\\r\\n**C\xe2u 2:** L\xe0m ti\u1ebfp c\xe2u 1, c\xe0i \u0111\u1eb7t c\xe1c h\xe0m sau:\\r\\na. Nh\u1eadp v\xe0o d\xe3y ph\u1ea7n s\u1ed1.\\r\\nb. Xu\u1ea5t d\xe3y ph\u1ea7n s\u1ed1.\\r\\nc. T\xednh t\u1ed5ng d\xe3y.\\r\\nd. T\xecm ph\u1ea7n s\u1ed1 l\u1edbn nh\u1ea5t.\\r\\ne. S\u1eafp x\u1ebfp d\xe3y ph\u1ea7n s\u1ed1 t\u0103ng d\u1ea7n.\\r\\n\\r\\n**C\xe2u 3:** Vi\u1ebft h\xe0m nh\u1eadp d\u1eef li\u1ec7u cho m\u1ed9t sinh vi\xean, th\xf4ng tin v\u1ec1 sinh vi\xean g\u1ed3m:\\r\\n\\r\\n- a. M\xe3 sinh vi\xean (chu\u1ed7i 10 k\xfd t\u1ef1).\\r\\n- b. T\xean (l\xe0 chu\u1ed7i t\u1ed1i \u0111a 10 k\xfd t\u1ef1).\\r\\n- c. Ng\xe0y th\xe1ng n\u0103m sinh (theo ki\u1ec3u int, v\xed d\u1ee5: ng\xe0y/th\xe1ng/n\u0103m).\\r\\n- d. Gi\u1edbi t\xednh (Nam ho\u1eb7c N\u1eef).\\r\\n- e. L\u1edbp (chu\u1ed7i 7 k\xfd t\u1ef1, trong \u0111\xf3 2 k\xfd t\u1ef1 l\xe0 n\u0103m v\xe0o h\u1ecdc, 1 k\xfd t\u1ef1 ti\u1ebfp theo l\xe0 b\u1eadc h\u1ecdc (D: \u0110\u1ea1i h\u1ecdc, C: Cao \u0111\u1eb3ng), 2 k\xfd t\u1ef1 ti\u1ebfp theo l\xe0 ng\xe0nh h\u1ecdc (TH: Tin h\u1ecdc, KT: K\u1ebf to\xe1n, QT: Qu\u1ea3n tr\u1ecb, \u0110T: \u0110i\u1ec7n t\u1eed, DT: \u0110i\u1ec7n tho\u1ea1i, ...)).\\r\\n- f. \u0110i\u1ec3m to\xe0n, l\xfd, tin (Ki\u1ec3u s\u1ed1 th\u1ef1c)."},{"id":"/2024/4/19/aws-cloud","metadata":{"permalink":"/2024/4/19/aws-cloud","editUrl":"https://github.com/nhonvo/nhonvo.github.io/edit/main/blog/blog/2024-4-19-aws-cloud.md","source":"@site/blog/2024-4-19-aws-cloud.md","title":"AWS cloud practitioner sample exam","description":"test","date":"2024-04-19T00:00:00.000Z","formattedDate":"April 19, 2024","tags":[{"label":"aws","permalink":"/tags/aws"}],"readingTime":26.775,"hasTruncateMarker":true,"authors":[{"name":"Truong Nhon"}],"frontMatter":{"layout":"post","title":"AWS cloud practitioner sample exam","subtitle":"","date":"2024-04-19T00:00:00.000Z","author":"Truong Nhon","published":false,"hidden":true,"catalog":true,"tags":["aws"]},"prevItem":{"title":"L\u1eadp tr\xecnh c\u01a1 b\u1ea3n","permalink":"/basic-programming/"},"nextItem":{"title":"Azure Cloud","permalink":"/2024/4/13/azure-cloud"}},"content":"\x3c!--truncate--\x3e\\r\\n\\r\\n\\r\\n## test\\r\\n\\r\\n- Which compute option reduces costs when you commit to a consistent amount of compute usage for a 1-year or 3-year term?\\r\\n\\r\\n- [ ] Spot Instances\\r\\n- [ ] Savings Plans\\r\\n- [ ] Reserved Instances\\r\\n- [ ] Dedicated Hosts\\r\\n\\r\\n- Which service enables you to consolidate and manage multiple AWS accounts from a central location?\\r\\n\\r\\n- [ ] AWS Identity and Access Management (IAM)\\r\\n- [ ] AWS Key Management Service (AWS KMS)\\r\\n- [ ] AWS Organizations\\r\\n- [ ] AWS Artifact\\r\\n\\r\\n- Which action can you perform in Amazon CloudFront?\\r\\n\\r\\n- [ ] Deliver content to customers through a global network of edge locations.\\r\\n- [ ] Provision resources by using programming languages or a text file.\\r\\n- [ ] Provision an isolated section of the AWS Cloud to launch resources in a virtual network that you define.\\r\\n- [ ] Run infrastructure in a hybrid cloud approach.\\r\\n\\r\\n- Which pillar of the AWS Well-Architected Framework focuses on using computing resources in ways that meet system requirements?\\r\\n\\r\\n- [ ] Performance Efficiency\\r\\n- [ ] Security\\r\\n- [ ] Reliability\\r\\n- [ ] Operational Excellence\\r\\n\\r\\n- Which statement best describes Elastic Load Balancing?\\r\\n\\r\\n- [ ] A service that provides data that you can use to monitor your applications, optimize resource utilization, and respond to system-wide performance changes\\r\\n- [ ] A service that enables you to set up, manage, and scale a distributed in-memory or cache environment in the cloud\\r\\n- [ ] A service that monitors your applications and automatically adds or removes capacity from your resource groups in response to changing demand\\r\\n- [ ] A service that distributes incoming traffic across multiple targets, such as Amazon EC2 instances\\r\\n\\r\\n- Which statement is TRUE for AWS Lambda?\\r\\n\\r\\n- [ ] The first step in using AWS Lambda is provisioning a server.\\r\\n- [ ] You pay only for compute time while your code is running.\\r\\n- [ ] Before using AWS Lambda, you must prepay for your estimated compute time.\\r\\n- [ ] To use AWS Lambda, you must configure the servers that run your code.\\r\\nYou are running an Amazon EC2 instance and want to store data in an attached resource. Your data is temporary and will not be kept \\r\\n- long term. Which resource should you use?\\r\\n\\r\\n- [ ] Amazon Elastic Block Store (Amazon EBS) volume\\r\\n- [ ] Subnet\\r\\n- [ ] Amazon S3 bucket\\r\\n- [ ] Instance store\\r\\n\\r\\n- Which tool enables you to visualize, understand, and manage your AWS costs and usage over time?\\r\\n\\r\\n- [ ] AWS Budgets\\r\\n- [ ] AWS Artifact\\r\\n- [ ] AWS Pricing Calculator\\r\\n- [ ] AWS Cost Explorer\\r\\n\\r\\n- Which tool is used to automate actions for AWS services and applications through scripts? \\r\\n\\r\\n- [ ] AWS Command Line Interface\\r\\n- [ ] Amazon QLDB\\r\\n- [ ] AWS Snowball\\r\\n- [ ] Amazon Redshift\\r\\n\\r\\n- Which AWS Trusted Advisor category includes checks for high-utilization EC2 instances?\\r\\n\\r\\n- [ ] Security\\r\\n- [ ] Fault Tolerance\\r\\n- [ ] Performance\\r\\n- [ ] Cost Optimization\\r\\n\\r\\n- Which virtual private cloud (VPC) component controls inbound and outbound traffic for Amazon EC2 instances?\\r\\n\\r\\n- [ ] Internet gateway\\r\\n- [ ] Security group\\r\\n- [ ] Subnet\\r\\n- [ ] Network access control list\\r\\n\\r\\n- Which statement best describes AWS Marketplace?\\r\\n\\r\\n- [ ] A resource that provides guidance, architectural reviews, and ongoing communication with your company as you plan, deploy, and optimize your applications\\r\\n- [ ] A resource that can answer questions about best practices and assist with troubleshooting issues\\r\\n- [ ] A digital catalog that includes thousands of software listings from independent software vendors\\r\\n- [ ] An online tool that inspects your AWS environment and provides real-time guidance in accordance with AWS best practices\\r\\n\\r\\n- Which service enables you to review details for user activities and API calls that have occurred within your AWS environment?\\r\\n\\r\\n- [ ] AWS CloudTrail\\r\\n- [ ] Amazon Inspector\\r\\n- [ ] AWS Trusted Advisor\\r\\n- [ ] Amazon CloudWatch\\r\\n\\r\\n- You want Amazon S3 to monitor your objects\u2019 access patterns. Which storage class should you use? \\r\\n\\r\\n- [ ] Amazon S3 Intelligent-Tiering\\r\\n- [ ] Amazon S3 One Zone-IA\\r\\n- [ ] Amazon S3 Standard-IA\\r\\n- [ ] Amazon S3 Glacier Flexible Retrieval\\r\\nIn the S3 Intelligent-Tiering storage class, Amazon S3 moves objects between a frequent access tier and an infrequent access tier. \\r\\n- Which storage classes are used for these tiers? (Select TWO.)\\r\\n\\r\\n- [ ] Amazon S3 Glacier Flexible Retrieval\\r\\n- [ ] Amazon S3 Standard-IA\\r\\n- [ ] Amazon S3 One Zone-IA\\r\\n- [ ] Amazon S3 Glacier Deep Archive\\r\\n- [ ] Amazon S3 Standard\\r\\n\\r\\n- Which service enables you to build the workflows that are required for human review of machine learning predictions?\\r\\n\\r\\n- [ ] Amazon Augmented AI\\r\\n- [ ] Amazon Aurora\\r\\n- [ ] Amazon Textract\\r\\n- [ ] Amazon Lex\\r\\n\\r\\n- Which Perspective of the AWS Cloud Adoption Framework focuses on recovering IT workloads to meet the requirements of your business\\r\\nstakeholders?\\r\\n\\r\\n- [ ] Operations Perspective\\r\\n- [ ] Governance Perspective\\r\\n- [ ] Business Perspective\\r\\n- [ ] People Perspective\\r\\n\\r\\n- Which Support plans include access to all AWS Trusted Advisor checks? (Select TWO.)\\r\\n\\r\\n- [ ] Basic\\r\\n- [ ] AWS Free Tier\\r\\n- [ ] Enterprise\\r\\n- [ ] Developer\\r\\n- [ ] Business\\r\\n\\r\\n- Which service is used to transfer up to 100 PB of data to AWS?\\r\\n\\r\\n- [ ] AWS DeepRacer\\r\\n- [ ] AWS Snowmobile\\r\\n- [ ] Amazon Neptune\\r\\n- [ ] Amazon CloudFront\\r\\n\\r\\n- Which actions can you perform in Amazon Route 53? (Select TWO.)\\r\\n\\r\\n- [ ] Manage DNS records for domain names.\\r\\n- [ ] Access AWS security and compliance reports and select online agreements.\\r\\n- [ ] Monitor your applications and respond to system-wide performance changes.\\r\\n- [ ] Connect user requests to infrastructure in AWS and outside of AWS.\\r\\n- [ ] Automate the deployment of workloads into your AWS environment.\\r\\n\\r\\n- You want to store data in a key-value database. Which service should you use?\\r\\n\\r\\n- [ ] Amazon Aurora\\r\\n- [ ] Amazon RDS\\r\\n- [ ] Amazon DocumentDB\\r\\n- [ ] Amazon DynamoDB\\r\\n\\r\\n- Which service is used to quickly deploy and scale applications on AWS?\\r\\n\\r\\n- [ ] AWS Elastic Beanstalk\\r\\n- [ ] Amazon CloudFront\\r\\n- [ ] AWS Outposts\\r\\n- [ ] AWS Snowball\\r\\n\\r\\n- Which statement best describes Amazon GuardDuty?\\r\\n\\r\\n- [ ] A service that lets you monitor network requests that come into your web applications\\r\\n- [ ] A service that provides intelligent threat detection for your AWS infrastructure and resources\\r\\n- [ ] A service that checks applications for security vulnerabilities and deviations from security best practices\\r\\n- [ ] A service that helps protect your applications against distributed denial-of-service (DDoS) attacks\\r\\n\\r\\n- Which component or service enables you to establish a dedicated private connection between your data center and virtual private cloud (VPC)?\\r\\n\\r\\n- [ ] AWS Direct Connect\\r\\n- [ ] Amazon CloudFront\\r\\n- [ ] Internet gateway\\r\\n- [ ] Virtual private gateway\\r\\n\\r\\n- You want to send and receive messages between distributed application components. Which service should you use?  \\r\\n\\r\\n- [ ] Amazon ElastiCache\\r\\n- [ ] AWS Snowball\\r\\n- [ ] Amazon Route 53\\r\\n- [ ] Amazon Simple Queue Service (Amazon SQS)\\r\\n\\r\\n- Which migration strategy involves changing how an application is architected and developed, typically by using cloud-native features?\\r\\n\\r\\n- [ ] Repurchasing\\r\\n- [ ] Rehosting\\r\\n- [ ] Refactoring\\r\\n- [ ] Replatforming\\r\\n\\r\\n- Which tasks are the responsibilities of AWS? (Select TWO.)\\r\\n\\r\\n- [ ] Creating IAM users and groups\\r\\n- [ ] Maintaining virtualization infrastructure\\r\\n- [ ] Training company employees on how to use AWS services\\r\\n- [ ] Configuring AWS infrastructure devices\\r\\n- [ ] Configuring security groups on Amazon EC2 instances\\r\\n\\r\\n- Which service is used to run containerized applications on AWS?\\r\\n\\r\\n- [ ] Amazon Elastic Kubernetes Service (Amazon EKS)\\r\\n- [ ] Amazon Aurora\\r\\n- [ ] Amazon SageMaker\\r\\n- [ ] Amazon Redshift\\r\\n\\r\\n- You want to store data in a volume that is attached to an Amazon EC2 instance. Which service should you use?\\r\\n\\r\\n- [ ] Amazon ElastiCache\\r\\n- [ ] AWS Lambda\\r\\n- [ ] Amazon Simple Storage Service (Amazon S3)\\r\\n- [ ] Amazon Elastic Block Store (Amazon EBS)\\r\\n\\r\\n- Which statement best describes an Availability Zone?\\r\\n\\r\\n- [ ] The server from which Amazon CloudFront gets your files\\r\\n- [ ] A fully isolated portion of the AWS global infrastructure\\r\\n- [ ] A site that Amazon CloudFront uses to cache copies of content for faster delivery to users at any location\\r\\n- [ ] A separate geographical location with multiple locations that are isolated from each other\\r\\n\\r\\n---\\r\\n## Answer\\r\\n\\r\\n- **Savings Plans 1.00 / 1**\\r\\n\\r\\nThe correct response option is Savings Plans. Amazon EC2 Savings Plans enable you to reduce your compute costs by committing to a consistent amount of compute usage for a 1-year or 3-year term. This results in savings of up to 72% over On-Demand Instance costs. Any usage up to the commitment is charged at the discounted Savings Plan rate (for example, $10 an hour). Any usage beyond the commitment is charged at regular On-Demand Instance rates. The other response options are incorrect because: Reserved Instances are a billing discount that is applied to the use of On-Demand Instances in your account. You can purchase Standard Reserved and Convertible Reserved Instances for a one-year or three-year term, and Scheduled Reserved Instances for a one-year term. Unlike Savings Plans, Reserved Instances do not require you to commit to a consistent amount of compute usage over the duration of the contract. Spot Instances are ideal for workloads with flexible start and end times or that can withstand interruptions. Spot Instances leverage unused EC2 computing capacity and offer you cost savings at up to 90% of On-Demand Instance prices. Dedicated Hosts are physical servers with EC2 instance capacity that is fully dedicated to your use. You can use your existing per-socket, per-core, or per-VM software licenses to help maintain license compliance. You can purchase On-Demand Dedicated Hosts or Reserved Dedicated Hosts. Of all the Amazon EC2 options that were covered in this course, Dedicated Hosts are the most expensive.\\r\\n\\r\\n- **AWS Organizations 1.00 / 1**\\r\\n\\r\\nThe correct response option is AWS Organizations. In AWS Organizations, you can centrally control permissions for the accounts in your organization by using service control policies (SCPs). Additionally, you can use the consolidated billing feature in AWS Organizations to combine usage and receive a single bill for multiple AWS accounts. The other response options are incorrect because: AWS Identity and Access Management (IAM) is a service that you can use to manage access to AWS services and resources. AWS Artifact is a service that enables you to access AWS security and compliance reports and special online agreements. AWS Key Management Service (AWS KMS) enables you to create, manage, and use cryptographic keys.\\r\\n\\r\\n- **[https://aws.amazon.com/organizations/: https://aws.amazon.com/organizations/] Deliver content to customers through a global network of edge locations. 1.00 / 1**\\r\\n\\r\\nThe correct response is Deliver content to customers through a global network of edge locations. Amazon CloudFront is a content delivery service. It uses a network of edge locations to cache content and deliver content to customers all over the world. When content is cached, it is stored locally as a copy. This content might be video files, photos, webpages, and so on. The other response options are incorrect because: Run infrastructure in a hybrid cloud approach - This action can be performed with AWS Outposts. Provision resources by using programming languages or a text file - This action can be performed in AWS CloudFormation. Provision an isolated section of the AWS Cloud to launch resources in a virtual network that you define - This action can be performed in Amazon Virtual Private Cloud (Amazon VPC).\\r\\n\\r\\n- [**Amazon CloudFront: https://aws.amazon.com/cloudfront/] Performance Efficiency 1.00 / 1**\\r\\n\\r\\nThe correct response option is Performance Efficiency. The Performance Efficiency pillar focuses on using computing resources efficiently to meet system requirements, and to maintain that efficiency as demand changes and technologies evolve. The other responses are incorrect because: The Operational Excellence pillar includes the ability to run workloads effectively, gain insights into their operations, and continuously improve supporting processes to deliver business value. The Security pillar focuses on protecting data, systems, and assets. It also focuses on using cloud technologies to improve the security of your workloads. The Reliability pillar focuses on the ability of a workload to consistently and correctly perform its intended functions.\\r\\n\\r\\n- **[AWS Well-Architected Framework: https://docs.aws.amazon.com/wellarchitected/latest/framework/welcome.html] A service that distributes incoming traffic across multiple targets, such as Amazon EC2 instances 1.00 / 1**\\r\\n\\r\\nThe correct response option is A service that distributes incoming traffic across multiple targets, such as Amazon EC2 instances. A load balancer acts as a single point of contact for all incoming web traffic to your Auto Scaling group. This means that as Amazon EC2 instances are added or removed in response to the amount of incoming traffic, these requests are routed to the load balancer first and then spread across multiple resources that will handle them. The other response options are incorrect because: A service that monitors your applications and automatically adds or removes capacity from your resource groups in response to changing demand - This response option describes AWS Auto Scaling. A service that provides data that you can use to monitor your applications, optimize resource utilization, and respond to system-wide performance changes - This response option describes Amazon CloudWatch. Although Elastic Load Balancing does optimize resource utilization by distributing incoming traffic across available resources, this would not be the best response option because Elastic Load Balancing does not provide all the other listed features. A service that enables you to set up, manage, and scale a distributed in-memory or cache environment in the cloud - This response option describes Amazon ElastiCache.\\r\\n\\r\\n- **[Elastic Load Balancing: https://aws.amazon.com/elasticloadbalancing/] You pay only for compute time while your code is running. 1.00 / 1**\\r\\n\\r\\nThe correct response option is You pay only for compute time while your code is running. AWS Lambda is a service that lets you run code without needing to provision or manage servers. While using AWS Lambda, you pay only for the compute time that you consume. You are charged only when your code is running. With AWS Lambda, you can run code for virtually any type of application or backend service, all with zero administration.\\r\\n\\r\\n- **[AWS Lambda: https://aws.amazon.com/lambda/] Instance store 1.00 / 1**\\r\\n\\r\\nThe correct response option is instance store. Instance stores are ideal for temporary data that does not need to be kept long term. When an Amazon EC2 instance is stopped or terminated, all the data that has been written to the attached instance store is deleted. The other response options are incorrect because: Amazon EBS volumes are ideal for data that needs to be retained. When an Amazon EC2 instance is stopped or terminated, all of the data on the attached EBS volume is still available. Amazon S3 buckets cannot be attached to Amazon EC2 instances. A subnet is a section of a virtual private cloud (VPC) in which you can group resources based on security or operational needs.\\r\\n\\r\\n- **[Amazon EC2 instance store: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html] AWS Cost Explorer 1.00 / 1**\\r\\n\\r\\nThe correct response option is AWS Cost Explorer. With AWS Cost Explorer, you can quickly create custom reports to analyze your AWS cost and usage data. The other response options are incorrect because: AWS Budgets lets you set custom alerts that will notify you when your service usage exceeds (or is forecasted to exceed) the amount that you have budgeted. AWS Pricing Calculator lets you explore AWS services and create an estimate for the cost of your use cases on AWS. In the AWS Pricing Calculator, you can enter details for your cloud computing requirements and then receive a detailed estimate that can be exported and shared. AWS Artifact is a service that enables you to access AWS security and compliance reports and special online agreements.\\r\\n\\r\\n- **[AWS Cost Explorer: https://aws.amazon.com/aws-cost-management/aws-cost-explorer/] AWS Command Line Interface 1.00 / 1**\\r\\n\\r\\nThe correct response option is AWS Command Line Interface. The AWS Command Line Interface (AWS CLI) enables you to control multiple AWS services directly from the command line within one tool. For example, you can use commands to start an Amazon EC2 instance, connect an Amazon EC2 instance to a specific Auto Scaling group, and more. The AWS CLI is available for users on Windows, macOS, and Linux. The other response options are incorrect because: Amazon Redshift is a data warehousing service that you can use for big data analytics. It offers the ability to collect data from many sources and help you to understand relationships and trends across your data. Amazon Quantum Ledger Database (Amazon QLDB) is a ledger database service. You can use Amazon QLDB to review a complete history of all the changes that have been made to your application data. AWS Snowball is a device that enables you to transfer large amounts of data into and out of AWS.\\r\\n\\r\\n- **[AWS Command Line Interface: https://aws.amazon.com/cli/] Security group 1.00 / 1**\\r\\n\\r\\nThe correct response option is security group. A security group is a virtual firewall that controls inbound and outbound traffic for an Amazon EC2 instance. By default, a security group denies all inbound traffic and allows all outbound traffic. You can add custom rules to configure which traffic should be allowed or denied. The other response options are incorrect because: A subnet is a section of a VPC in which you can group resources based on security or operational needs. A network access control list (ACL) is a virtual firewall that controls inbound and outbound traffic at the subnet level. An internet gateway is a connection between a VPC and the internet. It allows public traffic from the internet to access a VPC.\\r\\n\\r\\n- **[Security groups for your VPC: https://docs.aws.amazon.com/vpc/latest/userguide/vpc-security-groups.html] A digital catalog that includes thousands of software listings from independent software vendors 1.00 / 1**\\r\\n\\r\\nThe correct response option is A digital catalog that includes thousands of listings from independent software vendors. You can use AWS Marketplace to find, test, and buy software that runs on AWS. The other response options are incorrect because: A resource that can answer questions about best practices and assist with troubleshooting issues - This response option describes AWS Support. A resource that provides guidance, architectural reviews, and ongoing communication with your company as you plan, deploy, and optimize your applications - This response option describes a Technical Account Manager (TAM). An online tool that inspects your AWS environment and provides real-time guidance in accordance with AWS best practices - This response option describes AWS Trusted Advisor.\\r\\n\\r\\n- **[AWS Marketplace: https://aws.amazon.com/marketplace] AWS CloudTrail 1.00 / 1**\\r\\n\\r\\nThe correct response option is AWS CloudTrail. With CloudTrail, you can view a complete history of user activity and API calls for your applications and resources. Events are typically updated in CloudTrail within 15 minutes after an API call was made. You can filter events by specifying the time and date that an API call occurred, the user who requested the action, the type of resource that was involved in the API call, and more. The other response options are incorrect because: Amazon CloudWatch is a service that provides data that you can use to monitor your applications, optimize resource utilization, and respond to system-wide performance changes. Amazon Inspector is a service that checks applications for security vulnerabilities and deviations from security best practices. AWS Trusted Advisor is an online tool that inspects your AWS environment and provides real-time guidance in accordance with AWS best practices.\\r\\n\\r\\n- **[AWS CloudTrail: https://aws.amazon.com/cloudtrail/] Amazon S3 Intelligent-Tiering 1.00 / 1**\\r\\n\\r\\nThe correct response option is Amazon S3 Intelligent-Tiering. In the Amazon S3 Intelligent-Tiering storage class, Amazon S3 monitors objects access patterns. If you haven\'t accessed an object for 30 consecutive days, Amazon S3 automatically moves it to the infrequent access tier, Amazon S3 Standard-IA. If you access an object in the infrequent access tier, Amazon S3 automatically moves it to the frequent access tier, Amazon S3 Standard. The other response options are incorrect because: Amazon S3 Glacier Flexible Retrieval is a low-cost storage class that is ideal for data archiving. You can retrieve objects stored in the Amazon S3 Glacier Flexible Retrieval storage class within a few minutes to a few hours. The Amazon S3 Standard-IA storage class is ideal for data that is infrequently accessed but requires high availability when needed. Both Amazon S3 Standard and Amazon S3 Standard-IA store data in a minimum of three Availability Zones. Amazon S3 Standard-IA provides the same level of availability as Amazon S3 Standard but at a lower storage price. Amazon S3 One Zone-IA is ideal for infrequently accessed data that does not require high availability.\\r\\n\\r\\n- **[Amazon S3 storage classes: https://aws.amazon.com/s3/storage-classes/] Amazon Augmented AI 1.00 / 1**\\r\\n\\r\\nThe correct response option is Amazon Augmented AI. Amazon Augmented AI (Amazon A2I) provides built-in human review workflows for common machine learning use cases, such as content moderation and text extraction from documents. With Amazon A2I, you can also create your own workflows for machine learning models built on Amazon SageMaker or any other tools. The other response options are incorrect because: Amazon Textract is a machine learning service that automatically extracts text and data from scanned documents. Amazon Lex is a service that enables you to build conversational interfaces using voice and text. Amazon Aurora is an enterprise-class relational database.\\r\\n\\r\\n- **[Amazon Augmented AI: https://aws.amazon.com/augmented-ai/] Operations Perspective 1.00 / 1**\\r\\n\\r\\nThe correct response option is Operations Perspective. The Operations Perspective of the AWS Cloud Adoption Framework also includes principles for operating in the cloud by using agile best practices. The other response options are incorrect because: The Business Perspective helps you to move from a model that separates business and IT strategies into a business model that integrates IT strategy. The People Perspective helps Human Resources (HR) employees prepare their teams for cloud adoption by updating organizational processes and staff skills to include cloud-based competencies. The Governance Perspective helps you understand how to update the staff skills and organizational processes that are necessary to ensure business governance in the cloud.\\r\\n\\r\\n- **[Whitepaper: An Overview of the AWS Cloud Adoption Framework: https://d1.awsstatic.com/whitepapers/aws_cloud_adoption_framework.pdf] Enterprise;Business 1.00 / 1**\\r\\n\\r\\n The two correct response options are: Enterprise Business The other response options are incorrect because: The Basic and Developer Support plans provide access to a limited selection of AWS Trusted Advisor checks. The AWS Free Tier is not a Support plan. It is a program that consists of three types of offers that allow customers to use AWS services without incurring costs: Always free, 12 months free, and Trials.\\r\\n\\r\\n- [**AWS Trusted Advisor: https://aws.amazon.com/premiumsupport/technology/trusted-advisor/] AWS Snowmobile 1.00 / 1**\\r\\n\\r\\nThe correct response option is AWS Snowmobile. AWS Snowmobile is a service that is used for transferring up to 100 PB of data to AWS. Each Snowmobile is a 45-foot long shipping container that is pulled by a semi-trailer truck. The other response options are incorrect because: Amazon Neptune is a graph database service. You can use Amazon Neptune to build and run applications that work with highly connected datasets, such as recommendation engines, fraud detection, and knowledge graphs. Amazon CloudFront is a content delivery service. AWS DeepRacer is an autonomous 1/18 scale race car that you can use to test reinforcement learning models.\\r\\n\\r\\n- **[AWS Snow Family: https://aws.amazon.com/snow/] Manage DNS records for domain names.;Connect user requests to infrastructure in AWS and outside of AWS. 1.00 / 1**\\r\\n\\r\\n The correct two response options are: Connect user requests to infrastructure in AWS and outside of AWS. Manage DNS records for domain names. Amazon Route 53 is a DNS web service. It gives developers and businesses a reliable way to route end users to internet applications that are hosted in AWS. Additionally, you can transfer DNS records for existing domain names that are currently managed by other domain registrars, or register new domain names directly within Amazon Route 53. The other response options are incorrect because: Monitor your applications and respond to system-wide performance changes - These actions can be performed in Amazon CloudWatch. Access AWS security and compliance reports and special online agreements - This action can be performed in AWS Artifact. Automate the deployment of workloads into your AWS environment - This action can be performed with AWS Quick Starts.\\r\\n\\r\\n- [**Amazon Route 53: https://aws.amazon.com/route53/] Amazon DynamoDB 1.00 / 1**\\r\\n\\r\\nThe correct response option is Amazon DynamoDB. Amazon DynamoDB is a key-value database service. A key-value database might include data pairs such as Name: John Doe, Address: 123 Any Street, and City: Any town. In a key-value database, you can add or remove attributes from items in the table at any time. Additionally, not every item in the table has to have the same attributes. The other response options are incorrect because: Amazon Relational Database Service (Amazon RDS) and Amazon Aurora use structured query language (SQL) to store and query data. They are not key-value databases. Amazon DocumentDB is a document database service that supports MongoDB workloads.\\r\\n\\r\\n- **[Amazon DynamoDB: https://aws.amazon.com/dynamodb/] AWS Elastic Beanstalk 1.00 / 1**\\r\\n\\r\\nThe correct response option is AWS Elastic Beanstalk. You upload your application, and Elastic Beanstalk automatically handles the deployment details of capacity provisioning, load balancing, auto-scaling, and application health monitoring. The other response options are incorrect because: AWS Outposts is a service that enables you to run infrastructure in a hybrid cloud approach. Amazon CloudFront is a content delivery service. AWS Snowball is a device that enables you to transfer large amounts of data into and out of AWS.\\r\\n\\r\\n- **[AWS Quick Starts: https://aws.amazon.com/quickstart/?solutions-all.sort-by=item.additionalFields.sortDate&solutions-all.sort-order=desc&awsf. filter-content-type=*all&awsf.filter-tech-category=*all&awsf.filter-industry=*all] A service that provides intelligent threat detection for your AWS infrastructure and resources 1.00 / 1**\\r\\n\\r\\nThe correct response option is A service that provides intelligent threat detection for your AWS infrastructure and resources. AWS GuardDuty identifies threats by continually monitoring the network activity and account behavior within your AWS environment. The other response options are incorrect because: A service that helps protect your applications against distributed denial-of-service (DDoS) attacks - This response option describes AWS Shield. A service that checks applications for security vulnerabilities and deviations from security best practices - This response option describes Amazon Inspector. A service that lets you monitor network requests that come into your web applications - This response option describes AWS WAF.\\r\\n\\r\\n- **[Amazon GuardDuty: https://aws.amazon.com/guardduty/] AWS Direct Connect 1.00 / 1**\\r\\n\\r\\nThe correct response option is AWS Direct Connect. AWS Direct Connect is a service that enables you to establish a dedicated private connection between your data center and VPC. The private connection that AWS Direct Connect provides helps you to reduce network costs and increase the amount of bandwidth that can travel through your network. The other response options are incorrect because: Amazon CloudFront is a content delivery service. It uses a network of edge locations to cache content and deliver content to customers all over the world. A virtual private gateway enables you to establish a virtual private network (VPN) connection between your VPC and a private network, such as an on-premises data center or internal corporate network. A virtual private gateway allows traffic into the VPC only if it is coming from an approved network. An internet gateway is a connection between a VPC and the internet. It allows public traffic from the internet to access a VPC.\\r\\n\\r\\n- **[AWS Direct Connect: https://aws.amazon.com/directconnect/] Amazon Simple Queue Service (Amazon SQS) 1.00 / 1**\\r\\n\\r\\nThe correct response option is Amazon Simple Queue Service (Amazon SQS). Amazon SQS is a message queuing service. Using Amazon SQS, you can send, store, and receive messages between software components at any volume size, without losing messages or requiring other services to be available. In Amazon SQS, an application sends messages into a queue. A user or service retrieves a message from the queue, processes it, and then deletes it from the queue. The other response options are incorrect because: AWS Snowball is a device that enables you to transfer large amounts of data into and out of AWS. Amazon ElastiCache is a service that adds caching layers on top of your databases to help improve the read times of common requests. Amazon Route 53 is a DNS web service. It gives developers and businesses a reliable way to route end users to internet applications that are hosted in AWS. Additionally, you can transfer DNS records for existing domain names that are currently managed by other domain registrars or register new domain names directly in Amazon Route 53.\\r\\n\\r\\n- **[Amazon SQS: https://aws.amazon.com/sqs/] Refactoring 1.00 / 1**\\r\\n\\r\\nThe correct response option is Refactoring. The other response options are incorrect because: Repurchasing involves replacing an existing application with a cloud-based version, such as software found in AWS Marketplace. Re-hosting involves moving an application to the cloud with little to no modifications to the application itself. It is also known as lift and shift. Re-platforming involves selectively optimizing aspects of an application to achieve benefits in the cloud without changing the core architecture of the application. It is also known as lift, tinker, and shift.\\r\\n\\r\\n- **[6 Strategies for Migrating Applications to the Cloud: https://aws.amazon.com/blogs/enterprise-strategy/6-strategies-for-migrating-applications-to-the-cloud/] Maintaining virtualization infrastructure;Configuring AWS infrastructure devices 1.00 / 1**\\r\\n The two correct response options are: Maintaining virtualization infrastructure Configuring AWS infrastructure devices The other three response options are tasks that are the responsibilities of customers.\\r\\n\\r\\n- [**AWS shared responsibility model: https://aws.amazon.com/compliance/shared-responsibility-model/] Amazon Elastic Kubernetes Service (Amazon EKS) 1.00 / 1**\\r\\n\\r\\nThe correct response option is Amazon Elastic Kubernetes Service (Amazon EKS). Amazon EKS is a fully managed service that you can use to run Kubernetes on AWS. Kubernetes is open-source software that enables you to deploy and manage containerized applications at scale. Containers provide you with a standard way to package your application\'s code and dependencies into a single object. Containers are frequently used for processes and workflows in which there are essential requirements for security, reliability, and scalability. The other response options are incorrect because: Amazon SageMaker is a service that enables you to quickly build, train, and deploy machine learning models. Amazon Aurora is an enterprise-class relational database. Amazon Redshift is a data warehousing service that you can use for big data analytics.\\r\\n\\r\\n- **[Amazon EKS: https://aws.amazon.com/eks/] Amazon Elastic Block Store (Amazon EBS) 1.00 / 1**\\r\\n\\r\\nThe correct response option is Amazon Elastic Block Store (Amazon EBS). Amazon EBS provides block-level storage volumes that you can use with Amazon EC2 instances. If you stop or terminate an Amazon EC2 instance, all the data on the attached EBS volume remains available. The other response options are incorrect because: Amazon Simple Storage Service (Amazon S3) is a service that provides object-level storage. Amazon S3 stores data as objects within buckets. AWS Lambda is a service that lets you run code without provisioning or managing servers. Amazon ElastiCache is a service that adds caching layers on top of your databases to help improve the read times of common requests.\\r\\n\\r\\n- **[Amazon EBS: https://aws.amazon.com/ebs/] A fully isolated portion of the AWS global infrastructure 1.00 / 1**\\r\\n\\r\\nThe correct response option is A fully isolated portion of the AWS global infrastructure. An Availability Zone is a single data center or a group of data centers within a Region. Availability Zones are located tens of miles apart from each other. This helps them to provide inter-connectivity to support the services and applications that run within a Region. The other response options are incorrect because: A separate geographical location with multiple locations that are isolated from each other - This response option describes a Region. The server from which Amazon CloudFront gets your files - This response option describes an origin. A site that Amazon CloudFront uses to cache copies of content for faster delivery to users at any location - This response option describes an Edge location. [AWS global infrastructure: https://aws.amazon.com/about-aws/global-infrastructure/]"},{"id":"/2024/4/13/azure-cloud","metadata":{"permalink":"/2024/4/13/azure-cloud","editUrl":"https://github.com/nhonvo/nhonvo.github.io/edit/main/blog/blog/2024-4-13-azure-cloud.md","source":"@site/blog/2024-4-13-azure-cloud.md","title":"Azure Cloud","description":"2. Your users want to sign-in to devices, apps, and services from anywhere. They want to sign-in using an organizational work or school account instead of a personal account. You must ensure corporate assets are protected and that devices meet standards for security and compliance. Specifically, you need to be able to enable or disable a device. What should you do? (1 Point)","date":"2024-04-13T00:00:00.000Z","formattedDate":"April 13, 2024","tags":[{"label":"azure","permalink":"/tags/azure"},{"label":"cloud","permalink":"/tags/cloud"}],"readingTime":10.32,"hasTruncateMarker":true,"authors":[{"name":"Truong Nhon"}],"frontMatter":{"layout":"post","title":"Azure Cloud","subtitle":"","date":"2024-04-13T00:00:00.000Z","author":"Truong Nhon","published":false,"hidden":true,"catalog":true,"tags":["azure","cloud"]},"prevItem":{"title":"AWS cloud practitioner sample exam","permalink":"/2024/4/19/aws-cloud"},"nextItem":{"title":"Reactjs basic note","permalink":"/2024/3/28/reactjs-note"}},"content":"\x3c!--truncate--\x3e\\r\\n\\r\\n\\r\\n2. Your users want to sign-in to devices, apps, and services from anywhere. They want to sign-in using an organizational work or school account instead of a personal account. You must ensure corporate assets are protected and that devices meet standards for security and compliance. Specifically, you need to be able to enable or disable a device. What should you do? (1 Point)\\r\\n\\r\\na. Enable the device in Azure AD.\\r\\nb. Join the device to Azure AD.\\r\\nc. Register the device with Azure AD.\\r\\n\\r\\n**Correct Answer**: b. Join the device to Azure AD.\\r\\n\\r\\n3. A dedicated and trusted instance of Azure AD is referred to as: (1 Point)\\r\\n\\r\\na. An Azure tenant\\r\\nb. An Azure identity\\r\\nc. An Azure account\\r\\n\\r\\n**Correct Answer**: a. An Azure tenant\\r\\n\\r\\n4. You are configuring Self-service Password Reset. Which of the following is not a validation method? (1 Point)\\r\\n\\r\\na. An email notification.\\r\\nb. A text or code sent to a user\'s mobile or office phone\\r\\nc. A paging service.\\r\\nd. A set of security questions\\r\\n\\r\\n**Correct Answer**: c. A paging service.\\r\\n\\r\\n5. You would like to add a user who has a Microsoft account to your subscription. Which type of user account is this? (1 Point)\\r\\n\\r\\na. Cloud identity\\r\\nb. Directory-Synchronized identity\\r\\nc. Guest User\\r\\n\\r\\n**Correct Answer**: c. Guest User\\r\\n\\r\\n6. If you delete a user account by mistake, can it be restored? (1 Point)\\r\\n\\r\\na. When a user account is deleted, it\'s gone forever and can\'t be restored.\\r\\nb. The user account can be restored, but only when it\'s created within the last 30 days.\\r\\nc. The user account can be restored, but only when it\'s deleted within the last 30 days.\\r\\n\\r\\n**Correct Answer**: c. The user account can be restored, but only when it\'s deleted within the last 30 days.\\r\\n\\r\\n7. Your company financial comptroller wants to be notified whenever the company is halfway to spending the money allocated for cloud services. What should you do? (1 Point)\\r\\n\\r\\na. Create an Azure reservation.\\r\\nb. Create a budget and a spending threshold.\\r\\nc. Create a management group.\\r\\nd. Enter workloads in the Total Cost of Ownership calculator.\\r\\n\\r\\n**Correct Answer**: b. Create a budget and a spending threshold.\\r\\n\\r\\n8. What tool can you use to gain greater visibility into your spending patterns? (1 Point)\\r\\n\\r\\na. Cost Insights\\r\\nb. Cost Analysis\\r\\nc. Your invoice\\r\\n\\r\\n**Correct Answer**: b. Cost Analysis\\r\\n\\r\\n9. Your company is concerned about cost and provisioning too many virtual machines at once. What\'s the best way to control resource provisioning? (1 Point)\\r\\n\\r\\na. Change your subscription to pay as you go.\\r\\nb. Apply spending limits to the development team\'s Azure subscription.\\r\\nc. Verbally give the managers a budget and hold them accountable for overages.\\r\\n\\r\\n**Correct Answer**: b. Apply spending limits to the development team\'s Azure subscription.\\r\\n\\r\\n10. The leadership team wants information on resource costs by departments. What\'s the best way to categorize costs by department? (1 Point)\\r\\n\\r\\na. Apply a tag to each resource that identifies the appropriate billing department.\\r\\nb. Split the cost evenly between departments.\\r\\nc. Keep a spreadsheet that lists each team\'s resources\\r\\n\\r\\n**Correct Answer**: a. Apply a tag to each resource that identifies the appropriate billing department.\\r\\n\\r\\n11. An Azure subscription ................................... (1 Point)\\r\\n\\r\\na. is a logical container used to provision resources in Azure\\r\\nb. is associated with a single department or organization\\r\\nc. represents a single domain\\r\\n\\r\\n**Correct Answer**: a. is a logical container used to provision resources in Azure\\r\\n\\r\\n12. Your organization has several Azure policies that they would like to create and enforce for a new branch office. What should you do? (1 Point)\\r\\n\\r\\na. Create a policy initiative\\r\\nb. Create a management group\\r\\nc. Create a new subscription\\r\\n\\r\\n**Correct Answer**: b. Create a management group\\r\\n\\r\\n13. You would like to categorize resources and billing for different departments like IT and HR. The billing needs to be consolidated across multiple resource groups and you need to ensure everyone complies with the solution. You have created tags for each department, like department:HR. What should you do next? (1 Point)\\r\\n\\r\\na. Create a billing group for each department\\r\\nb. Create an Azure policy\\r\\nc. Create a subscription account rule\\r\\n\\r\\n**Correct Answer**: b. Create an Azure policy\\r\\n\\r\\n14. Your company wants to ensure that only cost-effective virtual machine SKU sizes are deployed. What should you do? (1 Point)\\r\\n\\r\\na. Periodically inspect the deployment to see which SKU sizes are used\\r\\nb. Create an Azure RBAC role that defines the allowed virtual machine SKU sizes\\r\\nc. Create a policy in Azure Policy that specifies the allowed SKU sizes\\r\\n\\r\\n**Correct Answer**: c. Create a policy in Azure Policy that specifies the allowed SKU sizes\\r\\n\\r\\n15. Which of the following can be used to manage governance across multiple Azure subscriptions? (1 Point)\\r\\n\\r\\na. Azure initiatives\\r\\nb. Resource groups\\r\\nc. Management groups\\r\\n\\r\\n**Correct Answer**: c. Management groups\\r\\n\\r\\n16. Your company hires a new IT administrator. She needs to manage a resource group with first-tier web servers including assigning permissions. However, she should not have access to other resource groups inside the subscription. You need to configure role-based access. What should you do? (1 Point)\\r\\n\\r\\na. Assign her as a Subscription Contributor.\\r\\nb. Assign her as a Resource Group Owner.\\r\\nc. Assign her as a Resource Group Contributor.\\r\\n\\r\\n**Correct Answer**: c. Assign her as a Resource Group Contributor.\\r\\n\\r\\n17. You have three virtual machines (VM1, VM2, and VM3) in a resource group. The Helpdesk hires a new employee. The new employee must be able to modify the settings on VM3, but not on VM1 and VM2. Your solution must minimize administrative overhead. What should you do? (1 Point)\\r\\n\\r\\na. Assign the user to the Contributor role on the resource group\\r\\nb. Assign the user to the Contributor role on VM3.\\r\\nc. Move VM3 to a new resource group and assign the user to the Contributor role on VM3.\\r\\n\\r\\n**Correct Answer**: b. Assign the user to the Contributor role on VM3.\\r\\n\\r\\n18. Your company wants to allow some users to control the virtual machines in each environment. These users should be prevented from modifying networking and other resources in the same resource group or Azure subscription. What should you do? (1 Point)\\r\\n\\r\\na. Create a policy in Azure Policy that audits resource usage\\r\\nb. Split the environment into separate resource groups\\r\\nc. Create a role assignment through Azure RBAC\\r\\n\\r\\n**Correct Answer**: c. Create a role assignment through Azure RBAC\\r\\n\\r\\n19. Suppose a team member can\'t view resources in a resource group. Where would the administrator go to check the team member\'s access? (1 Point)\\r\\n\\r\\na. Check the team member\'s permissions by going to their Azure profile > My permissions\\r\\nb. Go to the resource group and select Access control (IAM) > Role assignments.\\r\\nc. Go to one of the resources in the resource group and select Role assignments.\\r\\n\\r\\n**Correct Answer**: b. Go to the resource group and select Access control (IAM) > Role assignments.\\r\\n\\r\\n20. A user who had Owner access to a subscription is leaving the company. No one else has access to this subscription. How can you grant another employee access to this subscription? (1 Point)\\r\\n\\r\\na. Use the Azure portal to elevate your own access\\r\\nb. Ask the former employee for their password.\\r\\nc. Ask the former employee to sign in and select a different employee to grant their permissions to.\\r\\n\\r\\n**Correct Answer**: a. Use the Azure portal to elevate your own access\\r\\n\\r\\n21. Which of the following is not true about the Cloud Shell? (1 Point)\\r\\n\\r\\na. Authenticates automatically for instant access to your resources.\\r\\nb. Cloud Shell is assigned multiple machines per user account.\\r\\nc. Provides both Bash and PowerShell sessions.\\r\\n\\r\\n**Correct Answer**: b. Cloud Shell is assigned multiple machines per user account.\\r\\n\\r\\n22. You are managing Azure locally using PowerShell. You have launched the app as an Administrator. Which of the following commands would you do first? (1 Point)\\r\\n\\r\\na. Connect-AzAccount\\r\\nb. Get-AzResourceGroup\\r\\nc. Get-AzSubscription\\r\\n\\r\\n**Correct Answer**: a. Connect-AzAccount\\r\\n\\r\\n23. Suppose you are building a video-editing application that will offer online storage for user-generated video content. You will store the videos in Azure Blobs, so you need to create an Azure storage account to contain the blobs. Once the storage account is in place, it is unlikely you would remove and recreate it because this would delete all the user videos. Which tool is likely to offer the quickest and easiest way to create the storage account? (1 Point)\\r\\n\\r\\na. Azure portal\\r\\nb. Azure CLI\\r\\nc. Azure PowerShell\\r\\n\\r\\n**Correct Answer**: a. Azure portal\\r\\n\\r\\n24. You have a new Azure subscription and need to move resources to that subscription. Which of the following resources cannot be moved? (1 Point)\\r\\n\\r\\na. Key vault\\r\\nb. Storage account\\r\\nc. Tenant\\r\\n\\r\\n**Correct Answer**: c. Tenant\\r\\n\\r\\n25. You are reviewing your virtual machine usage. You notice that you have reached the limit for virtual machines in the US East region. Which of the following provides the easiest solution? (1 Point)\\r\\n\\r\\na. Add another resource group\\r\\nb. Change your subscription plan\\r\\nc. Request support increase your limit\\r\\n\\r\\n**Correct Answer**: c. Request support increase your limit\\r\\n\\r\\n26. Which of the following would be a good example of when to use a resource lock? (1 Point)\\r\\n\\r\\na. A ExpressRoute circuit with connectivity back to your on-premises network.\\r\\nb. A non-production virtual machine used to test occasional application builds.\\r\\nc. A storage account used to temporarily store images processed in a development environment\\r\\n\\r\\n**Correct Answer**: a. A ExpressRoute circuit with connectivity back to your on-premises network.\\r\\n\\r\\n27. Your manager asks you to explain how Azure uses resource groups. You provide all of the following information, except? (1 Point)\\r\\n\\r\\na. Resources can be in only one resource group.\\r\\nb. Resources can be moved from one resource group to another resource group.\\r\\nc. Resource groups can be nested.\\r\\n\\r\\n**Correct Answer**: c. Resource groups can be nested.\\r\\n\\r\\n28. Which of the following best describes the format of an Azure Resource Manager template? (1 Point)\\r\\n\\r\\na. A JSON document with key-value pairs\\r\\nb. A TXT document with key-value pairs\\r\\nc. An XML document with element-value pairs\\r\\n\\r\\n**Correct Answer**: a. A JSON document with key-value pairs\\r\\n\\r\\n29. Azure Resource Manager templates are idempotent. This means that if you run a template with no changes a second time ... (1 Point)\\r\\n\\r\\na. Azure Resource Manager will deploy new resources as copies of the previously deployed resources.\\r\\nb. Azure Resource Manager won\'t make any changes to the deployed resources.\\r\\nc. Azure Resource Manager will delete the previously deployed resources and redeploy them.\\r\\n\\r\\n**Correct Answer**: b. Azure Resource Manager won\'t make any changes to the deployed resources.\\r\\n\\r\\n30. You are planning your Azure network implementation to support your company\'s migration to Azure. Your first task is to prepare for the deployment of the first set of VMs. For these machines, consumers on the internet must be able to communicate directly with the web application on the VMs. Also, the IP configuration must be zone redundant. You should minimize costs, whenever possible, while still meeting the requirements. What should you do? (1 Point)\\r\\n\\r\\na. Create a standard public IP address. During the creation of the first VM, associate the public IP address with the VM\'s NIC.\\r\\nb. Create a standard public IP address. After the first VM is created, remove the private IP address and assign the public IP address to the NIC.\\r\\nc. Create a basic public IP address. During the creation of the first VM, associate the public IP address with the VM.\\r\\n\\r\\n**Correct Answer**: a. Create a standard public IP address. During the creation of the first VM, associate the public IP address with the VM\'s NIC.\\r\\n\\r\\n31. You have a VM with two NICs named NIC1 and NIC2. NIC1 is connected to the 10.10.8.0/24 subnet. NIC2 is connected to the 10.20.8.0/24 subnet. You plan enable direct communication from the internet to TCP port 443. You would like to maintain existing communication across the 10.10.8.0/24 and 10.20.8.0/24 subnets. To support the new functionality and keep things simple. What should you do? (1 Point)\\r\\n\\r\\na. Remove the private IP address from NIC2 and then assign a public IP address to it. Then, create an inbound security rule.\\r\\nb. Associate a public IP address to NIC2 and create an inbound security rule.\\r\\nc. Create an inbound security rule for TCP port 443.\\r\\n\\r\\n**Correct Answer**: b. Associate a public IP address to NIC2 and create an inbound security rule."},{"id":"/2024/3/28/reactjs-note","metadata":{"permalink":"/2024/3/28/reactjs-note","editUrl":"https://github.com/nhonvo/nhonvo.github.io/edit/main/blog/blog/2024-3-28-reactjs-note.md","source":"@site/blog/2024-3-28-reactjs-note.md","title":"Reactjs basic note","description":"useState and useEffect","date":"2024-03-28T00:00:00.000Z","formattedDate":"March 28, 2024","tags":[{"label":"react","permalink":"/tags/react"}],"readingTime":5.025,"hasTruncateMarker":true,"authors":[{"name":"Truong Nhon"}],"frontMatter":{"layout":"post","title":"Reactjs basic note","subtitle":"","date":"2024-03-28T00:00:00.000Z","author":"Truong Nhon","published":true,"catalog":true,"tags":["react"]},"prevItem":{"title":"Azure Cloud","permalink":"/2024/4/13/azure-cloud"},"nextItem":{"title":"net 8 and c# 12 big change","permalink":"/2024/4/12/net-8"}},"content":"\x3c!--truncate--\x3e\\r\\n\\r\\n\\r\\n## useState and useEffect\\r\\n\\r\\n`useState` and `useEffect` are both hooks used in React, a JavaScript library for building user interfaces.\\r\\n\\r\\n`useState` is a hook that allows you to add state to a functional component. State is a way of storing and managing data within a component. With `useState`, you can declare a state variable and a function to update that variable. Every time the state variable is updated, React will re-render the component and update the UI.\\r\\n\\r\\n```js\\r\\nimport React, { useState } from \'react\';\\r\\n\\r\\nfunction Counter() {\\r\\n  const [count, setCount] = useState(0);\\r\\n\\r\\n  const incrementCount = () => {\\r\\n    setCount(count + 1);\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <div>\\r\\n      <p>Count: {count}</p>\\r\\n      <button onClick={incrementCount}>Increment</button>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n```\\r\\n\\r\\n`useEffect` is a hook used for side effects in React. Side effects are actions that happen outside of the normal flow of the component, such as fetching data, subscriptions, or manually manipulating the DOM. `useEffect` allows you to perform these side effects after the component has rendered.\\r\\n\\r\\n```js\\r\\nimport React, { useState, useEffect } from \'react\';\\r\\n\\r\\nfunction Example() {\\r\\n  const [count, setCount] = useState(0);\\r\\n\\r\\n  useEffect(() => {\\r\\n    document.title = `Count: ${count}`;\\r\\n  }, [count]);\\r\\n\\r\\n  return (\\r\\n    <div>\\r\\n      <p>Count: {count}</p>\\r\\n      <button onClick={() => setCount(count + 1)}>Increment</button>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n```\\r\\n\\r\\n## class and interface\\r\\n\\r\\n`class` create object with attribute and method. They facilitate code organization, encapsulation, and reusability through inheritance and polymorphism.\\r\\n\\r\\n```tsx\\r\\nclass Car {\\r\\n  brand: string;\\r\\n  constructor(brand: string) {\\r\\n    this.brand = brand;\\r\\n  }\\r\\n  accelerate(speed: number) {\\r\\n    console.log(`${this.brand} is accelerating at ${speed} km/h.`);\\r\\n  }\\r\\n}\\r\\n\\r\\nconst myCar = new Car(\'Toyota\');\\r\\nmyCar.accelerate(100);\\r\\n```\\r\\n\\r\\n`inteface` Interfaces in TypeScript define contracts for objects, specifying the structure of their properties and methods without providing implementation details.\\r\\n\\r\\n```ts\\r\\ninterface Animal {\\r\\n  name: string;\\r\\n  makeSound(): void;\\r\\n}\\r\\n\\r\\nclass Dog implements Animal {\\r\\n  name: string;\\r\\n  constructor(name: string) {\\r\\n    this.name = name;\\r\\n  }\\r\\n  makeSound() {\\r\\n    console.log(`${this.name} barks.`);\\r\\n  }\\r\\n}\\r\\n\\r\\nconst myDog = new Dog(\'Buddy\');\\r\\nmyDog.makeSound();\\r\\n```\\r\\n\\r\\n## useStore() and mobx\\r\\n\\r\\n**`store`** is where all the state of the application is stored. It contains important data and provides methods to change and access this data\\r\\n\\r\\n`MobX` is a state management library for JavaScript applications. It simplifies state management by using the observer pattern and automatically tracking state changes to update the user interface.\\r\\n\\r\\n```tsx\\r\\nimport { makeAutoObservable } from \'mobx\';\\r\\n\\r\\n// Define a store\\r\\nclass CounterStore {\\r\\n    count = 0;\\r\\n\\r\\n    constructor() {\\r\\n        makeAutoObservable(this); // Automatically generate state management functions\\r\\n    }\\r\\n\\r\\n    increment() {\\r\\n        this.count++;\\r\\n    }\\r\\n\\r\\n    decrement() {\\r\\n        this.count--;\\r\\n    }\\r\\n}\\r\\n\\r\\n// Create an object from the CounterStore class\\r\\nconst counter = new CounterStore();\\r\\n\\r\\n// Perform operations on the state\\r\\ncounter.increment();\\r\\ncounter.decrement();\\r\\n```\\r\\n\\r\\n## Redux\\r\\n\\r\\nRedux is a predictable state container for JavaScript apps. It helps in managing the state of your application in a predictable way, which is especially useful for larger applications with complex state management\\r\\n\\r\\n![redux](https://media.geeksforgeeks.org/wp-content/uploads/20210706235837/reactreduxx.png)\\r\\n\\r\\n### Store\\r\\n\\r\\n- The Store holds the global state of the application.\\r\\n- It allows access to the state via `getState()`.\\r\\n- State can be updated using `dispatch(action)`.\\r\\n- You can subscribe to changes using `subscribe(listener)`.\\r\\n\\r\\n```typescript\\r\\nimport { createStore } from \'redux\';\\r\\nimport rootReducer from \'./reducers\'; // Your root reducer\\r\\n\\r\\nconst store = createStore(rootReducer);\\r\\n```\\r\\n\\r\\n### Actions\\r\\n\\r\\n- Actions are plain JavaScript objects that represent what happened.\\r\\n- They are dispatched to update the state.\\r\\n- Actions typically have a `type` property that describes the action being performed.\\r\\n- They can optionally carry additional data in the `payload`.\\r\\n\\r\\n```typescript\\r\\nconst incrementCounter = () => ({\\r\\n  type: \'INCREMENT_COUNTER\'\\r\\n});\\r\\n\\r\\nconst decrementCounter = () => ({\\r\\n  type: \'DECREMENT_COUNTER\'\\r\\n});\\r\\n```\\r\\n\\r\\n### Reducers\\r\\n\\r\\n- Reducers are pure functions that specify how the application\'s state changes in response to actions.\\r\\n- They take the current state and an action, and return a new state.\\r\\n- They should not mutate the state, but return a new state object.\\r\\n\\r\\n```typescript\\r\\nconst initialState = {\\r\\n  counter: 0\\r\\n};\\r\\n\\r\\nconst counterReducer = (state = initialState, action) => {\\r\\n  switch (action.type) {\\r\\n    case \'INCREMENT_COUNTER\':\\r\\n      return { ...state, counter: state.counter + 1 };\\r\\n    case \'DECREMENT_COUNTER\':\\r\\n      return { ...state, counter: state.counter - 1 };\\r\\n    default:\\r\\n      return state;\\r\\n  }\\r\\n};\\r\\n\\r\\nexport default counterReducer;\\r\\n```\\r\\n\\r\\n## TypeScript Basics\\r\\n\\r\\n### Variables and Data Types\\r\\n\\r\\n```typescript\\r\\nlet num: number = 10;\\r\\nlet str: string = \\"Hello, TypeScript!\\";\\r\\nlet bool: boolean = true;\\r\\nlet arr: number[] = [1, 2, 3];\\r\\nlet obj: { name: string, age: number } = { name: \\"John\\", age: 30 };\\r\\nlet func: (x: number, y: number) => number = (x, y) => x + y;\\r\\n```\\r\\n\\r\\n### Functions and Arrow Functions\\r\\n\\r\\n```typescript\\r\\nfunction add(x: number, y: number): number {\\r\\n    return x + y;\\r\\n}\\r\\n\\r\\nconst multiply = (x: number, y: number): number => x * y;\\r\\n```\\r\\n\\r\\n### Interfaces and Types\\r\\n\\r\\n```typescript\\r\\ninterface Person {\\r\\n    name: string;\\r\\n    age: number;\\r\\n}\\r\\n\\r\\ntype Point = {\\r\\n    x: number;\\r\\n    y: number;\\r\\n}\\r\\n```\\r\\n\\r\\n### Arrays and Tuples\\r\\n\\r\\n```typescript\\r\\nlet numbers: number[] = [1, 2, 3];\\r\\nlet tuple: [string, number] = [\\"apple\\", 10];\\r\\n```\\r\\n\\r\\n### Classes and Inheritance\\r\\n\\r\\n```typescript\\r\\nclass Animal {\\r\\n    constructor(public name: string) {}\\r\\n\\r\\n    makeSound(): void {\\r\\n        console.log(\\"Some sound\\");\\r\\n    }\\r\\n}\\r\\n\\r\\nclass Dog extends Animal {\\r\\n    constructor(name: string, public breed: string) {\\r\\n        super(name);\\r\\n    }\\r\\n\\r\\n    makeSound(): void {\\r\\n        console.log(\\"Woof!\\");\\r\\n    }\\r\\n}\\r\\n\\r\\nconst dog = new Dog(\\"Buddy\\", \\"Labrador\\");\\r\\ndog.makeSound(); // Output: Woof!\\r\\n```\\r\\n\\r\\n### Advanced TypeScript Concepts\\r\\n\\r\\n### Generics\\r\\n\\r\\n```typescript\\r\\nfunction identity<T>(arg: T): T {\\r\\n    return arg;\\r\\n}\\r\\n\\r\\nconst result = identity<string>(\\"Hello\\");\\r\\n```\\r\\n\\r\\n### Enums\\r\\n\\r\\n```typescript\\r\\nenum Direction {\\r\\n    Up,\\r\\n    Down,\\r\\n    Left,\\r\\n    Right,\\r\\n}\\r\\n\\r\\nconst move = (direction: Direction) => {\\r\\n    switch (direction) {\\r\\n        case Direction.Up:\\r\\n            console.log(\\"Moving Up\\");\\r\\n            break;\\r\\n        case Direction.Down:\\r\\n            console.log(\\"Moving Down\\");\\r\\n            break;\\r\\n        case Direction.Left:\\r\\n            console.log(\\"Moving Left\\");\\r\\n            break;\\r\\n        case Direction.Right:\\r\\n            console.log(\\"Moving Right\\");\\r\\n            break;\\r\\n        default:\\r\\n            console.log(\\"Unknown direction\\");\\r\\n    }\\r\\n};\\r\\n\\r\\nmove(Direction.Left);\\r\\n```\\r\\n\\r\\n### Type Assertions\\r\\n\\r\\n```typescript\\r\\nlet someValue: any = \\"this is a string\\";\\r\\nlet strLength: number = (someValue as string).length;\\r\\n```\\r\\n\\r\\n### Type Inference\\r\\n\\r\\n```typescript\\r\\nlet num = 10; // TypeScript infers \'number\' type\\r\\n```\\r\\n\\r\\n### Decorators\\r\\n\\r\\n```typescript\\r\\nfunction Log(target: any, key: string) {\\r\\n    console.log(`${key} was called`);\\r\\n}\\r\\n\\r\\nclass Calculator {\\r\\n    @Log\\r\\n    add(x: number, y: number): number {\\r\\n        return x + y;\\r\\n    }\\r\\n}\\r\\n\\r\\nconst calc = new Calculator();\\r\\ncalc.add(2, 3); // Output: add was called\\r\\n```"},{"id":"/2024/4/12/net-8","metadata":{"permalink":"/2024/4/12/net-8","editUrl":"https://github.com/nhonvo/nhonvo.github.io/edit/main/blog/blog/2024-4-12-net-8.md","source":"@site/blog/2024-4-12-net-8.md","title":"net 8 and c# 12 big change","description":"Net8","date":"2024-03-28T00:00:00.000Z","formattedDate":"March 28, 2024","tags":[{"label":"c#","permalink":"/tags/c"}],"readingTime":5.185,"hasTruncateMarker":true,"authors":[{"name":"Truong Nhon"}],"frontMatter":{"layout":"post","title":"net 8 and c# 12 big change","subtitle":"","date":"2024-03-28T00:00:00.000Z","author":"Truong Nhon","published":true,"catalog":true,"tags":["c#"]},"prevItem":{"title":"Reactjs basic note","permalink":"/2024/3/28/reactjs-note"},"nextItem":{"title":"Mongo with csharp","permalink":"/2024/3/1/mongo-with-csharp"}},"content":"\x3c!--truncate--\x3e\\r\\n\\r\\n\\r\\n## Net8\\r\\n\\r\\n. NET 8, was released on **November 14, 2023**, along with C# 12 and Visual Studio 17.8. .NET 8 will be supported for three years as a long-term support (LTS) release. You can [download .NET 8 here](https://dotnet.microsoft.com/download/dotnet).\\r\\n\\r\\nThe .NET 8 runtime includes improvements to performance, garbage collection, and the core and extension libraries.\\r\\n\\r\\n- Some update summaries:\\r\\n\\r\\n  - The .NET 8 runtime includes improvements to performance, garbage collection, and the core and extension libraries.\\r\\n\\r\\n  - ASP.NET Core includes improvements to Blazor, SignalR, minimal APIs, Native AOT, Kestrel and HTTP.sys servers, and authentication and authorization.\\r\\n\\r\\n  - .NET MAUI includes new functionality for controls, gesture recognizers, Windows apps, navigation, and platform integration.\\r\\n\\r\\n  - Entity Framework Core includes improvements to complex type objects, collections of primitive types, JSON column mapping, raw SQL queries, lazy loading, tracked-entity access, model building, math translations, and other features.\\r\\n\\r\\n  - Windows Forms includes improvements to data binding, Visual Studio DPI, and high DPI.\\r\\n\\r\\n  - Windows Presentation Foundation (WPF) adds the ability to use hardware acceleration and a new OpenFolderDialog control.\\r\\n\\r\\n---\\r\\n\\r\\n## C# 12\\r\\n\\r\\nC# 12 is supported on **.NET 8**. C# 12 includes the following new features.  \\r\\n\\r\\n- [Primary constructors](https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-12#primary-constructors) - Introduced in Visual Studio 2022 version 17.6 Preview 2.\\r\\n\\r\\nPrimary constructors provide a concise syntax for initializing properties in C# classes. They allow you to declare and initialize properties directly in the constructor parameter list, reducing boilerplate code.\\r\\n\\r\\n```c#\\r\\npublic class Person(string _name)\\r\\n{\\r\\n public string Name = _name;\\r\\n}\\r\\nPerson person = new Person(\\"John\\");\\r\\nConsole.WriteLine(person.Name); // Output: John\\r\\n```\\r\\n\\r\\n- old style:\\r\\n\\r\\n```csharp\\r\\npublic class Person\\r\\n{\\r\\n    public string Name { get; }\\r\\n    public int Age { get; }\\r\\n\\r\\n    public Person(string name, int age)\\r\\n    {\\r\\n        Name = name;\\r\\n        Age = age;\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n- [Collection expressions](https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-12#collection-expressions) - Introduced in Visual Studio 2022 version 17.7 Preview 5.\\r\\n\\r\\nCollection expressions introduce a new terse syntax to create common collection values. Inlining other collections into these values is possible using a spread operator `..`.\\r\\n\\r\\nThe following examples show uses of collection expressions:\\r\\n\\r\\n```c#\\r\\n// Create an array:\\r\\nint[] a = [1, 2, 3, 4, 5, 6, 7, 8];\\r\\n\\r\\n// Create a list:\\r\\nList<string> b = [\\"one\\", \\"two\\", \\"three\\"];\\r\\n\\r\\n// Create a span\\r\\nSpan<char> c  = [\'a\', \'b\', \'c\', \'d\', \'e\', \'f\', \'h\', \'i\'];\\r\\n\\r\\n// Create a jagged 2D array:\\r\\nint[][] twoD = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\\r\\n\\r\\n// Create a jagged 2D array from variables:\\r\\nint[] row0 = [1, 2, 3];\\r\\nint[] row1 = [4, 5, 6];\\r\\nint[] row2 = [7, 8, 9];\\r\\nint[][] twoDFromVariables = [row0, row1, row2];\\r\\n```\\r\\n\\r\\nThe *spread operator*, `..` in a collection expression replaces its argument with the elements from that collection. The argument must be a collection type. The following examples show how the spread operator works:\\r\\n\\r\\n```c#\\r\\nint[] row0 = [1, 2, 3];\\r\\nint[] row1 = [4, 5, 6];\\r\\nint[] row2 = [7, 8, 9];\\r\\nint[] single = [.. row0, .. row1, .. row2];\\r\\nforeach (var element in single)\\r\\n{\\r\\n    Console.Write($\\"{element}, \\");\\r\\n}\\r\\n// output:\\r\\n// 1, 2, 3, 4, 5, 6, 7, 8, 9,\\r\\n```\\r\\n\\r\\n- [Inline arrays](https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-12#inline-arrays) - Introduced in Visual Studio 2022 version 17.7 Preview 3.\\r\\n\\r\\nInline arrays enable a developer to create an array of fixed size in a `struct` type\\r\\n\\r\\nAn *inline array* is declared similar to the following `struct`:\\r\\n\\r\\n```csharp\\r\\n[System.Runtime.CompilerServices.InlineArray(10)]\\r\\npublic struct Buffer\\r\\n{\\r\\n    private int _element0;\\r\\n}\\r\\n```\\r\\n\\r\\nYou use them like any other array:\\r\\n\\r\\n```csharp\\r\\nvar buffer = new Buffer();\\r\\nfor (int i = 0; i < 10; i++)\\r\\n{\\r\\n    buffer[i] = i;\\r\\n}\\r\\n\\r\\nforeach (var i in buffer)\\r\\n{\\r\\n    Console.WriteLine(i);\\r\\n}\\r\\n```\\r\\n\\r\\n- [Optional parameters in lambda expressions](https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-12#default-lambda-parameters) - Introduced in Visual Studio 2022 version 17.5 Preview 2.\\r\\n\\r\\nYou can now define default values for parameters on lambda expressions. The syntax and rules are the same as adding default values for arguments to any method or local function.\\r\\n\\r\\n```c#\\r\\n// Define a lambda expression with default parameters\\r\\nFunc<int, int, int> add = (x, y = 0) => x + y;\\r\\n\\r\\n// Call the lambda expression with one argument\\r\\nint result1 = add(5);\\r\\nConsole.WriteLine(\\"Result1: \\" + result1); // Output: 5\\r\\n\\r\\n// Call the lambda expression with two arguments\\r\\nint result2 = add(5, 3);\\r\\nConsole.WriteLine(\\"Result2: \\" + result2); // Output: 8\\r\\n\\r\\n```\\r\\n\\r\\n- [`ref readonly` parameters](https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-12#ref-readonly-parameters) - Introduced in Visual Studio 2022 version 17.8 Preview 2.\\r\\n\\r\\npass parameters by reference while ensuring that the referenced value cannot be modified within the method. `ref readonly` parameters enables more clarity for APIs\\r\\n\\r\\n```\\r\\nint[] numbers = { 1, 2, 3, 4, 5 };\\r\\nint sum = Plus(numbers);\\r\\nConsole.WriteLine(\\"Sum: \\" + sum); \\r\\n\\r\\npublic static int Plus(ref readonly int[] arr)\\r\\n{\\r\\n    int sum = 0;\\r\\n    foreach (int num in arr)\\r\\n    {\\r\\n        sum += num;\\r\\n    }\\r\\n    return sum;\\r\\n}\\r\\n```\\r\\n\\r\\n- [Alias any type](https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-12#alias-any-type) - Introduced in Visual Studio 2022 version 17.6 Preview 3.\\r\\n\\r\\nuse the using alias directive to alias any type, not just named types. That means you can create semantic aliases for tuple types, array types, pointer types, or other unsafe types.\\r\\n\\r\\n```c#\\r\\nPair pair = (1, \\"apple\\");\\r\\nint number = pair.Item1;\\r\\nstring fruit = pair.Item2;\\r\\nConsole.WriteLine($\\"Number: {number}, Fruit: {fruit}\\"); \\r\\n\\r\\n// using alias with tuple types:\\r\\nusing Pair = (int, string);\\r\\n```\\r\\n\\r\\n- [Experimental attribute](https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-12#experimental-attribute) - Introduced in Visual Studio 2022 version 17.7 Preview 3.\\r\\n\\r\\nThe `System.Diagnostics.CodeAnalysis.ExperimentalAttribute` allows developers to mark types, methods, or assemblies as experimental features. This attribute serves as a way to communicate to other developers that the **marked feature is still under development or testing**, and its API or behavior may change in future releases.\\r\\n\\r\\n```c#\\r\\n[Experimental(\\"Experimental feature: FeatureName\\")]\\r\\npublic static void ExperimentalMethod()\\r\\n{\\r\\n  // Experimental feature implementation\\r\\n}\\r\\n\\r\\npublic static void Main()\\r\\n{\\r\\n  // Call the experimental method\\r\\n  ExperimentalMethod();\\r\\n}\\r\\n```\\r\\n\\r\\n- [Interceptors](https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-12#interceptors) - *Preview feature* Introduced in Visual Studio 2022 version 17.7 Preview 3.\\r\\n\\r\\nInterceptors are an experimental feature, available in **preview mode** with C# 12.\\r\\n\\r\\n## Risk upgrading from .net6 to .net 8\\r\\n\\r\\n- Compatibility: third-party libraries Some libraries or packages may not yet support the latest version,\\r\\n- development team may need time to familiarize themselves with the new features and changes introduced in .NET 8\\r\\n- update code, refactor components, and test thoroughly to ensure everything works as expected.\\r\\n- current version **ready proxy** c#12"},{"id":"/2024/3/1/mongo-with-csharp","metadata":{"permalink":"/2024/3/1/mongo-with-csharp","editUrl":"https://github.com/nhonvo/nhonvo.github.io/edit/main/blog/blog/2024-3-1-mongo-with-csharp.md","source":"@site/blog/2024-3-1-mongo-with-csharp.md","title":"Mongo with csharp","description":"Working with MongoDB Documents in Csharp","date":"2024-03-01T00:00:00.000Z","formattedDate":"March 1, 2024","tags":[{"label":"mongodb","permalink":"/tags/mongodb"},{"label":"c#","permalink":"/tags/c"}],"readingTime":10.52,"hasTruncateMarker":true,"authors":[{"name":"Truong Nhon"}],"frontMatter":{"layout":"post","title":"Mongo with csharp","subtitle":"Associate developer MongoDB csharp certificate exam","date":"2024-03-01T00:00:00.000Z","author":"Truong Nhon","published":true,"catalog":true,"tags":["mongodb","c#"]},"prevItem":{"title":"net 8 and c# 12 big change","permalink":"/2024/4/12/net-8"},"nextItem":{"title":"Data structure and algorithms","permalink":"/2024/2/28/data-structure-and-algorithms"}},"content":"\x3c!--truncate--\x3e\\r\\n\\r\\n\\r\\n## Working with MongoDB Documents in Csharp\\r\\n\\r\\nReview the following code, which demonstrates how to represent a document in Csharp.\\r\\n\\r\\n### BsonDocument\\r\\n\\r\\nUse `MongoDB.Bson` to represent a document with `BsonDocument`. Here\'s an example:\\r\\n\\r\\n```csharp\\r\\nusing MongoDB.Bson;\\r\\n\\r\\nvar document = new BsonDocument\\r\\n{\\r\\n   { \\"account_id\\", \\"MDB829001337\\" },\\r\\n   { \\"account_holder\\", \\"Linus Torvalds\\" },\\r\\n   { \\"account_type\\", \\"checking\\" },\\r\\n   { \\"balance\\", 50352434 }\\r\\n};\\r\\n```\\r\\n\\r\\n### Csharp Class (POCOs)\\r\\n\\r\\nEach public property maps to a field in the BSON document.\\r\\n\\r\\n- The `BsonId` attribute specifies a field that must always be unique.\\r\\n- The `BsonRepresentation` attribute maps a Csharp type to a specific BSON type.\\r\\n- The `BsonElement` attribute maps to the BSON field name.\\r\\n\\r\\nHere\'s an example:\\r\\n\\r\\n```csharp\\r\\ninternal class Account\\r\\n{\\r\\n   [BsonId]\\r\\n   [BsonRepresentation(MongoDB.Bson.BsonType.ObjectId)]     \\r\\n   public string Id { get; set; }\\r\\n     \\r\\n   [BsonElement(\\"account_id\\")]\\r\\n   public string AccountId { get; set; }\\r\\n\\r\\n   [BsonElement(\\"account_holder\\")]\\r\\n   public string AccountHolder { get; set; }\\r\\n\\r\\n   [BsonElement(\\"account_type\\")]\\r\\n   public string AccountType { get; set; } \\r\\n\\r\\n   [BsonRepresentation(BsonType.Decimal128)]\\r\\n   [BsonElement(\\"balance\\")]\\r\\n   public decimal Balance { get; set; }\\r\\n\\r\\n   [BsonElement(\\"transfers_complete\\")]\\r\\n   public string[] TransfersCompleted { get; set; }    \\r\\n}\\r\\n```\\r\\n\\r\\n---\\r\\n\\r\\n## Using MongoDB Aggregation Stages with Csharp: `Match` and `Group`\\r\\n\\r\\nReview the following code, which demonstrates how to use the `Match` and `Group` aggregation methods in MongoDB.\\r\\n\\r\\n### Match by Using Csharp Class\\r\\n\\r\\n`Match` filters documents that match the specified conditions and passes them to the next stage of the pipeline. In following code, we request all documents where the `Balance` field has a value that\'s less than or equal to 1000. We can view the results by casting the `aggregate` object to a list.\\r\\n\\r\\n```csharp\\r\\nvar matchStage = Builders<Accounts>.Filter.Lte(u => u.Balance, 1000);\\r\\nvar aggregate = accountsCollection.Aggregate()\\r\\n                          .Match(matchStage);\\r\\nvar results = aggregate.ToList();\\r\\n\\r\\nforeach (var account in results)\\r\\n{\\r\\n    Console.WriteLine(account.Balance);\\r\\n}\\r\\n```\\r\\n\\r\\n### Match by Using `BsonDocument`\\r\\n\\r\\n`Match` filters documents that match the specified conditions to the next stage of the pipeline. When you\'re working with BsonDocuments, the process is identical, except that we use a builder of type `BsonDocument`. Also, we can\u2019t use LINQ to define the properties that we want to filter on. Here\'s an example:\\r\\n\\r\\n```csharp\\r\\nvar matchStage = Builders<BsonDocument>.Filter.Lte(\\"balance\\", 1000);\\r\\nvar aggregate = accountsCollection.Aggregate()\\r\\n                          .Match(matchStage);\\r\\nvar results = aggregate.ToList();\\r\\n\\r\\nforeach (var account in results)\\r\\n{\\r\\n    Console.WriteLine(account.Balance);\\r\\n}\\r\\n```\\r\\n\\r\\n### `Group` Stage\\r\\n\\r\\nThe `Group` stage separates documents into groups according to a group key. The output of this stage is one document for each unique group key. In the following code, we use a LINQ expression and create a new generic object with the fields we want. We keep the same names for the first three properties: `AccountId`, `AccountType`, and `Balance`. We also create a new field called `GBP`, which is calculated by dividing the current `Balance` field by 1.3.\\r\\n\\r\\n```csharp\\r\\nvar matchStage = Builders<BsonDocument>.Filter.Lte(\\"balance\\", 1000);\\r\\nvar aggregate = accountCollection.Aggregate()\\r\\n   .Match(matchStage)\\r\\n   .Group(\\r\\n       a => a.AccountType,\\r\\n       r => new\\r\\n       {\\r\\n           accountType = r.Key,\\r\\n           total = r.Sum(a => 1)\\r\\n       }\\r\\n   );\\r\\n\\r\\nvar results = aggregate.ToList();\\r\\n\\r\\nforeach (var account in results)\\r\\n{\\r\\n    Console.WriteLine(account.Balance);\\r\\n}\\r\\n```\\r\\n\\r\\n---\\r\\n\\r\\n## Querying a MongoDB Collection in Csharp Applications\\r\\n\\r\\nReview the following code, which demonstrates how to query documents in MongoDB with Csharp.\\r\\n\\r\\n### Find a Document with `FirstOrDefault`\\r\\n\\r\\nIn the following example, the `Find()` command with a LINQ expression matches the `AccountID` field. The `FirstOrDefault()` method returns the first or default result.\\r\\n\\r\\n```csharp\\r\\nvar account = accountsCollection\\r\\n   .Find(a => a.AccountId == \\"MDB829001337\\")\\r\\n   .FirstOrDefault();\\r\\n```\\r\\n\\r\\n### Find a Document with `FindAsync` and `FirstOrDefault`\\r\\n\\r\\nThe `FindAsync()` command with a LINQ expression matches the `AccountID` field. The `FirstOrDefault()` method returns the first or default result. For example:\\r\\n\\r\\n```csharp\\r\\nvar accounts = await accountsCollection\\r\\n   .FindAsync(a => a.AccountId == \\"MDB829001337\\");\\r\\n\\r\\nvar account = accounts.FirstOrDefault();\\r\\n```\\r\\n\\r\\n### Find a Document with `ToList`\\r\\n\\r\\nThe `Find()` command with a LINQ expression matches all documents in the collection. The `ToList()` method returns a list of results. For example:\\r\\n\\r\\n```csharp\\r\\nvar accounts = accountsCollection.Find(_ => true).ToList();\\r\\n```\\r\\n\\r\\n### Find a Document with Multiple LINQ Methods\\r\\n\\r\\nThe `Find()` command with a LINQ expression filters documents by `AccountType` (in this case, \u201cchecking\u201d), sorts the results in descending order by the `Balance`, skips the first 5 results, and returns only 20 documents due to the limit.\\r\\n\\r\\n```csharp\\r\\naccountsCollection\\r\\n   .Find(a => a.AccountType == \\"checking\\")\\r\\n   .SortByDescending(a => a.Balance)\\r\\n   .Skip(5)\\r\\n   .Limit(20);\\r\\n```\\r\\n\\r\\n### Find a Document with the `Builders` Class\\r\\n\\r\\nUse the `Builders` class to match all documents in the collection with an `_id` field equal to the specified value. For example:\\r\\n\\r\\n```csharp\\r\\nvar filter = Builders<BsonDocument>\\r\\n   .Filter\\r\\n   .Eq(\\"_id\\", new    \\r\\n      ObjectId(\\"62d6e04ecab6d8e1304974ae\\"));\\r\\n\\r\\nvar document = accountsCollection\\r\\n   .Find(filter)\\r\\n   .FirstOrDefault();\\r\\n```\\r\\n\\r\\nUse the `Builders` class to match all documents in the collection with a `balance` field greater than 1000. For example:\\r\\n\\r\\n```csharp\\r\\nvar filter = Builders<BsonDocument>\\r\\n   .Filter\\r\\n   .Gt(\\"balance\\", 1000);\\r\\n\\r\\nvar documents = await accountsCollection\\r\\n   .FindAsync(filter);\\r\\n```\\r\\n\\r\\n---\\r\\n\\r\\n#### Lesson 4: Updating Documents in Csharp Applications / Learn\\r\\n\\r\\n## Updating Documents in Csharp Applications\\r\\n\\r\\nReview the following code, which demonstrates how to update documents in MongoDB with Csharp.\\r\\n\\r\\n### Update a Single Document\\r\\n\\r\\nThe following example demonstrates how to update a single document. First, create a `filter` definition with the `.Filter` method on the `Builders` class, which returns the account with an `AccountId` equal to \u201cMDB951086017\u201d. Next, create an `update` definition that will set the `balance` to `5000`. Finally, use the `UpdateOne()` method to update the document.\\r\\n\\r\\n```csharp\\r\\nvar filter = Builders<Account>\\r\\n   .Filter\\r\\n   .Eq(a => a.AccountId, \\"MDB951086017\\");\\r\\n\\r\\nvar update = Builders<Account>\\r\\n   .Update\\r\\n   .Set(a=>a.Balance, 5000);\\r\\n\\r\\nvar result = accountCollection.UpdateOne(filter, update);\\r\\n\\r\\nConsole.WriteLine(result.ModifiedCount);\\r\\n```\\r\\n\\r\\n### Update a Single Document Asynchronously\\r\\n\\r\\nThe `UpdateOneAsync()` command updates a single document in the collection asynchronously. For example:\\r\\n\\r\\n```csharp\\r\\nvar result = await accountsCollection.UpdateOneAsync(filter, update);\\r\\n\\r\\nConsole.WriteLine(result.ModifiedCount);\\r\\n```\\r\\n\\r\\n### Update Multiple Documents\\r\\n\\r\\nUse the `UpdateMany()` method to update multiple documents in a single operation. Just like the `UpdateOne()` method, the `UpdateMany()` method accepts a query and an update. Here\'s an example:\\r\\n\\r\\n```csharp\\r\\nvar filter = Builders<Account>\\r\\n   .Filter\\r\\n   .Eq(a => a.AccountType, \\"checking\\");\\r\\n\\r\\nvar update = Builders<Account>\\r\\n   .Update\\r\\n   .Inc(a => a.Balance, 5);\\r\\n\\r\\nvar updateResult = accountCollection\\r\\n   .UpdateMany(filter, update);\\r\\n\\r\\nConsole.WriteLine(updateResult.ModifiedCount);\\r\\n```\\r\\n\\r\\n### Update Multiple Documents Asynchronously\\r\\n\\r\\nThe `UpdateManyAsync()` command updates multiple documents in the collection asynchronously. For example:\\r\\n\\r\\n```csharp\\r\\nvar filter = Builders<BsonDocument>\\r\\n   .Filter\\r\\n   .Lt(\\"balance\\", 500);\\r\\n\\r\\nvar update = Builders<BsonDocument>\\r\\n   .Update\\r\\n   .Inc(\\"balance\\", 10);\\r\\n\\r\\nvar result = await accountsCollection\\r\\n   .UpdateManyAsync(filter, update);\\r\\n\\r\\nConsole.WriteLine(result.ModifiedCount);\\r\\n```\\r\\n\\r\\n---\\r\\n\\r\\n## Deleting Documents in Csharp Applications\\r\\n\\r\\nReview the following code, which demonstrates how to delete documents in MongoDB with Csharp.\\r\\n\\r\\n### Delete a Single Document\\r\\n\\r\\nTo delete a single document, use the `DeleteOne()` method, which accepts a query filter that matches the document that you want to delete. `DeletedCount` tells you how many documents were found by the filter and were deleted. Here\'s an example:\\r\\n\\r\\n```csharp\\r\\nvar accountsCollection = \\r\\n  database.GetCollection<Account>(\\"Account\\");\\r\\n\\r\\nvar result  = accountsCollection\\r\\n   .DeleteOne(a => a.AccountId == \\"MDB333829449\\");\\r\\n\\r\\nConsole.WriteLine(result.DeletedCount);\\r\\n```\\r\\n\\r\\n### Delete a Single Document Asynchronously\\r\\n\\r\\nTo delete a single document asynchronously, use the `DeleteOneAsync()` method, which accepts a query filter that matches the document that you want to delete. We use a `Builders` class that matches a document based on the specified `_id`. Async methods can be used with builders or LINQ. Here\'s an example:\\r\\n\\r\\n```csharp\\r\\nvar filter = Builders<BsonDocument>\\r\\n   .Filter\\r\\n   .Eq(\\"_id\\", new    \\r\\n      ObjectId(\\"63050518546c1e9d2d16ce4d\\"));\\r\\n\\r\\nvar accounts = await accountsCollection\\r\\n   .DeleteOneAsync(filter);\\r\\n```\\r\\n\\r\\n### Delete Multiple Documents\\r\\n\\r\\nTo delete multiple documents, use the `DeleteMany()` method, which accepts a query filter that matches the documents that you want to delete. Once the documents are successfully deleted, the method returns an instance of `DeleteResult`, which enables the retrieval of information such as the number of documents that were deleted. For example:\\r\\n\\r\\n```csharp\\r\\nvar deleteResult = accountCollection\\r\\n   .DeleteMany(a => a.Balance < 500);\\r\\n\\r\\nConsole.WriteLine(result.DeleteCount)\\r\\n```\\r\\n\\r\\n### Delete Multiple Documents Asynchronously\\r\\n\\r\\nTo delete multiple documents asynchronously, use the `DeleteMany()` method, which accepts a query filter that matches the documents that you want to delete. Once the documents are successfully deleted, the method returns an instance of `DeleteResult`, which enables the retrieval of information such as the number of documents that were deleted. We use a `Builders` class that matches a document based on the specified `account_type`. Async methods can be used with builders or LINQ. For example:\\r\\n\\r\\n```csharp\\r\\nvar filter = Builders<BsonDocument>\\r\\n   .Filter\\r\\n   .Eq(\\"account_type\\", \\"checking\\");\\r\\n\\r\\nvar deleteResult = await accountsCollection\\r\\n   .DeleteManyAsync(filter);\\r\\n\\r\\nConsole.WriteLine(deleteResult.DeletedCount);\\r\\n```\\r\\n\\r\\n---\\r\\n\\r\\n## Creating MongoDB Transactions in Csharp Applications\\r\\n\\r\\nReview the following code, which demonstrates how to create a multi-document transaction in MongoDB with Csharp.\\r\\n\\r\\n### Multi-Document Transaction\\r\\n\\r\\nThe following are the steps and the code to create a multi-document transaction in MongoDB with Csharp. The transaction is started by using the session\u2019s `WithTransaction()` method. Then, we define the sequence of operations to perform inside the transaction. Here are the steps:\\r\\n\\r\\n1. Start a new session.\\r\\n2. Begin a transaction with the `WithTransaction()` method on the session.\\r\\n3. Create variables that will be used in the transaction.\\r\\n4. Obtain the user accounts information that will be used in the transaction.\\r\\n5. Create the transfer document.\\r\\n6. Update the user accounts.\\r\\n7. Insert the transfer document.\\r\\n8. Commit the transaction.\\r\\n\\r\\nHere\'s the code:\\r\\n\\r\\n```csharp\\r\\nusing (var session = client.StartSession())\\r\\n{\\r\\n\\r\\n    // Define the sequence of operations to perform inside the transactions\\r\\n    session.WithTransaction(\\r\\n        (s, ct) =>\\r\\n        {\\r\\n            var fromId = \\"MDB310054629\\";\\r\\n            var toId = \\"MDB546986470\\";\\r\\n\\r\\n            // Create the transfer_id and amount being transfered\\r\\n            var transferId = \\"TR02081994\\";\\r\\n            var transferAmount = 20;\\r\\n\\r\\n            // Obtain the account that the money will be coming from\\r\\n            var fromAccountResult = accountsCollection.Find(e => e.AccountId == fromId).FirstOrDefault();\\r\\n            // Get the balance and id of the account that the money will be coming from\\r\\n            var fromAccountBalance = fromAccountResult.Balance - transferAmount;\\r\\n            var fromAccountId = fromAccountResult.AccountId;\\r\\n\\r\\n            Console.WriteLine(fromAccountBalance.GetType());\\r\\n\\r\\n            // Obtain the account that the money will be going to\\r\\n            var toAccountResult = accountsCollection.Find(e => e.AccountId == toId).FirstOrDefault();\\r\\n            // Get the balance and id of the account that the money will be going to\\r\\n            var toAccountBalance = toAccountResult.Balance + transferAmount;\\r\\n            var toAccountId = toAccountResult.AccountId;\\r\\n\\r\\n            // Create the transfer record\\r\\n            var transferDocument = new Transfers\\r\\n            {\\r\\n                TransferId = transferId,\\r\\n                ToAccount = toAccountId,\\r\\n                FromAccount = fromAccountId,\\r\\n                Amount = transferAmount\\r\\n            };\\r\\n\\r\\n            // Update the balance and transfer array for each account\\r\\n            var fromAccountUpdateBalance = Builders<Accounts>.Update.Set(\\"balance\\", fromAccountBalance);\\r\\n            var fromAccountFilter = Builders<Accounts>.Filter.Eq(\\"account_id\\", fromId);\\r\\n            accountsCollection.UpdateOne(fromAccountFilter, fromAccountUpdateBalance);\\r\\n\\r\\n            var fromAccountUpdateTransfers = Builders<Accounts>.Update.Push(\\"transfers_complete\\", transferId);\\r\\n            accountsCollection.UpdateOne(fromAccountFilter, fromAccountUpdateTransfers);\\r\\n\\r\\n            var toAccountUpdateBalance = Builders<Accounts>.Update.Set(\\"balance\\", toAccountBalance);\\r\\n            var toAccountFilter = Builders<Accounts>.Filter.Eq(\\"account_id\\", toId);\\r\\n            accountsCollection.UpdateOne(toAccountFilter, toAccountUpdateBalance);\\r\\n            var toAccountUpdateTransfers = Builders<Accounts>.Update.Push(\\"transfers_complete\\", transferId);\\r\\n\\r\\n            // Insert transfer doc\\r\\n            transfersCollection.InsertOne(transferDocument);\\r\\n            Console.WriteLine(\\"Transaction complete!\\");\\r\\n            return \\"Inserted into collections in different databases\\";\\r\\n        });\\r\\n}\\r\\n```\\r\\n\\r\\n## Using MongoDB Aggregation Stages with Csharp: `Sort` and `Project`\\r\\n\\r\\nReview the following code, which demonstrates how to use the `Sort` and `Project` aggregation methods in MongoDB.\\r\\n\\r\\n### `Sort` Stage\\r\\n\\r\\nA `Sort` stage sorts all input documents and passes them to the next pipeline stage in the sorted order.This can be a numeric value, strings arranged in alphabetical order, dates, or timestamps. You can define the sort as a LINQ statement within the `.SortBy()` or `.SortByDescending()` methods. For example:\\r\\n\\r\\n```csharp\\r\\nvar matchStage = Builders<Accounts>.Filter.Lt(user => user.Balance, 1500);\\r\\n\\r\\nvar aggregate = accountsCollection.Aggregate()                        \\r\\n                    .Match(matchBalanceStage)\\r\\n                    .SortByDescending(u => u.Balance):\\r\\n\\r\\nvar results = aggregate.ToList();\\r\\n\\r\\nforeach (var account in results)\\r\\n{\\r\\n    Console.WriteLine(account.Balance);\\r\\n}\\r\\n```\\r\\n\\r\\n#### Sort by Using `BsonDocument`\\r\\n\\r\\nA `Sort` stage sorts all input documents and passes them to the next pipeline stage in the sorted order. This can be a numeric value, strings arranged in alphabetical order, dates, or timestamps. For example:\\r\\n\\r\\n```csharp\\r\\nvar matchBalanceStage = Builders<BsonDocument>.Filter.Lt(\\"balance\\", 1500);\\r\\nvar sort = Builders<BsonDocument>.Sort.Descending(\\"balance\\");\\r\\n\\r\\nvar aggregate = accountsCollection.Aggregate()\\r\\n                        .Match(matchBalanceStage)\\r\\n                        .Sort(sort);\\r\\nvar results = aggregate.ToList();\\r\\n\\r\\nforeach (var account in results)\\r\\n{\\r\\n    Console.WriteLine(account.ToString());\\r\\n}\\r\\n```\\r\\n\\r\\n### `Project` Stage\\r\\n\\r\\nTo create a projection, we use the `ProjectionDefinitionBuilder`. We use the `Expression` method to define the output of the `Project` stage.\\r\\n\\r\\nIn the following code, we use a LINQ expression to create a new generic object with the fields we want. We keep the same names for the first three properties: `AccountId`, `AccountType`, and `Balance`. We create a new field called `GBP`, which is calculated by dividing the current `Balance` field by `1.3`.\\r\\n\\r\\n```Csharp\\r\\nvar matchBalanceStage = Builders<Accounts>.Filter.Lt(user => user.Balance, 1500);\\r\\nvar projectStage = Builders<Accounts>.Projection.Expression(u =>\\r\\n    new\\r\\n    {\\r\\n        AccountId = u.AccountId,\\r\\n        AccountType = u.AccountType,\\r\\n        Balance = u.Balance,\\r\\n        GBP = u.Balance / 1.30M\\r\\n    });\\r\\n\\r\\nvar aggregate = accountsCollection.Aggregate()\\r\\n                        .Match(matchBalanceStage)\\r\\n                        .SortByDescending(u => u.Balance)\\r\\n                        .Project(projectStage);\\r\\n\\r\\nvar results = aggregate.ToList();\\r\\n\\r\\nforeach (var account in results)\\r\\n{\\r\\n    Console.WriteLine(account.Balance);\\r\\n}\\r\\n```\\r\\n\\r\\n### Sample\\r\\n\\r\\n```Csharp\\r\\nIMongoDatabase db = dbClient.GetDatabase(\\"postal_data\\");\\r\\nvar zipEntries = db.GetCollection<ZipEntry>(\\"zip_entries\\");\\r\\nvar builder = Builders<ZipEntry>.Filter;\\r\\nvar filter = builder.Eq(x => x.State, \\"AL\\") & builder.Gt(x => x.Population, 2000);\\r\\nvar sort = Builders<ZipEntry>.Sort.Ascending(x => x.City);\\r\\nvar projection = Builders<ZipEntry>.Projection.Include(x => x.City).Exclude(x => x.Zip);\\r\\nvar results = zipEntries.Find(filter).Sort(sort).Project(projection).ToList();\\r\\n```\\r\\n\\r\\n---\\r\\n\\r\\n## MongoDB Aggregation with Csharp\\r\\n\\r\\nIn this unit, you learned how to:\\r\\n\\r\\n- Define an aggregation pipeline and its stages and operators.\\r\\n- Build the `Match` and `Group` stages of an aggregation pipeline.\\r\\n- Build the `Sort` and `Project` stages of an aggregation pipeline.\\r\\n\\r\\n### Resources\\r\\n\\r\\nUse the following resources to learn more about performing basic aggregation with Csharp:"},{"id":"/2024/2/28/data-structure-and-algorithms","metadata":{"permalink":"/2024/2/28/data-structure-and-algorithms","editUrl":"https://github.com/nhonvo/nhonvo.github.io/edit/main/blog/blog/2024-2-28-data-structure-and-algorithms.md","source":"@site/blog/2024-2-28-data-structure-and-algorithms.md","title":"Data structure and algorithms","description":"- Checklist","date":"2024-02-28T00:00:00.000Z","formattedDate":"February 28, 2024","tags":[{"label":"Data Structures","permalink":"/tags/data-structures"},{"label":"Algorithms","permalink":"/tags/algorithms"}],"readingTime":1.47,"hasTruncateMarker":true,"authors":[{"name":"Truong Nhon"}],"frontMatter":{"layout":"post","title":"Data structure and algorithms","subtitle":"","date":"2024-02-28T00:00:00.000Z","author":"Truong Nhon","published":true,"catalog":true,"tags":["Data Structures","Algorithms"]},"prevItem":{"title":"Mongo with csharp","permalink":"/2024/3/1/mongo-with-csharp"},"nextItem":{"title":"Mongodb theory and examples code","permalink":"/2024/2/15/mongodb-theory-and-examples-code"}},"content":"\x3c!--truncate--\x3e\\r\\n\\r\\n- Checklist\\r\\n  - [x] stack\\r\\n  - [x] queue\\r\\n  - [x] linked list\\r\\n  - [ ] binary tree\\r\\n  - [ ] graph\\r\\n\\r\\n## State 1 \u2022 4 weeks\\r\\n\\r\\n- Lesson 1: Introduction to Data Structures\\r\\nIntroduction to the Data Structures course.\\r\\n- Lesson 2: Arrays and Linked Lists\\r\\nLearn about Arrays and Linked Lists\\r\\n- Lesson 3: Stacks and Queues\\r\\nBuild Stacks and Queues\\r\\n- Lesson 4: Recursion\\r\\nApply Recursion to Problems\\r\\n- Lesson 5: Trees\\r\\nLearn about basic tree\'s, tree traversal and binary search trees.\\r\\n- Lesson 6: Maps and Hashing\\r\\nExplore the concepts of maps and hashes.\\r\\n- Lesson 7 \u2022 Project: Show Me the Data Structures\\r\\nSolve a series of open-ended practice problems. Hone your skills to identify and implement appropriate data structures and corresponding methods that meet given constraints.\\r\\n\\r\\n## State 2 \u2022 4 weeks\\r\\n\\r\\nBasic Algorithms\\r\\nLearn about the basic algorithms used in programming.\\r\\n\\r\\n- Lesson 1: Basic Algorithms\\r\\nStart out with some elementary algorithms such as binary search, tries, heaps and more.\\r\\n- Lesson 2: Sorting Algorithms\\r\\nLearn about the most common sorting algorithms.\\r\\n- Lesson 3: Faster Divide & Conquer Algorithms\\r\\nGo deeper into algorithms with faster divide and conquer algorithms.\\r\\n- Lesson 4 \u2022 Project: Problems vs. Algorithms\\r\\nA series of real-world open ended problems which train you to apply suitable data structures and algorithms under different context.\\r\\n\\r\\n## State 3 \u2022 4 weeks\\r\\n\\r\\nAdvanced Algorithms\\r\\nLearn about the basic algorithms used in programming.\\r\\n\\r\\n- Lesson 1: Greedy Algorithms\\r\\nGet familiar with and practice greedy algorithms.\\r\\n- Lesson 2: Graph Algorithms\\r\\nLearn about the many aspects of graph algorithms!\\r\\n- Lesson 3: Dynamic Programming\\r\\nLearn about dynamic programming and apply your learnings to challenging exercises.\\r\\n- Lesson 4: A*\\r\\n- Lesson 5 \u2022 Project: Route Planner"},{"id":"/2024/2/15/mongodb-theory-and-examples-code","metadata":{"permalink":"/2024/2/15/mongodb-theory-and-examples-code","editUrl":"https://github.com/nhonvo/nhonvo.github.io/edit/main/blog/blog/2024-2-15-mongodb-theory-and-examples-code.md","source":"@site/blog/2024-2-15-mongodb-theory-and-examples-code.md","title":"Mongodb theory and examples code","description":"MONGODB PRACTICE SECTION 1","date":"2024-02-15T12:00:00.000Z","formattedDate":"February 15, 2024","tags":[{"label":"mongodb","permalink":"/tags/mongodb"}],"readingTime":8.63,"hasTruncateMarker":true,"authors":[{"name":"Truong Nhon"}],"frontMatter":{"layout":"post","title":"Mongodb theory and examples code","subtitle":"Associate developer MongoDB C# certificate exam","date":"2024-02-15T12:00:00.000Z","author":"Truong Nhon","published":true,"catalog":true,"tags":["mongodb"]},"prevItem":{"title":"Data structure and algorithms","permalink":"/2024/2/28/data-structure-and-algorithms"},"nextItem":{"title":"Hangfire - Enqueueing Background Jobs","permalink":"/2024/2/8/hangfire"}},"content":"\x3c!--truncate--\x3e\\r\\n\\r\\n\\r\\n## MONGODB PRACTICE SECTION 1\\r\\n\\r\\n### Part 1: Query Operators\\r\\n\\r\\n```javascript\\r\\ndb.collection.findOne(query, projection)\\r\\ndb.collection.find(query, projection)\\r\\nCase Sensitivity in MongoDB\\r\\ndb.trips.FindOne() - is incorrect\\r\\ndb.trips.Find() - is incorrect\\r\\nQuery in Explorer\\r\\n```\\r\\n\\r\\n### Part 2: Logical Operators\\r\\n\\r\\n```javascript\\r\\n$eq, $ne\\r\\ndb.trips.find({\\"tripduration\\":{$eq: 200}})\\r\\n$gt, $gte\\r\\ndb.trips.find({\\"tripduration\\": {$lt: 200}})\\r\\n$lt, $lte\\r\\ndb.trips.find({\\"tripduration\\": {$lt: 200}})\\r\\n$in\\r\\ndb.trips.find({\\"start station id\\": {$in: [302, 536]}})\\r\\n```\\r\\n\\r\\n[Query Comparison Operators Reference](https://www.mongodb.com/docs/manual/reference/operator/query-comparison/)\\r\\n\\r\\n### Part 3: Projection and Embedded Documents\\r\\n\\r\\n```javascript\\r\\ndb.collection.find({query},{projection});\\r\\ndb.trips.find({query}, {tripduration:1, bikeid:1, _id:0})\\r\\n```\\r\\n\\r\\n```javascript\\r\\n{operator: [{condition1}, {condition2}...]}\\r\\n$and\\r\\n$or, $nor\\r\\ndb.trips.find({$and: [{tripduration:{$gt: 400}}, {\\"birth year\\": {$gt: 1988}}]})\\r\\ndb.accounts.find({$and: [{products: \'CurrencyService\'}, {products: \'InvestmentStock\'}, {products: {$size: 2}}]})\\r\\ndb.trips.find({$or: [{tripduration: {$lt: 400}}, {tripduration: {$gt:1900}}]})\\r\\ndb.inspections.find({$or: [{result: \\"No Violation Issued\\"}, {result: \\"Violation Issued\\"}]})\\r\\n```\\r\\n\\r\\n[Logical Query Operators Reference](https://www.mongodb.com/docs/manual/reference/operator/query-logical/)\\r\\n\\r\\n### Part 4: Embedded Documents\\r\\n\\r\\n```javascript\\r\\ndb.inspections.find({\\"address.zip\\": 11427})\\r\\ndb.inspections.find({result: \\"Pass\\",\\"address.zip\\": {$in:[11427]}}, {result: 1, date:1, address:1})\\r\\ndb.inspections.updateMany({_id: ObjectId(\'56d61033a378eccde8a83569\')}, {$set: {\\"address.phone\\": {: \'84\', number: \'999988778\'}}})\\r\\nFind 3 level of embedded documents\\r\\ndb.inspections.find({\\"address.phone.code\\": \\"84\\"});\\r\\n```\\r\\n\\r\\n### Part 5: Array Operators\\r\\n\\r\\n```javascript\\r\\ndb.accounts.find({\\"products\\":[\'Brokerage\',\'InvestmentStock\']});\\r\\n$all\\r\\ndb.accounts.find({\\"products\\":{$all:[\'Brokerage\',\'InvestmentStock\']}})\\r\\n$inc\\r\\ndb.accounts.find({\\"products\\":{$in:[\'Brokerage\',\'InvestmentStock\']}})\\r\\n$size\\r\\ndb.accounts.find({\\"products\\":{$size: 3}})\\r\\n$elemMatch\\r\\ndb.grades.find({\\"scores\\":{$elemMatch:{\\"type\\":\\"exam\\", \\"score\\": {$gt: 80}}}})\\r\\n```\\r\\n\\r\\n[Array Query Operators Reference](https://www.mongodb.com/docs/manual/reference/operator/query-array/)\\r\\n\\r\\n### Part 6: Counting Documents\\r\\n\\r\\n```javascript\\r\\ndb.collection.countDocuments();\\r\\ndb.trips.countDocuments({tripduration: {$gt: 1000}})\\r\\ndb.collection.find({query}).count();\\r\\n```\\r\\n\\r\\n### Part 7: Sorting, Limiting, and Skipping\\r\\n\\r\\n```javascript\\r\\ndb.collection.find({query}).sort({field: 1}) => asc\\r\\ndb.collection.find({query}).sort({field: -1}) => desc\\r\\ndb.trips.find({}).sort({tripduration:1, \\"start station id\\": -1})\\r\\ndb.collection.find({query}).limit(number);\\r\\ndb.trips.find({tripduration: {$gt: 1400}}).limit(10)\\r\\ndb.collection.find({query}).skip(number);\\r\\ndb.trips.find({tripduration: {$gt: 1400}}).skip(5).limit(10);\\r\\n```\\r\\n\\r\\n### Part 8: Inserting Documents\\r\\n\\r\\n```javascript\\r\\ndb.collection.insert([], {option}) \\r\\ndb.testcollection.insert([{name:\'test\', age: 10}, {name:\'test2\', age: 12}])\\r\\ndb.collection.insertOne({});\\r\\nWe can insert empty object {}, it will generate _id for this object\\r\\nWe cannot insert with the same _id\\r\\ndb.testcollection.insertOne({_id: 1001, \\"name\\": \\"Test\\",\\"scores\\":10})\\r\\ndb.collection.bulkWrite([\\r\\n  {insertOne:{_id:3, name:\\"test\\"}}, \\r\\n  {insertOne:{_id:4, name:\\"test2\\"}}\\r\\n                          ])\\r\\n\\r\\ndb.collection.insertOne({date: new Date(\\"2022-02-02T00:00:00Z\\")})\\r\\ndb.collection.insertOne({date: ISODate(\\"2022-02-02T00:00:00Z\\")})\\r\\n```\\r\\n\\r\\n[Insert Documents Tutorial](https://www.mongodb.com/docs/manual/tutorial/insert-documents/)\\r\\n\\r\\n### Part 9: Deleting Documents\\r\\n\\r\\n```javascript\\r\\ndb.collection.deleteOne();\\r\\ndb.testcollection.deleteMany({name:\\"test1\\"});\\r\\ndb.collection.deleteMany();\\r\\ndb.testcollection.deleteMany({name:\\"test1\\"});\\r\\ndb.testcollection.deleteMany({name:\\"test123\\"});\\r\\ndb.collection.findOneAndDelete()\\r\\nReturn a document after delete the document\\r\\ndb.accounts.findOneAndDelete({account_id: 977774})\\r\\ndb.collection.drop()\\r\\n```\\r\\n\\r\\n[Delete Methods Reference](https://www.mongodb.com/docs/manual/reference/delete-methods/)\\r\\n\\r\\n### Part 10: Updating Documents\\r\\n\\r\\n```javascript\\r\\ndb.collection.updateOne({filter}{update},{option})\\r\\ndb.collection.updateMany({filter},{update}, {option})\\r\\ndb.collection.findOneAndUpdate({filter},{update}, {option})\\r\\n$set\\r\\n$inc\\r\\ndb.zips.updateMany({city: \\"MC CALLA\\"}, {$inc: {pop: 1}})\\r\\n$push = using to push an item embedded array of document\\r\\ndb.grades.updateMany({student_id: 4}, {$push: {scores: {type: \\"new exam\\", score: 100}}})\\r\\nUpdate embedded array\\r\\ndb.sales.updateMany({items: {$elemMatch: {name: \\"printer paper\\"}}},{$set: {\\"items.$.price\\": 20 }}); \\r\\ndb.grades.updateMany({scores:{$elemMatch:{score: {$gt : 33}}}}, {$set: {\\"scores.$.type\\": \\"exam2\\"}});\\r\\n\\r\\ndb.trips.updateMany({tripduration: 199999},{$set: {usertype: \'Subscriber\'}})\\r\\ndb.trips.updateMany({tripduration: 199999},{$set: {usertype: \'Subscriber\'}}, {upsert: true})\\r\\ndb.collection.replaceOne({filter}, {replacement},{option})\\r\\nOption: {upsert: true/false}\\r\\ndb.accounts.replaceOne({account_id: \\"unknown\\"},{account_id: \\"new account\\", limit: 2024}, {upsert: true})\\r\\n```\\r\\n\\r\\n[Update Methods Reference](https://www.mongodb.com/docs/manual/reference/update-methods/)\\r\\n\\r\\n---\\r\\n\\r\\n## MONGODB PRACTICE SECTION 2\\r\\n\\r\\n### Aggregation\\r\\n\\r\\n```javascript\\r\\ndb.orders.aggregate( [\\r\\n    // Stage 1: Filter pizza order documents by pizza size\\r\\n    {\\r\\n        $match: { size: \\"medium\\" }\\r\\n    },\\r\\n    // Stage 2: Group remaining documents by pizza name and calculate total quantity\\r\\n    {\\r\\n        $group: { _id: \\"$name\\", totalQuantity: { $sum: \\"$quantity\\" } }\\r\\n    },\\r\\n    // Stage 3: Select items having totalQuantity greater than 8\\r\\n    {\\r\\n        $match: { totalQuantity: { $gt: 8 } }\\r\\n    }\\r\\n] )\\r\\n```\\r\\n\\r\\n[Aggregation Reference](https://www.mongodb.com/docs/manual/aggregation/)\\r\\n\\r\\n#### Aggregation - Stage\\r\\n\\r\\n- `$match`\\r\\n- `$group`\\r\\n- `$project`\\r\\n- `$sort`\\r\\n- `$limit`\\r\\n- `$skip`\\r\\n- `$out`\\r\\n\\r\\n[Aggregation Pipeline Operators Reference](https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/)\\r\\n\\r\\n#### Aggregation - Optimize\\r\\n\\r\\n- `$project` + `$match`\\r\\n- `$project` + `$skip`\\r\\n- `$sort` + `$match`\\r\\n\\r\\n[Aggregation Pipeline Optimization](https://www.mongodb.com/docs/manual/core/aggregation-pipeline-optimization/)\\r\\n\\r\\n- Another aggregation pipeline\\r\\n\\r\\n```javascript\\r\\ndb.collection.aggregate.(\\r\\n  [{\\r\\n    \\"$search\\": {\\r\\n    \\"text\\":\\r\\n    {\\r\\n      \\"path\\": \\"name\\",\\r\\n      \\"query\\": \\"cuban\\"\\r\\n    }\\r\\n}}])\\r\\n```\\r\\n\\r\\n```javascript\\r\\ndb.collection.aggregate([$lookup: {\\r\\n  from:\'\',\\r\\n  localField:\'\',\\r\\n  foreignField:\'\',\\r\\n  as:\'\'\\r\\n}])\\r\\n```\\r\\n\\r\\n#### Aggregation - Exam Question\\r\\n\\r\\nGiven the following documents:\\r\\n\\r\\n```json\\r\\n{\\"_id\\":1, restaurant: \\"Quesadillas Inc.\\", rating: 4.5 },\\r\\n{\\"_id\\":2, restaurant: \\"Pasta Inc.\\", rating: 3.9},\\r\\n{\\"_id\\":3, restaurant: \\"Tacos Inc.\\", rating: 2.5}\\r\\n```\\r\\n\\r\\nA developer wants to find the highest-rated restaurant in a list. An index has been created on the appropriate field. What query satisfies the requirements? (Choose 1)\\r\\n\\r\\n- A. `const pipeline = [ { $sort: { rating : -1, limit: 1 } } ]; const aggCursor = coll.runAggregation(pipeline);`\\r\\n- B. `const pipeline = [ { $sort: { rating : -1 } }, { $limit: 1 } ]; const aggCursor = coll.runAggregation(pipeline);`\\r\\n- C. `const pipeline = [ { $sort: { rating : -1 , limit: 1} } ]; const aggCursor = coll.aggregate(pipeline);`\\r\\n- D. `const pipeline = [ { $sort: { rating : -1 } }, { $limit: 1 } ]; const aggCursor = coll.aggregate(pipeline);`\\r\\n\\r\\n### Index\\r\\n\\r\\n#### Index - Create\\r\\n\\r\\n```javascript\\r\\ndb.collection.createIndex(<keys>, <options>)\\r\\ndb.collection.createIndex({\\"a\\": 1})\\r\\ndb.collection.createIndex({\\"a\\": -1})\\r\\ndb.collection.createIndex({\\"a\\": 1, \\"b\\": 1})\\r\\ndb.collection.createIndex({\\"a\\": 1}, {unique: true, expireAfterSeconds: 3600})\\r\\n```\\r\\n\\r\\n- Keys:\\r\\n\\r\\n```json\\r\\n{<field>: <1 / \u20131>}\\r\\n```\\r\\n\\r\\n- `1` => ascending index\\r\\n- `-1` => descending index\\r\\n\\r\\n- Options: `unique`, `expireAfterSeconds`\\r\\n\\r\\n[Index Creation Reference](https://www.mongodb.com/docs/manual/reference/method/db.collection.createIndex/)\\r\\n\\r\\n#### Index - Get\\r\\n\\r\\n```javascript\\r\\ndb.collection.getIndexes()\\r\\n```\\r\\n\\r\\n[Index Retrieval Reference](https://www.mongodb.com/docs/manual/reference/method/db.collection.getIndexes/)\\r\\n\\r\\n#### Index - Drop\\r\\n\\r\\n```javascript\\r\\ndb.collection.dropIndex(<index>)\\r\\ndb.products.dropIndex(\\"name_1\\")\\r\\n```\\r\\n\\r\\n[Index Deletion Reference](https://www.mongodb.com/docs/manual/reference/method/db.collection.dropIndex/)\\r\\n\\r\\n#### Index - Hide\\r\\n\\r\\n```javascript\\r\\n\\r\\ndb.collection.hideIndex(<index>)\\r\\n```\\r\\n\\r\\n[Index Hiding Reference](https://www.mongodb.com/docs/manual/reference/method/db.collection.hideIndex/)\\r\\n\\r\\n#### Index - Explain Query\\r\\n\\r\\n```javascript\\r\\ndb.collection.explain(<mode>)\\r\\n```\\r\\n\\r\\n- Modes: `queryPlanner` (default), `executionStats`, `allPlansExecution`\\r\\n\\r\\n[Index Query Explanation Reference](https://www.mongodb.com/docs/manual/reference/method/db.collection.explain/)\\r\\n\\r\\n#### Index \u2013 Hint\\r\\n\\r\\n```javascript\\r\\ndb.collection.find({\\"a\\": \\"some value\\"}).hint({ a: 1 })\\r\\ndb.collection.find({\\"a\\": \\"some value\\"}).hint(\\"a_1\\")\\r\\n```\\r\\n\\r\\n[Index Hinting Tutorial](https://www.mongodb.com/docs/manual/tutorial/measure-index-use/)\\r\\n\\r\\n#### Index \u2013 Compound\\r\\n\\r\\nGiven the following query:\\r\\n\\r\\n```javascript\\r\\ndb.collection.find({ }).sort({ \\"product\\": 1, \\"price\\": 1 })\\r\\n```\\r\\n\\r\\nWhich index will improve the performance of this query? (Choice 2)\\r\\n\\r\\nA. `db.collection.createIndex( { \\"product\\": 1, \\"price\\": 1 } )`\\r\\nB. `db.collection.createIndex( { \\"product\\": 1, \\"price\\": -1 } )`\\r\\nC. `db.collection.createIndex( { \\"product\\": -1, \\"price\\": 1 } )`\\r\\nD. `db.collection.createIndex( { \\"product\\": -1, \\"price\\": -1 } )`\\r\\n\\r\\n#### Index \u2013 Behind the Scene\\r\\n\\r\\nGiven a collection called collection:\\r\\n\\r\\n```json\\r\\n{ \\"a\\": 1, \\"b\\": 1 }\\r\\n{ \\"a\\": 1, \\"b\\": 2 }\\r\\n{ \\"a\\": 2, \\"b\\": 1 }\\r\\n{ \\"a\\": 2, \\"b\\": 2 }\\r\\n{ \\"a\\": 2, \\"b\\": 3 }\\r\\n{ \\"a\\": 3, \\"b\\": 1 }\\r\\n{ \\"a\\": 3, \\"b\\": 2 }\\r\\n```\\r\\n\\r\\nFind `a = 2`, `b > 1` sorted by `b`.\\r\\n\\r\\n#### Index \u2013 ESR Rule\\r\\n\\r\\nThe ESR (Equality, Sort, Range) Rule:\\r\\n\\r\\n```javascript\\r\\ndb.cars.createIndex({ manufacturer: 1, model: 1, cost: 1 })\\r\\n```\\r\\n\\r\\n[ESR Rule Explanation Reference](https://www.mongodb.com/docs/manual/tutorial/equality-sort-range-rule/)\\r\\n\\r\\n#### Homework\\r\\n\\r\\n- Review workshop record\\r\\n- Practice commands in this section with your sample collections in MDB_EDU database (cloud.mongodb.com)\\r\\n- Follow and practice section 10, 12 in Udemy Course: [MongoDB - The Complete Developer\'s Guide](https://fpt-software.udemy.com/course/mongodb-the-complete-developers-guide/learn/lecture/11850736)\\r\\n- Preview Atlas search\\r\\n\\r\\n---\\r\\n\\r\\n## MONGODB PRACTICE SECTION 3\\r\\n\\r\\n### Exam - 43/53 to PASS\\r\\n\\r\\n### What will be asked?\\r\\n\\r\\n- CRUD 27 \u2013 28\\r\\n  - Mongo Shell\\r\\n  - CRUD functions (findOne, find, insertOne, insertMany, updateOne, updateMany, deleteOne, deleteMany, findAndModify...)\\r\\n  - Query in array fields, nested object fields ($in, $elemMatch)\\r\\n  - Aggregation ($match, $group, $out)\\r\\n  - Atlas Search index and query\\r\\n- Index 9 \u2013 10\\r\\n  - Choose correct index for a query\\r\\n  - From explain query output, identify if using index scan\\r\\n  - Index with Nested object field\\r\\n- Driver NodeJS / Java / C#/ Python / PHP 9 \u2013 10\\r\\n  - Driver significant features, URI, connection pooling\\r\\n  - Driver source code syntax: CRUD, Aggregation pipeline\\r\\n- The Document Model 4 \u2013 5\\r\\n  - Which document can/cannot store in the same collection\\r\\n  - BSON data type (Ex: Decimal128, not Float64)\\r\\n- Data Modeling 1 \u2013 2\\r\\n  - Embedded or Referred relationship\\r\\n- Atlas Tools 1 \u2013 2\\r\\n  - MongoDB Atlas UI\\r\\n  - Data Explorer to query data\\r\\n\\r\\n### Data Modeling\\r\\n\\r\\n- Embedded Data\\r\\n  - Embedded documents store related data in a single document structure. A document can contain arrays and sub-documents with related data.\\r\\n- References\\r\\n  - References store relationships between data by including links, called references, from one document to another.\\r\\n- Ref: [Data Modeling Guide](https://www.mongodb.com/docs/manual/data-modeling/)\\r\\n  \\r\\n#### Data Modeling - Embedded\\r\\n\\r\\n- Model One-to-One Relationships\\r\\n  - Ref: [Embedded One-to-One Relationships](https://www.mongodb.com/docs/manual/tutorial/model-embedded-one-to-one-relationships-between-documents/)\\r\\n- Model One-to-Many Relationships with Embedded Documents\\r\\n  - Receives all required information in a single read operation\\r\\n  - Example: Country to major cities, Author to books, Student to classes\\r\\n  - Limit size of a document: 16MB\\r\\n  - Ref: [Embedded One-to-Many Relationships](https://www.mongodb.com/docs/manual/tutorial/model-embedded-one-to-many-relationships-between-documents/)\\r\\n\\r\\n#### Data Modeling - References\\r\\n\\r\\n- Model One-to-Many Relationships with Document References\\r\\n  - To avoid repetition of the referred data, use references\\r\\n  - Example: Book and Publisher\\r\\n  - Ref: [Referenced One-to-Many Relationships](https://www.mongodb.com/docs/manual/tutorial/model-referenced-one-to-many-relationships-between-documents/)\\r\\n\\r\\n### Atlas Search\\r\\n\\r\\n#### Atlas Search \u2013 Index Field Mappings\\r\\n\\r\\n- Dynamic Mapping\\r\\n  - Automatically index all supported field types using dynamic mappings\\r\\n- Static Mapping\\r\\n  - Specify the fields to index\\r\\n  - Syntax:\\r\\n\\r\\n```json\\r\\n{\\r\\n    \\"mappings\\": {\\r\\n    \\"dynamic\\": <boolean>,\\r\\n    \\"fields\\": {\\r\\n        \\"<field-name>\\": {\\r\\n        \\"type\\": \\"<field-type>\\",\\r\\n        }\\r\\n    }\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n- Ref: [Atlas Search - Field Mappings](https://www.mongodb.com/docs/atlas/atlas-search/define-field-mappings/)\\r\\n\\r\\n#### Atlas Search \u2013 Index Analyzer\\r\\n\\r\\n- Ref: [Atlas Search Analyzers](https://www.mongodb.com/docs/atlas/atlas-search/analyzers/)\\r\\n- Analyzer Description:\\r\\n  - Standard: Uses the default analyzer for all Atlas Search indexes and queries.\\r\\n  - Simple: Divides text into searchable terms wherever it finds a non-letter character.\\r\\n  - Whitespace: Divides text into searchable terms wherever it finds a whitespace character.\\r\\n  - Language: Provides a set of language-specific text analyzers.\\r\\n  - Keyword: Indexes text fields as single terms.\\r\\n\\r\\n#### Atlas Search \u2013 Index Analyzer Tokenizer\\r\\n\\r\\n- whitespace\\r\\n- nGram\\r\\n- edgeGram => Autocomplete\\r\\n- regexCaptureGroup\\r\\n- Ref: [Atlas Search - Tokenizers](https://www.mongodb.com/docs/atlas/atlas-search/analyzers/tokenizers/)\\r\\n\\r\\n#### Atlas Search \u2013 Query\\r\\n\\r\\n- Single Field Search\\r\\n- Multiple Field Search\\r\\n- Nested Field Search\\r\\n- Wildcard Field Search\\r\\n- Ref: [Atlas Search - Path Construction](https://www.mongodb.com/docs/atlas/atlas-search/path-construction/)\\r\\n- Example:\\r\\n\\r\\n```json\\r\\n$search: {\\r\\n    \\"text\\": {\\r\\n    \\"query\\": \\"Ford\\",\\r\\n    \\"path\\": \\"make\\"\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n#### Atlas Search \u2013 Query Compound\\r\\n\\r\\n- should\\r\\n- must\\r\\n- mustNot\\r\\n- filter\\r\\n- Ref: [Atlas Search - Compound](https://www.mongodb.com/docs/atlas/atlas-search/compound/)\\r\\n\\r\\n### Node.js Driver\\r\\n\\r\\n- Connection\\r\\n  - Video: [Connecting to MongoDB in Node.js](https://learn.mongodb.com/courses/connecting-to-mongodb-in-nodejs)\\r\\n  - Ref: [Node.js Driver Connection](https://www.mongodb.com/docs/drivers/node/current/fundamentals/connection/connect/)\\r\\n  \\r\\n#### CRUD\\r\\n\\r\\n- Video: [MongoDB CRUD Operations in Node.js](https://learn.mongodb.com/courses/mongodb-crud-operations-in-nodejs)\\r\\n- Ref: [Node.js Driver CRUD](https://www.mongodb.com/docs/drivers/node/current/fundamentals/crud/)\\r\\n\\r\\n#### Aggregation driver\\r\\n\\r\\n- Video: [MongoDB Aggregation with Node.js](https://learn.mongodb.com/courses/mongodb-aggregation-with-nodejs)\\r\\n- Ref: [Node.js Driver Aggregation](https://www.mongodb.com/docs/drivers/node/current/fundamentals/aggregation/)\\r\\n\\r\\n#### MongoClient API\\r\\n\\r\\n- Ref: [MongoClient API](https://mongodb.github.io/node-mongodb-native/6.3/classes/MongoClient.html)\\r\\n\\r\\n#### Node.js Driver \u2013 Connection Pool\\r\\n\\r\\n- Definition\\r\\n  - A connection pool is a cache of open, ready-to-use database connections maintained by the driver.\\r\\n  - Your application can seamlessly get connections from the pool, perform operations, and return connections back to the pool.\\r\\n  - Connection pools are thread-safe.\\r\\n- Benefits\\r\\n  - Helps reduce application latency and the number of times new connections are created.\\r\\n  - A connection pool creates connections at startup.\\r\\n  - No need to manually return connections to the pool, connections return to the pool automatically.\\r\\n  - When requesting a connection and there\u2019s an available connection in the pool, a new connection does not need to be created.\\r\\n- Ref: [Connection Pool Overview](https://www.mongodb.com/docs/manual/administration/connection-pool-overview/)\\r\\n\\r\\n### Practice Questions\\r\\n\\r\\n- [Practice Questions](https://learn.mongodb.com/learn/course/associate-developer-node-practice-questions/prep-questions/practice-questions)\\r\\n\\r\\n### Homework driver\\r\\n\\r\\n- Review workshop record\\r\\n- Follow the video of Node.js Driver and practice with your sample collections in MDB_EDU database ([cloud.mongodb.com](https://cloud.mongodb.com))\\r\\n- Read document references in this slide\\r\\n- Review all to prepare for the final test in the next week (53 questions, 80% to pass)\\r\\n- Register and schedule for the exam"},{"id":"/2024/2/8/hangfire","metadata":{"permalink":"/2024/2/8/hangfire","editUrl":"https://github.com/nhonvo/nhonvo.github.io/edit/main/blog/blog/2024-2-8-hangfire.md","source":"@site/blog/2024-2-8-hangfire.md","title":"Hangfire - Enqueueing Background Jobs","description":"In modern web applications, handling time-consuming tasks asynchronously is crucial to providing a responsive user experience. One powerful tool for managing background job processing in .NET applications is Hangfire. In this blog post, we\'ll explore the basics of Hangfire and how it simplifies the implementation of background tasks.","date":"2024-02-08T12:00:00.000Z","formattedDate":"February 8, 2024","tags":[{"label":"hangfire","permalink":"/tags/hangfire"},{"label":"backgroundJobs","permalink":"/tags/background-jobs"}],"readingTime":1.925,"hasTruncateMarker":false,"authors":[{"name":"Truong Nhon"}],"frontMatter":{"layout":"post","title":"Hangfire - Enqueueing Background Jobs","subtitle":"Background Job Processing with Hangfire","date":"2024-02-08T12:00:00.000Z","author":"Truong Nhon","published":true,"catalog":true,"tags":["hangfire","backgroundJobs"]},"prevItem":{"title":"Mongodb theory and examples code","permalink":"/2024/2/15/mongodb-theory-and-examples-code"},"nextItem":{"title":"Design-database","permalink":"/2024/2/6/Design-database"}},"content":"In modern web applications, handling time-consuming tasks asynchronously is crucial to providing a responsive user experience. One powerful tool for managing background job processing in .NET applications is Hangfire. In this blog post, we\'ll explore the basics of Hangfire and how it simplifies the implementation of background tasks.\\r\\n\\r\\n## Getting Started\\r\\n\\r\\nHangfire provides a straightforward way to execute background tasks using a fire-and-forget approach. Let\'s look at a quick example:\\r\\n\\r\\n```csharp\\r\\nBackgroundJob.Enqueue(() => Console.WriteLine(\\"Hello, world!\\"));\\r\\n```\\r\\n\\r\\nIn this example, BackgroundJob.Enqueue is used to queue a background job that prints \\"Hello, world!\\" to the console. The job is not executed immediately; instead, it goes through a serialization process and is stored persistently.\\r\\n\\r\\n## The Hangfire Workflow\\r\\n\\r\\nHangfire operates on a workflow that involves the following key components:\\r\\n\\r\\n1. **Enqueuing Jobs:**\\r\\n   - Jobs are enqueued using `BackgroundJob.Enqueue`.\\r\\n   - The method and its arguments are serialized, creating a background job.\\r\\n2. **Persistent Storage:**\\r\\n   - The serialized job information is stored in a persistent storage (e.g., a database).\\r\\n3. **Hangfire Server:**\\r\\n   - The Hangfire Server continually checks the persistent storage for enqueued jobs.\\r\\n   - It performs the jobs in a reliable way, ensuring they are executed even if the process is terminated during execution.\\r\\n4. **Worker Threads:**\\r\\n   - Enqueued jobs are handled by a dedicated pool of worker threads.\\r\\n   - Each worker fetches, performs, and removes jobs from the queue.\\r\\n5. **Guaranteed Processing:**\\r\\n   - Jobs are only removed from the queue after successful processing.\\r\\n   - Hangfire includes compensation logic to guarantee the processing of each job.\\r\\n\\r\\n`BackgroundJob.Enqueue(() => Console.WriteLine(\\"Hello, world!\\"))`\\r\\n\\r\\n```mermaid\\r\\ngraph TD\\r\\n\\r\\nsubgraph Enqueue\\r\\n  A[User] --\x3e|Enqueue| B[print `hello world` jobs]\\r\\nend\\r\\n\\r\\nsubgraph Background Job Processing\\r\\n  B --\x3e|Serialize| C[Create Background Job]\\r\\n  C --\x3e|Save to Storage| D[Persistent Storage]\\r\\n  D --\x3e|Enqueue| E[Queue]\\r\\nend\\r\\n\\r\\nsubgraph Hangfire Server\\r\\n  E --\x3e|Check for Jobs| F[Hangfire Server]\\r\\nend\\r\\n\\r\\nsubgraph Worker Threads\\r\\n  F --\x3e|Fetch Job| G[Worker Thread]\\r\\n  G --\x3e|Perform Job| H[Perform Job and Filters]\\r\\n  H --\x3e|Remove from Queue| I[Remove Job from Queue]\\r\\nend\\r\\n```\\r\\n\\r\\n## Benefits of Hangfire\\r\\n\\r\\nHangfire offers several advantages for background job processing:\\r\\n\\r\\n- **Simplicity:** Enqueuing jobs is as simple as passing a lambda expression.\\r\\n- **Reliability:** Jobs are processed reliably, even in the face of process terminations.\\r\\n- **Asynchronous Execution:** Background tasks can be executed asynchronously, improving application responsiveness.\\r\\n- **Monitoring and Management:** Hangfire provides a dashboard for monitoring and managing background jobs."},{"id":"/2024/2/6/Design-database","metadata":{"permalink":"/2024/2/6/Design-database","editUrl":"https://github.com/nhonvo/nhonvo.github.io/edit/main/blog/blog/2024-2-6-Design-database.md","source":"@site/blog/2024-2-6-Design-database.md","title":"Design-database","description":"\x3c!-- ---","date":"2024-02-06T00:00:00.000Z","formattedDate":"February 6, 2024","tags":[],"readingTime":8.575,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Hangfire - Enqueueing Background Jobs","permalink":"/2024/2/8/hangfire"},"nextItem":{"title":"SQL FOR EVERYONE - THE DEFINITIVE GUIDE","permalink":"/2024/1/21/SQL-cheatsheet"}},"content":"\x3c!-- ---\\r\\nlayout:     post\\r\\ntitle:      \\"Design database\\"\\r\\nsubtitle:   \\"SQL Essentials Part 5\\"\\r\\ndate:       2024-2-6 17:00:00\\r\\nauthor:     \\"Truong Nhon\\"\\r\\nhidden: false\\r\\npublished: true\\r\\nmultilingual: false\\r\\ncatalog: true\\r\\nlang: en\\r\\ntags:\\r\\n- sql\\r\\n- sqlserver\\r\\n---\\r\\n## Data normalization\\r\\n\\r\\nWhich data de-normalized:\\r\\n\\r\\n- Inconsistent data types\\r\\n- Repeating columns\\r\\n- Repeating values\\r\\n\\r\\n### First Normal Form \u2014 1NF\\r\\n\\r\\n- Make all values in a column consistently of the **same data type**\\r\\n- Make sure each cell contains only a **single value**\\r\\n- Make sure there are **no repeating** columns for the same data (e.g. category 1, 2, 3\u2026)\\r\\n- Enable the rows of data to be **uniquely identified** through a column or **combination of columns**\\r\\n\\r\\nEg:\\r\\n\\r\\n- First Normal Form: Same data type in a column, before:\\r\\n\\r\\n| item_no | item_name     | variantl     | qtyl   | variant2    | qty2 | variant3 | qty3 |\\r\\n| ------- | ------------- | ------------ | ------ | ----------- | ---- | -------- | ---- |\\r\\n| 12      | Happy t-shirt | Yellow (YLW) | eleven | Black (BLK) | 5    | White    | 8    |\\r\\n| 15      | Dress Shirt   | White (WHT)  | 18     | Light Blue  | 12   |          |      |\\r\\n| 88      | Sunglasses    | Polarized    | 5      |             |      |          |      |\\r\\n| 12 more | Happy t-shirt | Pink         | 15     |             |      |          |      |\\r\\n\\r\\n- First Normal Form: Same data type in a column, after\\r\\n\\r\\n| item_no      | item_name     | variantl           | qtyl   | variant2            | qty2 | variant3       | qty3 |\\r\\n| ------------ | ------------- | ------------------ | ------ | ------------------- | ---- | -------------- | ---- |\\r\\n| 12           | Happy t-shirt | Yellow (YLW)       | eleven | Black (BLK)         | 5    | White**(WHT)** | 8    |\\r\\n| 15           | Dress Shirt   | White (WHT)        | 18     | Light Blue**(LIB)** | 12   |                |      |\\r\\n| 88           | Sunglasses    | Polarized**(POL)** | 5      |                     |      |                |      |\\r\\n| 12~~__more~~ | Happy t-shirt | Pink**(PNK)**      | 15     |                     |      |                |      |\\r\\n\\r\\n### Second Normal Form - 2NF\\r\\n\\r\\n1. Bring table to First Normal Form\\r\\n2. Remove all partial dependencies\\r\\n\\r\\n**Partial dependency**: a column that isn\'t part of the primary key, and that depends only on part of the primary key. For example, if the primary key (PK) is `(student_no, course_id)`, then a column called `student_name` would be a partial dependency on the PK because it only depends on the `student_no`.\\r\\n\\r\\n![img](/img/Design-database/2nf-before-after.png)\\r\\n\\r\\nIn the example, I noted `item_name` and `variant_name` as partial dependencies, relying on `item_no` and `variant_code`, respectively. As such, I split these two partial dependencies into their own tables, avoiding quite a bit of data duplication.\\r\\n\\r\\nFrom there, the newly named `item_id` and `variant_id` (replacing `item_no` and `variant_code`) are the composite primary key for different `item_variant` quantities.\\r\\n\\r\\n### Third Normal Form\\r\\n\\r\\n1. Bring the table to Second Normal Form\\r\\n2. Eliminate transitive dependencies\\r\\n\\r\\n**Transitive dependency**: when a column that isn\'t part of the primary key depends on the primary key, but through another non-key column. For example, a table of movie reviews would have a surrogate id column as its PK, and a `movie_id` column to refer to the movfacie which is being reviewed. If the table also contains a `movie_name` column, then that `movie_name` is transitively dependent on the PK, because it depends on it *through* `movie_id`.\\r\\n\\r\\n![img](/img/Design-database/3nf-before-after.png)\\r\\n\\r\\nTo eliminate transitive dependencies, we\'ll use a strategy similar to that of eliminating partial dependencies: remove the concerned columns, and, if a table linking those columns to the one they depend on doesn\'t exist, create it. Keeping with the movie reviews example above, this would mean creating a table for movies, with an `id` and a `movie_name`, and only keeping the `movie_id` column in the reviews table.\\r\\n\\r\\n### Summary\\r\\n\\r\\n- De-normalized data contains repetitions that can cause anomalies\\r\\n- Rules exist to normalize data\\r\\n- First Normal Form:\\r\\n  - Single-valued columns\\r\\n  - No repeating columns\\r\\n  - Consistent data across a column\\r\\n  - Uniquely identify a row\\r\\n- Second Normal Form: No partial dependencies\\r\\n- Third Normal Form: No transitive dependencies\\r\\n- Sometimes, it\'s OK to violate normal forms; use your best judgement\\r\\n\\r\\n| **Key Term**             | **Definition**                                                                                                                                                                                                                                                               |\\r\\n| ------------------------ | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\\r\\n| First Normal Form (1NF)  | Shaping data to eliminate inconsistencies, and allowing unique identification of each row                                                                                                                                                                                    |\\r\\n| Second Normal Form (2NF) | Extends 1NF by removing partial dependencies                                                                                                                                                                                                                                 |\\r\\n| Third Normal Form (3NF)  | Extends 2NF by removing transitive dependencies                                                                                                                                                                                                                              |\\r\\n| One-One Relationship     | When one entity \\"has one\\" of another entity, and that second entity \\"belongs to\\" only the first. For example, entity \\"user\\" and \\"home address\\" have a one-one relationship                                                                                                   |\\r\\n| One-Many Relationship    | When one entity \\"has many\\" of another entity, and that second entity \\"belongs to\\" only the first. For example, entity \\"user\\" and \\"email address\\" have a one-many relationship, because a user can have many email addresses, but each email address belongs to only one user |\\r\\n| Many-Many Relationship   | When two entities are related in such a way where many links can exist on both sides. For example, entities \\"books\\" and \\"categories\\" have a many-many relationship, because a book can have multiple categories, and a category can belong to multiple books                 |\\r\\n| Candidate Key            | A set of one or more columns that can uniquely identify a row in a database table                                                                                                                                                                                            |\\r\\n| Primary Key              | The key from the set of candidate keys that we actually choose in order to uniquely identify a row in that table                                                                                                                                                             |\\r\\n| Composite Key            | A key that is composed of more than one column                                                                                                                                                                                                                               |\\r\\n| Partial Dependency       | When a non-key column depends on only part of the primary key                                                                                                                                                                                                                |\\r\\n| Transitive Dependency    | When a non-key column depends on the primary key through another non-key column                                                                                                                                                                                              |\\r\\n\\r\\n## DDL\\r\\n\\r\\n- Creating tables with `CREATE TABLE`\\r\\n- Using Postgres data types to represent real-life data:\\r\\n  - Numbers: INTEGER, SERIAL, REAL, DOUBLE PRECISION, DECIMAL\\r\\n  - Characters: CHARACTER(n), CHARACTER VARYING/VARCHAR, TEXT\\r\\n  - Dates/Times: TIMESTAMP WITH/WITHOUT TIME ZONE, DATE, TIME\\r\\n- There are many data types that we haven\'t touched, like Geometry, Arrays, ...\\r\\n- How to change table structure using `ALTER TABLE` to:\\r\\n  - Add/remove columns\\r\\n  - Change the data type of a column\\r\\n- Others DDL commands:\\r\\n  - `DROP` to remove a table from the database\\r\\n  - `TRUNCATE` to remove all data in a table\\r\\n  - `COMMENT` to add a text comment to a table or column\\r\\n\\r\\n### Numeric Data Types: Integers\\r\\n\\r\\nPostgres offers three varieties of integers that vary only by the range of numbers they can represent:\\r\\n\\r\\n- `SMALLINT`: -32,768 to +32,767\\r\\n- `INTEGER`: -2,147,483,648 to +2,147,483,647\\r\\n- `BIGINT`: -9,223,372,036,854,775,808 to +9,223,372,036,854,775,807\\r\\n\\r\\nThese are mirrored by three \\"serial\\" types, which are only integers, but where the values can be automatically managed by Postgres. These are respectively `SMALLSERIAL`, `SERIAL`, and `BIGSERIAL`.\\r\\n\\r\\nWhen using a `SERIAL` type, if we don\'t give it a value when inserting data, Postgres will automatically generate the next integer in sequence, until the sequence is exhausted based on the range of serial we chose (small, regular, or big).\\r\\n\\r\\n### Text Data Types\\r\\n\\r\\nPostgres offers two kinds of text data types: fixed-length, and variable length.\\r\\n\\r\\nVariable-length data types are `VARCHAR(n)` \u2014 where the limit part, `(n)`, is optional \u2014 and `TEXT`, which offers no limit. Internally, they are stored in exactly the same way, so `VARCHAR` without limit is the same as `TEXT`. The `VARCHAR` type can also be written as `CHARACTER VARYING`, and it\'s exactly the same.\\r\\n\\r\\nThe fixed-length type is written `CHAR(n)` or `CHARACTER(n)`. When the `(n)` limit part is not used, it stores *only one character*. `CHAR` is used less often than its variable length counterparts, because it\'s less agile: even in cases where you might think that a column will always accept entries of the same length, future business requirements might change, and by then you could have millions of records in a table with a `CHAR` column, making it lengthy to change the limit. If you store a value less than the limit, `CHAR` will pad the remaining characters with spaces to make it the same length.\\r\\n\\r\\n### Date/Time Data Types\\r\\n\\r\\nWhen you write out a date, e.g. \\"2018-05-06\\", you might think of it as a simple string. As such, you might be compelled to use the `VARCHAR` type in order to store dates and times, and in the vast majority of cases, you\'d be making a big oversight!\\r\\n\\r\\nPostgres\' date and time types are rich, and allow not only to store these values, but also, as we\'ll see in the next lesson, to manipulate them using a wide array of date/time functions.\\r\\n\\r\\nWhen storing dates and times, it\'s always important to be mindful of the timezones: both that of your users as well as that of the database server which is storing the data. Postgres handles time zones very elegantly, and allows you to store these values relative to a timezone, or absolutely. Both have their usages.\\r\\n\\r\\n## DML\\r\\n\\r\\n- Delved deeper into designing proper, normalized relational schemas\\r\\n- Created and modified table structures\\r\\n- Added, modified and deleted data from tables with `INSERT`, `UPDATE` and `DELETE`\\r\\n- Learned to use ACID Transactions\\r\\n\\r\\n## Constraints\\r\\n\\r\\nIn this lesson, we\'ve looked at database constraints as a way to make data more consistent and in line with business requirements. We\'ve seen:\\r\\n\\r\\n- Unique constraints, which prevent duplicate values for a given column or columns, except for `NULL` which is allowed to appear many times.\\r\\n- Not null constraints, which prevent a column from containing the value `NULL`.\\r\\n- Primary key constraints, which, in addition to being a combination of Unique and Not Null constraints, are special: there can only be one per table, it\'s the official column or set of columns to uniquely identify a row in that table, and it\'s the default column(s) that will be used when setting up a foreign key constraint referencing that table.\\r\\n- Foreign key constraints, which restrict values in a column to only those values present in another column. They maintain what we called \\"referential integrity\\".\\r\\n- Check constraints, which can be used to implement custom checks against data that gets added or modified in our tables.\\r\\n\\r\\n## Index\\r\\n\\r\\nusing the syntax `CREATE INDEX ON table_name (column_name)` --\x3e"},{"id":"/2024/1/21/SQL-cheatsheet","metadata":{"permalink":"/2024/1/21/SQL-cheatsheet","editUrl":"https://github.com/nhonvo/nhonvo.github.io/edit/main/blog/blog/2024-1-21-SQL-cheatsheet.md","source":"@site/blog/2024-1-21-SQL-cheatsheet.md","title":"SQL FOR EVERYONE - THE DEFINITIVE GUIDE","description":"Introduction to SQL","date":"2024-01-21T12:00:00.000Z","formattedDate":"January 21, 2024","tags":[{"label":"sql","permalink":"/tags/sql"},{"label":"sqlserver","permalink":"/tags/sqlserver"}],"readingTime":9.37,"hasTruncateMarker":false,"authors":[{"name":"Truong Nhon"}],"frontMatter":{"layout":"post","title":"SQL FOR EVERYONE - THE DEFINITIVE GUIDE","subtitle":"SQL Essentials Part 4","date":"2024-01-21T12:00:00.000Z","author":"Truong Nhon","hidden":false,"published":true,"multilingual":false,"catalog":true,"lang":"en","tags":["sql","sqlserver"]},"prevItem":{"title":"Design-database","permalink":"/2024/2/6/Design-database"},"nextItem":{"title":"Exploring Dynamic Distance Calculation with Delegates: A Proof of Concept","permalink":"/2024/1/18/Delegate"}},"content":"## Introduction to SQL\\r\\n\\r\\nSQL is a standard language designed for managing data in relational databases. It\'s commonly used to query, insert, update, and modify data. Most RDBMS (Relational Database Management System) like MySQL, SQLite, Oracle, and PostgreSQL use SQL.\\r\\n\\r\\nAs a data analyst, you\'ll often work with large volumes of data stored in these databases. SQL becomes an essential tool to retrieve, manipulate, and analyze this data.\\r\\n\\r\\n### 1.1 RDBMS and Tables\\r\\n\\r\\nIn SQL, data is stored in tables, just like an Excel spreadsheet. A table is made up of rows (records) and columns (fields). Here\'s an example of a table, Employees:\\r\\n\\r\\n| EmployeeID | FirstName | LastName | Position |\\r\\n| ---------- | --------- | -------- | -------- |\\r\\n| 1          | John      | Doe      | Analyst  |\\r\\n| 2          | Jane      | Doe      | Engineer |\\r\\n| 3          | Mary      | Johnson  | Manager  |\\r\\n\\r\\n## 2. Basic SQL Syntax\\r\\n\\r\\nLet\'s look at the fundamental SQL commands: `SELECT, FROM, WHERE, GROUP BY, HAVING, and ORDER BY.`\\r\\n\\r\\n### 2.1 SELECT and FROM\\r\\n\\r\\nThe `SELECT` statement is used to select data from a database, and the `FROM`statement specifies which table to get the data from.\\r\\n\\r\\n```sql\\r\\nSELECT FirstName, LastName \\r\\nFROM Employees; \\r\\n```\\r\\n\\r\\nThis query retrieves all first and last names from the Employees table. If you want to select all columns, use the * symbol:\\r\\n\\r\\n```sql\\r\\nSELECT * FROM Employees; \\r\\n```\\r\\n\\r\\n### 2.2 WHERE\\r\\n\\r\\nThe `WHERE` clause is used to filter records:\\r\\n\\r\\n```sql\\r\\nSELECT * \\r\\nFROM Employees \\r\\nWHERE Position = \'Analyst\'; \\r\\n```\\r\\n\\r\\nThis query retrieves all data for employees who are analysts.\\r\\n\\r\\n### 2.3 GROUP BY and HAVING\\r\\n\\r\\n`GROUP BY` groups rows that have the same values in specified columns into aggregated data. `HAVING` is used instead of WHERE with aggregated data.\\r\\n\\r\\n```sql\\r\\nSELECT Position, COUNT(*) \\r\\nFROM Employees \\r\\nGROUP BY Position \\r\\nHAVING COUNT(*) > 1; \\r\\n```\\r\\n\\r\\nThis query shows positions held by more than one employee.\\r\\n\\r\\n### 2.4 ORDER BY\\r\\n\\r\\n`ORDER BY` is used to sort the data in ascending or descending order:\\r\\n\\r\\n```sql\\r\\nSELECT * \\r\\nFROM Employees \\r\\nORDER BY LastName ASC; \\r\\n```\\r\\n\\r\\nThis query sorts employees by their last name in ascending order.\\r\\n\\r\\n## 3. Querying Data\\r\\n\\r\\nThe SELECT statement is not just for selecting simple rows. We can use it to perform calculations, concatenations, and more.\\r\\n\\r\\n```sql\\r\\nSELECT FirstName || \' \' || LastName as FullName, Position\\r\\nFROM Employees;\\r\\nThis query concatenates the first and last names, separated by a space, and displays it as FullName.\\r\\n```\\r\\n\\r\\n## 4. Filtering and Sorting Data\\r\\n\\r\\nApart from `WHERE` and `ORDER BY`, SQL offers `BETWEEN`, `LIKE`, and `IN `to filter data.\\r\\n\\r\\n### 4.1 BETWEEN\\r\\n\\r\\n`BETWEEN` is used to filter by a range:\\r\\n\\r\\n```sql\\r\\nSELECT * \\r\\nFROM Orders \\r\\nWHERE OrderDate BETWEEN \'2023-01-01\' AND \'2023-12-31\'; \\r\\n```\\r\\n\\r\\nThis query selects all orders placed in the year 2023.\\r\\n\\r\\n### 4.2 LIKE and ILIKE\\r\\n\\r\\n`LIKE` is used in a `WHERE` clause to search for a specified pattern in a column. The \\"%\\" sign is used to define wildcards (missing letters) both before and after the pattern. Also, note that `LIKE` is case sensitive. `ILIKE` can be used for case-insensitive search.\\r\\n\\r\\n```sql\\r\\nSELECT * \\r\\nFROM Employees \\r\\nWHERE FirstName LIKE \'J%\'; \\r\\n```\\r\\n\\r\\nThis query selects all employees with a first name starting with \'J\'.\\r\\n\\r\\n### 4.3 IN\\r\\n\\r\\nIN allows you to specify multiple values in a `WHERE` clause:\\r\\n\\r\\n```sql\\r\\nSELECT * \\r\\nFROM Employees \\r\\nWHERE Position IN (\'Analyst\', \'Engineer\'); \\r\\n```\\r\\n\\r\\nThis query selects all analysts and engineers.\\r\\n\\r\\n## 5. Joining Tables\\r\\n\\r\\n`JOIN` statements are used to combine rows from two or more tables based on a related column. The different types of joins include `INNER JOIN, LEFT (OUTER) JOIN, RIGHT (OUTER) JOIN, and FULL (OUTER) JOIN`.\\r\\nConsider this additional table, Departments:\\r\\n\\r\\n| DepartmentID | DepartmentName |\\r\\n| :----------: | -------------- |\\r\\n|      1       | IT             |\\r\\n|      2       | Sales          |\\r\\n|      3       | HR             |\\r\\n\\r\\nAnd suppose we add a DepartmentID field to the Employees table. Here\'s how we can use different types of joins:\\r\\n\\r\\n### 5.1 INNER JOIN\\r\\n\\r\\n```sql\\r\\nSELECT Employees.LastName, Employees.FirstName, Departments.DepartmentName \\r\\nFROM Employees\\r\\nINNER JOIN Departments ON Employees.DepartmentID = Departments.DepartmentID; \\r\\n```\\r\\n\\r\\nThis query retrieves the list of employees along with their respective department names.\\r\\n\\r\\n- JOIN More Than 2 Tables\\r\\n\\r\\n```sql\\r\\n-- Example of INNER JOIN with 3 tables\\r\\nSELECT c.CustomerID, c.FullName, o.FoodName, d.FullAddress\\r\\nFROM Customer c\\r\\nINNER JOIN CustomerOrder o ON c.CustomerID = o.CustomerID\\r\\nINNER JOIN DeliveryAddress d ON d.ID = o.DeliveryAddressID;\\r\\n```\\r\\n\\r\\nExtending the concept of INNER JOIN to involve three tables for a more comprehensive result set.\\r\\n\\r\\n### 5.2 LEFT (OUTER) JOIN\\r\\n\\r\\n```sql\\r\\nSELECT Employees.LastName, Employees.FirstName, Departments.DepartmentName FROM Employees\\r\\nLEFT JOIN Departments ON Employees.DepartmentID = Departments.DepartmentID; \\r\\n```\\r\\n\\r\\nThis query retrieves all employees and their departments, including employees with no department (the DepartmentName for them will be NULL).\\r\\n\\r\\n### 5.3 RIGHT (OUTER) JOIN\\r\\n\\r\\n```sql\\r\\nSELECT Employees.LastName, Employees.FirstName, Departments.DepartmentName FROM Employees\\r\\nRIGHT JOIN Departments ON Employees.DepartmentID = Departments.DepartmentID; \\r\\n```\\r\\n\\r\\nThis query retrieves all departments and their employees, including departments with no employees.\\r\\n\\r\\n### 5.4 FULL (OUTER) JOIN\\r\\n\\r\\n```sql\\r\\nSELECT Employees.LastName, Employees.FirstName, Departments.DepartmentName FROM Employees\\r\\nFULL JOIN Departments ON Employees.DepartmentID = Departments.DepartmentID; \\r\\n```\\r\\n\\r\\nThis query retrieves all combinations of employees and departments, including employees with no department and departments with no employees.\\r\\n\\r\\n## 6. Aggregation Functions\\r\\n\\r\\nSQL provides several functions to perform calculations on data, such as `COUNT(), SUM(), AVG(), MIN(), MAX(), and GROUP_CONCAT().`\\r\\n\\r\\n```sql\\r\\nSELECT COUNT(*) \\r\\nFROM Orders \\r\\nWHERE OrderDate BETWEEN \'2023-01-01\' AND \'2023-12-31\'; \\r\\n```\\r\\n\\r\\nThis query returns the total number of orders placed in the year 2023.\\r\\n\\r\\n## 7. Subqueries and Nested Queries\\r\\n\\r\\nA subquery is a SQL query nested inside a larger query. A subquery may occur in:\\r\\n\\r\\n- A SELECT clause\\r\\n- A FROM clause\\r\\n- A WHERE clause\\r\\nThe subquery can be nested inside a `SELECT, INSERT, UPDATE, or DELETE` statement or inside another subquery.\\r\\n\\r\\n```sql\\r\\nSELECT EmployeeID, FirstName, Position \\r\\nFROM Employees \\r\\nWHERE EmployeeID IN (SELECT EmployeeID FROM Orders WHERE OrderTotal > 1000); \\r\\n```\\r\\n\\r\\nThis query selects all employees who have made orders totaling more than 1000.\\r\\n\\r\\n## 8. Modifying Database Information\\r\\n\\r\\nSQL allows you to insert, update, and delete data with INSERT, UPDATE, and DELETE commands respectively. Be careful when using these commands as you can change your data permanently.\\r\\n\\r\\n### 8.1 INSERT\\r\\n\\r\\n```sql\\r\\nINSERT INTO Employees (EmployeeID, FirstName, LastName, Position) VALUES (4, \'Mark\', \'Anderson\', \'Analyst\'); \\r\\n```\\r\\n\\r\\nThis query adds a new row to the Employees table.\\r\\n\\r\\n### 8.2 UPDATE\\r\\n\\r\\n```sql\\r\\nUPDATE Employees \\r\\nSET Position = \'Senior Analyst\' \\r\\nWHERE EmployeeID = 4; \\r\\n```\\r\\n\\r\\nThis query changes Mark Anderson\'s position to Senior Analyst.\\r\\n\\r\\n### 8.3 DELETE\\r\\n\\r\\n```sql\\r\\nDELETE FROM Employees WHERE EmployeeID = 4; \\r\\n```\\r\\n\\r\\nThis query deletes Mark Anderson\'s record from the Employees table.\\r\\n\\r\\n## 9. Advanced SQL Techniques\\r\\n\\r\\nLet\'s delve into more complex techniques with the help of examples.\\r\\n\\r\\n### 9.1 Handling NULL values\\r\\n\\r\\nNULL value in SQL means no or zero value. Here\'s how you can use `IS NULL` and `IS NOT NULL`:\\r\\n\\r\\n```sql\\r\\nSELECT * \\r\\nFROM Employees \\r\\nWHERE DepartmentID IS NULL; \\r\\n```\\r\\n\\r\\nThis query selects all employees who don\'t belong to any department.\\r\\n\\r\\n```sql\\r\\nSELECT * \\r\\nFROM Employees \\r\\nWHERE DepartmentID IS NOT NULL; \\r\\n```\\r\\n\\r\\nThis query selects all employees who belong to a department.\\r\\n\\r\\n### 9.2 String Functions\\r\\n\\r\\nSQL offers several functions to manipulate strings. Some examples include:\\r\\n\\r\\n- `CONCAT()`: Concatenates two or more strings.\\r\\n- `TRIM()`: Removes leading and trailing spaces of a string. \\r\\n- `LENGTH()`: Returns the length of a string.\\r\\n\\r\\n```sql\\r\\nSELECT CONCAT(FirstName, \' \', LastName) as FullName, TRIM(Position), LENGTH(FirstName) as NameLength \\r\\nFROM Employees;\\r\\n```\\r\\n\\r\\nThis query retrieves a full name by combining first and last names, the position after removing leading and trailing spaces, and the length of the first name.\\r\\n\\r\\n### 9.3 Date and Time Functions\\r\\n\\r\\nSQL provides many functions to work with date and time. Some examples include:\\r\\n\\r\\n- `NOW()`: Returns the current date and time.\\r\\n- `CURDATE()`: Returns the current date.\\r\\n- `CURTIME()`: Returns the current time.\\r\\n\\r\\n```sql\\r\\nSELECT OrderID, OrderTotal, NOW() as QueryTime \\r\\nFROM Orders \\r\\nWHERE OrderDate = CURDATE(); \\r\\n```\\r\\n\\r\\nThis query retrieves today\'s orders along with the query execution time.\\r\\n\\r\\n### 9.4 Case Statements\\r\\n\\r\\nCase statements help in implementing conditional logic in SQL:\\r\\n\\r\\n```sql\\r\\nSELECT FirstName, Position, \\r\\nCASE \\r\\nWHEN Position = \'Analyst\' THEN \'Junior Level\' \\r\\nWHEN Position = \'Engineer\' THEN \'Mid Level\' \\r\\nELSE \'Senior Level\' \\r\\nEND as JobLevel \\r\\nFROM Employees; \\r\\n```\\r\\n\\r\\nThis query categorizes employees into job levels based on their positions.\\r\\n\\r\\n### 9.5 Window Functions\\r\\n\\r\\nWindow functions perform calculations across a set of table rows that are related to the current row:\\r\\n\\r\\n```sql\\r\\nSELECT FirstName, Position, Salary, \\r\\nRANK() OVER (PARTITION BY Position ORDER BY Salary DESC) as Rank FROM Employees;\\r\\n```\\r\\n\\r\\nThis query ranks employees within their respective positions based on their salaries.\\r\\n\\r\\n## Optimization and Performance Tuning\\r\\n\\r\\nHere are some examples demonstrating SQL optimization techniques:\\r\\n\\r\\n### 10.1 EXPLAIN\\r\\n\\r\\nMost SQL databases support the EXPLAIN command, which shows the execution plan of an SQL statement. This can help you understand how your SQL query will be executed and where you can optimize it.\\r\\n\\r\\n```sql\\r\\nEXPLAIN SELECT * FROM Employees; \\r\\n```\\r\\n\\r\\n### 10.2 Avoid SELECT\\r\\n\\r\\nRather than using SELECT *, specify the columns you need. This reduces the amount of data that needs to be read from the disk.\\r\\n\\r\\n```sql\\r\\nSELECT FirstName, LastName FROM Employees; \\r\\n```\\r\\n\\r\\n### 10.3 Use LIMIT\\r\\n\\r\\nIf you only need a specific number of rows, use LIMIT to prevent reading unnecessary data.\\r\\n\\r\\n```sql\\r\\nSELECT * FROM Employees ORDER BY Salary DESC LIMIT 10; \\r\\n```\\r\\n\\r\\nThis query gets the top 10 employees with the highest salaries. 10.4 Index your data\\r\\nIndexing your data can significantly speed up data retrieval times. Here\'s how you can add an index:\\r\\n\\r\\n```sql\\r\\nCREATE INDEX idx_employees_position ON Employees(Position); \\r\\n```\\r\\n\\r\\n## What\'s Next?\\r\\n\\r\\n1. **Practice, practice, practice**: The best way to reinforce your SQL skills is by practicing. Websites like LeetCode, HackerRank, and SQLZoo provide hundreds of SQL problems that you can practice with.\\r\\n2. **Learn Database Design**: Understanding how databases are structured and designed will help you write better and more efficient SQL queries. Look into topics such as normalization, entity-relationship models, and data integrity.\\r\\n3. **Explore Advanced SQL Topics**: This tutorial covered the basics, but there\'s still a lot to learn. Delve into more advanced topics like stored procedures, triggers, views, and transaction control.\\r\\n4. **Learn About Database Administration**: Although not typically part of a Data Analyst\'s role, understanding how a database is administered can provide useful context. This can also open up new opportunities in the realm of database management.\\r\\n5. **Understand SQL in the context of a programming language**: If you are familiar with a programming language like Python or R, try to use SQL commands within these languages. This often gives you more flexibility and allows you to perform more complex operations with your data.\\r\\n6. **Learn About Different SQL Databases**: There are many different SQL databases, such as MySQL, SQLite, PostgreSQL, and Oracle. Each has its own unique features and syntax nuances. Familiarize yourself with the one that\'s most relevant to your work or interests.\\r\\n7. **Apply SQL in Your Projects**: The ultimate test of your skills will be applying SQL in your projects. Whether it\'s for cleaning data, data wrangling, or analysis, the practical application of SQL will solidify your learning and give you valuable experience.\\r\\nRemember, becoming proficient in SQL is a journey, not a destination. Enjoy the process of learning and experimenting. Happy querying!"},{"id":"/2024/1/18/Delegate","metadata":{"permalink":"/2024/1/18/Delegate","editUrl":"https://github.com/nhonvo/nhonvo.github.io/edit/main/blog/blog/2024-1-18-Delegate.md","source":"@site/blog/2024-1-18-Delegate.md","title":"Exploring Dynamic Distance Calculation with Delegates: A Proof of Concept","description":"Welcome to our latest project - a Proof of Concept (PoC) repository that explores dynamic distance calculation using delegates. In this blog post, we\'ll take you through the features, the motivation behind the project, and how you can experiment with dynamic resolution of distance calculation services in a web API.","date":"2024-01-18T12:00:00.000Z","formattedDate":"January 18, 2024","tags":[{"label":"c#","permalink":"/tags/c"},{"label":"delegate","permalink":"/tags/delegate"}],"readingTime":1.66,"hasTruncateMarker":false,"authors":[{"name":"Truong Nhon"}],"frontMatter":{"layout":"post","title":"Exploring Dynamic Distance Calculation with Delegates: A Proof of Concept","subtitle":"","date":"2024-01-18T12:00:00.000Z","author":"Truong Nhon","hidden":false,"published":true,"multilingual":false,"catalog":true,"lang":"en","tags":["c#","delegate"]},"prevItem":{"title":"SQL FOR EVERYONE - THE DEFINITIVE GUIDE","permalink":"/2024/1/21/SQL-cheatsheet"},"nextItem":{"title":"Entity framework core","permalink":"/2024/1/18/EF-core"}},"content":"Welcome to our latest project - a Proof of Concept (PoC) repository that explores dynamic distance calculation using delegates. In this blog post, we\'ll take you through the features, the motivation behind the project, and how you can experiment with dynamic resolution of distance calculation services in a web API.\\r\\n\\r\\n## **Why Delegates?**\\r\\n\\r\\nDelegates in C# are powerful constructs that allow us to treat methods as first-class citizens. Leveraging this capability, our PoC demonstrates how to dynamically resolve distance calculation services at runtime. This flexibility opens the door to easily switch between different providers based on specific conditions or user preferences.\\r\\n\\r\\n## **Key Features**\\r\\n\\r\\n### **Dynamic Resolution with Delegates**\\r\\n\\r\\nThe heart of this project lies in the `DistanceCalculator` class, which uses a delegate (`DistanceProviderResolver`) to dynamically resolve the distance calculation service. This allows us to switch between Google and PCMiler providers with ease, providing a seamless and extensible solution.\\r\\n\\r\\n```csharp\\r\\nvar distanceCalculator = new DistanceCalculator();\\r\\nvar distanceService = distanceCalculator.ResolveDistanceProvider(DistanceProvider.Google);\\r\\ndouble distance = distanceService.CalculateDistance(\\"Origin\\", \\"Destination\\");\\r\\n```\\r\\n\\r\\n### **Configurability**\\r\\n\\r\\nExperiment with different distance calculation providers by customizing the `Program.cs` file. This configurability makes it easy to adapt the PoC to various scenarios and requirements.\\r\\n\\r\\n## **Limitations and Roadmap**\\r\\n\\r\\nAs a Proof of Concept, it\'s important to note that this project currently uses simulated distance calculation logic with dummy values. While it showcases the concept effectively, it may lack certain features expected in a production-ready application.\\r\\n\\r\\nWe encourage you to explore, experiment, and contribute. If you encounter issues or have ideas for improvements, please open an issue on our GitHub repository.\\r\\n\\r\\n## Demo\\r\\n\\r\\n**Clone the Repository** :\\r\\n\\r\\n```bash\\r\\ngit clone https://github.com/nhonvo/delegate-poc.git\\r\\ncd delegate-poc\\r\\n```\\r\\n\\r\\n## **Conclusion**\\r\\n\\r\\nDynamic distance calculation with delegates offers a glimpse into the world of flexible and configurable service resolution. We hope this PoC sparks ideas and discussions about how such a concept could be integrated into real-world applications.\\r\\n\\r\\nFeel free to dive into the code, contribute your insights, and join us on this exploration of dynamic resolution in C#.\\r\\n\\r\\nHappy coding!"},{"id":"/2024/1/18/EF-core","metadata":{"permalink":"/2024/1/18/EF-core","editUrl":"https://github.com/nhonvo/nhonvo.github.io/edit/main/blog/blog/2024-1-18-EF-core.md","source":"@site/blog/2024-1-18-EF-core.md","title":"Entity framework core","description":"Introduction","date":"2024-01-18T12:00:00.000Z","formattedDate":"January 18, 2024","tags":[{"label":"c#","permalink":"/tags/c"},{"label":"database","permalink":"/tags/database"}],"readingTime":2.16,"hasTruncateMarker":false,"authors":[{"name":"Truong Nhon"}],"frontMatter":{"layout":"post","title":"Entity framework core","subtitle":"","date":"2024-01-18T12:00:00.000Z","author":"Truong Nhon","hidden":false,"published":true,"multilingual":false,"catalog":true,"lang":"en","tags":["c#","database"]},"prevItem":{"title":"Exploring Dynamic Distance Calculation with Delegates: A Proof of Concept","permalink":"/2024/1/18/Delegate"},"nextItem":{"title":"Exploring MongoDB and mongosh in Bash","permalink":"/2024/1/1/Exploring-MongoDB-and-mongosh-in-Bash-Senior-note"}},"content":"## Introduction\\r\\n\\r\\n- Entity Framework Core is an ORM framework, open-source, lightweight and cross-platform  developed by Microsoft.\\r\\n- It enables developers to work with databases using .NET object and EF Core is built on top of ADO.NET\\r\\n\\r\\n## Relationship\\r\\n\\r\\n### One-to-One Relationship\\r\\n\\r\\n```csharp\\r\\nmodelBuilder.Entity<Author>()\\r\\n    .HasOne(a => a.Book)           // Author has one Book\\r\\n    .WithOne(b => b.Author)        // Book has one Author\\r\\n    .HasForeignKey<Book>(b => b.AuthorId);  // Foreign key in Book referencing AuthorId\\r\\n```\\r\\n\\r\\n### One-to-Many Relationship\\r\\n\\r\\n```csharp\\r\\nmodelBuilder.Entity<Author>()\\r\\n    .HasMany(a => a.Books)         // Author has many Books\\r\\n    .WithOne(b => b.Author)        // Book has one Author\\r\\n    .HasForeignKey(b => b.AuthorId);       // Foreign key in Book referencing AuthorId\\r\\n```\\r\\n\\r\\n### Many-to-Many Relationship\\r\\n\\r\\n```csharp\\r\\nmodelBuilder.Entity<StudentCourse>()\\r\\n    .HasKey(sc => new { sc.StudentId, sc.CourseId });   // Define composite primary key for the join table\\r\\n\\r\\nmodelBuilder.Entity<StudentCourse>()\\r\\n    .HasOne(sc => sc.Student)\\r\\n    .WithMany(s => s.Courses)\\r\\n    .HasForeignKey(sc => sc.StudentId);  // Foreign key in join table referencing StudentId\\r\\n\\r\\nmodelBuilder.Entity<StudentCourse>()\\r\\n    .HasOne(sc => sc.Course)\\r\\n    .WithMany(c => c.Students)\\r\\n    .HasForeignKey(sc => sc.CourseId);  // Foreign key in join table referencing CourseId\\r\\n```\\r\\n\\r\\n## DeleteBehavior\\r\\n\\r\\nThe `DeleteBehavior` enum in EF Core includes the following options:\\r\\n\\r\\n1. **Cascade:** Deleting the principal/parent entity will cause the dependent/child entities to be deleted as well. `OnDelete(DeleteBehavior.Cascade)`\\r\\n\\r\\n2. **SetNull:** Deleting the principal/parent entity will set the foreign key properties in the dependent/child entities to null. `OnDelete(DeleteBehavior.SetNull)`\\r\\n\\r\\n3. **SetDefault:** Deleting the principal/parent entity will set the foreign key properties in the dependent/child entities to their default values. `OnDelete(DeleteBehavior.SetDefault)`\\r\\n\\r\\n4. **Restrict:** Prevents the deletion of the principal/parent entity if there are dependent/child entities. `OnDelete(DeleteBehavior.Restrict)`  . An exception will be thrown.\\r\\n\\r\\n5. **NoAction:** Similar to `Restrict`, it is used to specify no action on delete. `OnDelete(DeleteBehavior.NoAction)` and you\'ll need to handle constraints in your application logic.\\r\\n\\r\\nFor example:\\r\\n\\r\\n```csharp\\r\\nmodelBuilder.Entity<ParentEntity>()\\r\\n    .HasMany(p => p.ChildEntities)\\r\\n    .WithOne(c => c.ParentEntity)\\r\\n    .OnDelete(DeleteBehavior.Restrict);\\r\\n```\\r\\n\\r\\nThis configuration would set the delete behavior for the relationship between `ParentEntity` and `ChildEntity` to `Restrict`.\\r\\n\\r\\n## Best pratices\\r\\n\\r\\n1. **Indexing**: Creating indexes on frequently accessed columns can improve query performance.\\r\\n\\r\\n2. **Proper data modeling**: Designing tables and relationships properly can improve query performance and prevent performance issues.\\r\\n\\r\\n3. **Caching**: Storing frequently accessed data in a cache can reduce database calls and improve application performance.\\r\\n\\r\\n4. **Query optimization**: Writing efficient queries can improve performance. Techniques such as avoiding unnecessary joins and reducing the number of returned columns can help.\\r\\n\\r\\n5. **Connection pooling**: Reusing database connections instead of creating new ones can improve performance.\\r\\n\\r\\n6. **Batch processing**: Performing multiple operations in a single database call can improve performance and reduce overhead.\\r\\n\\r\\n7. **Asynchronous programming**: Using asynchronous programming techniques can improve performance by allowing the application to continue executing while waiting for database calls to complete."},{"id":"/2024/1/1/Exploring-MongoDB-and-mongosh-in-Bash-Senior-note","metadata":{"permalink":"/2024/1/1/Exploring-MongoDB-and-mongosh-in-Bash-Senior-note","editUrl":"https://github.com/nhonvo/nhonvo.github.io/edit/main/blog/blog/2024-1-1-Exploring-MongoDB-and-mongosh-in-Bash-Senior-note.md","source":"@site/blog/2024-1-1-Exploring-MongoDB-and-mongosh-in-Bash-Senior-note.md","title":"Exploring MongoDB and mongosh in Bash","description":"Are you ready to dive into the world of MongoDB and its powerful shell, mongosh? Let\'s begin our journey by learning how to install mongosh.","date":"2024-01-01T12:00:00.000Z","formattedDate":"January 1, 2024","tags":[{"label":"mongodb","permalink":"/tags/mongodb"},{"label":"database","permalink":"/tags/database"}],"readingTime":5.08,"hasTruncateMarker":false,"authors":[{"name":"Truong Nhon"}],"frontMatter":{"layout":"post","title":"Exploring MongoDB and mongosh in Bash","subtitle":"Associate developer MongoDB C# certificate exam","date":"2024-01-01T12:00:00.000Z","author":"Truong Nhon","hidden":false,"published":true,"catalog":true,"lang":"en","tags":["mongodb","database"]},"prevItem":{"title":"Entity framework core","permalink":"/2024/1/18/EF-core"},"nextItem":{"title":"gitflow-and-githubflow","permalink":"/2023/12/31/gitflow-and-githubflow"}},"content":"Are you ready to dive into the world of MongoDB and its powerful shell, mongosh? Let\'s begin our journey by learning how to install mongosh.\\r\\n\\r\\n## MongoDB Node.js Driver - Connection String Options\\r\\n\\r\\nMongoDB supports various connection string options, including:\\r\\n\\r\\n- MaxPoolSize\\r\\n- MinPoolSize\\r\\n- maxIdleTimeMS\\r\\n\\r\\n## MongoDB Data Types - BSON Types\\r\\n\\r\\nMongoDB uses BSON types to represent data. Here are some key BSON types:\\r\\n\\r\\n- Double: MongoDB uses Double; there is no Float.\\r\\n- String\\r\\n- Object\\r\\n- 32-Integer\\r\\n- 64-Integer\\r\\n- ObjectId\\r\\n- Boolean\\r\\n- Date\\r\\n- Timestamp\\r\\n- Decimal128\\r\\n- Array\\r\\n\\r\\nData types ObjectId init from timestamp, increment, machineId, randomNumber\\r\\n\\r\\n### Querying MongoDB\\r\\n\\r\\nMongoDB provides powerful querying capabilities. Let\'s explore some query operations:\\r\\n\\r\\n1. `Collection.findOne(query, options)`\\r\\n\\r\\n2. `Collection.find().project().sort().skip().limit().count()`\\r\\n\\r\\n- Comparison: The following operators can be used in queries to compare values: `{field:{operator:value}}`\\r\\n  - $eq: Values are equal\\r\\n  - $ne: Values are not equal\\r\\n  - $gt: Value is greater than another value\\r\\n  - $gte: Value is greater than or equal to another value\\r\\n  - $lt: Value is less than another value\\r\\n  - $lte: Value is less than or equal to another value\\r\\n  - $in: Value is matched within an array `{\\"salary\\":{$in:[5,10]}}`\\r\\n  - $nin: Value not in\\r\\n  - `$all`: find in an array all elements matching in finding [\'Smartphones\', \'iOS\']\\r\\n\\r\\nEg: `db.trips.find({\\"id\\":{$in:[1,20]}})`\\r\\n\\r\\n- Logical: The following operators can logically compare multiple queries. `operator:[{condition1},{condition2},..]`\\r\\n  - $and: Returns documents where both queries match\\r\\n  - $or: Returns documents where either query matches\\r\\n  - $nor: Returns documents where both queries fail to match\\r\\n  - $not: Returns documents where the query does not match\\r\\n\\r\\nEg: `db.trips.find({$or:[\\"id\\":{$gt:10},\\"price\\":{$lt:19}]})`\\r\\n\\r\\nEvaluation: The following operators assist in evaluating documents.\\r\\n\\r\\n- $regex: Allows the use of regular expressions when evaluating field values\\r\\n- $text: Performs a text search\\r\\n- $where: Uses a JavaScript expression to match documents\\r\\n\\r\\n- `$expr`: `$expr: {operator:[field, value]}`\\r\\n- `$elemMatch`: find an object in an array of objects only, cannot find in a field ot an array\\r\\n- `$size`: find the number of elements in an array `{$scores: {$size: 6}}`\\r\\n\\r\\n1. `Collection.find().count()`\\r\\n\\r\\n2. `Collection.countDocuments()`\\r\\n\\r\\n3. `Collection.aggregate()`\\r\\n   1. `[{$match:{}}, {$group:{}}, {$sort: {}}, {$skip: 10}, {$limit}]`\\r\\n   2. Group: total, average\\r\\n   3. `Var pipeline = [state1, state2, state3]`\\r\\n   4. `{$count: \\"total\\"}`\\r\\n\\r\\n4. `Collection.listIndexes()`\\r\\n\\r\\n5. `Collection.countDocuments(query)`\\r\\n\\r\\n6. `FindAndModify(query:{}, update: {}, {new: true})`: new = true: return a modified document\\r\\n\\r\\n7. Expression: `db.movies.find({$expr:{$gt: [\\"$idbm.votes\\", \\"$year\\"]}})`\\r\\n\\r\\n8. `Db.products.find(\\"name\\":\\"Smartphone\\").count();`\\r\\n\\r\\n```javascript\\r\\n{\\r\\n  \\"customer.gender\\": \\"M\\",\\r\\n  items: {\\r\\n    $elemMatch: {\\r\\n      name: \'printer paper\'\\r\\n    }\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\n### Working with Documents - Insert, Update, and Delete\\r\\n\\r\\n- Inserting Documents\\r\\n\\r\\n- `Collection.insertOne(document, option)`: Option = { writeConcern: { w : \\"majority\\", wtimeout : 100 } }\\r\\n- `Db.insert({}, {returnId: true})`\\r\\n- `Db.insert([])`\\r\\n- `Collection.insertMany()`\\r\\n\\r\\n- Updating Documents\\r\\n\\r\\n- `Collection.updateOne(filter, update, option)`\\r\\n  - Filter = query\\r\\n  - Update = `{$set: {}} or {$inc: {balance: 1000}}`\\r\\n  - Update = `{$push: {readings: {v: 10, t: new Date()}}}`\\r\\n  - Option = `{upsert: true}` upsert not $upsert\\r\\n  \\r\\n- `Collection.update()`\\r\\n\\r\\n- `Collection.updateMany()`\\r\\n\\r\\n- `await salesCollection.updateMany({items: {$elemMatch: {name: \\"printer paper\\"}}},{$set: {\\"items.$.price\\": 20 }});`\\r\\n\\r\\n- Deleting Documents\\r\\n\\r\\n- `deleteMany(query)`: If the query = {} delete all documents in the collection\\r\\n- `deleteOne()`: return `({acknowledge:true, deleteCount: 1})`\\r\\n- `deleteMany().deletedCount`\\r\\n\\r\\n### MongoDB Indexing\\r\\n\\r\\nMongoDB offers various indexing options to optimize query performance:\\r\\n\\r\\n- Single Index\\r\\n\\r\\n- Compound Index\\r\\n\\r\\n- MultiKey Index\\r\\n\\r\\n- Unique Index vs Non-Unique Index\\r\\n\\r\\n- Sparse Index vs Non-Sparse Index\\r\\n\\r\\n- Geography index: `createIndex({locationField:\'2dsphere\'})`\\r\\n\\r\\n  - Example Query: You can perform geospatial queries using operators like $near, $geoWithin, $geoIntersects, and others to find documents based on their geographical proximity or containment.\\r\\n\\r\\n### MongoDB Aggregation Framework\\r\\n\\r\\nMongoDB\'s Aggregation Framework is a powerful tool for data transformation and analysis. Let\'s explore some aggregation stages:\\r\\n\\r\\n- `$match`\\r\\n- `$addFields`\\r\\n- `$group`\\r\\n- `$sample`: {size: 10} get random 10 documents\\r\\n- `$project: {total_avg: $round {number, place}}`\\r\\n- `$sortByCount: \\"$city\\"` => descending = $group $sort descending\\r\\n- `$lookup:{from: , localField:, foreignField, as:}`\\r\\n- `$out`: to another collection must be in the same database => Last stage only\\r\\n- `$bucketAuto :{groupBy: \\"$tripduration\\", buckets:5, output: {}}`\\r\\n- `$bucket: {groupBy:\\"$tripduration\\",boundaries: [10,100,1000,1000,100000], default: \\"other\\", output}`\\r\\n\\r\\n### Full Text Search in MongoDB\\r\\n\\r\\nMongoDB supports full-text search with various options for tokenization and fuzzy searching.\\r\\n\\r\\n## Static Search\\r\\n\\r\\n```json\\r\\n{\\r\\n  \\"mappings\\": {\\r\\n    \\"dynamic\\": false,\\r\\n    \\"fields\\": {\\r\\n      \\"company\\": {\\r\\n        \\"type\\": \\"string\\"\\r\\n      },\\r\\n      \\"title\\": {\\r\\n        \\"type\\": \\"string\\"\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\n## Tokenization and Fuzzy Options\\r\\n\\r\\n- EdgeGram beginning of the word\\r\\n- rightEdgeGram\\r\\n- nGram\\r\\n\\r\\nFuzzy option:\\r\\n\\r\\n- maxEdits\\r\\n- MaxExpansions\\r\\n- prefixLength\\r\\n\\r\\n## MongoDB Transactions\\r\\n\\r\\nMongoDB provides support for transactions, ensuring data consistency in complex operations.\\r\\n\\r\\n```javascript\\r\\n// Transaction\\r\\nSession startSession()\\r\\nUpdateOne({}, {$inc: {balance: -30}})\\r\\nCommitTransaction\\r\\nAbortTransaction\\r\\n```\\r\\n\\r\\n## MongoDB Sharding and Replica Set\\r\\n\\r\\nSharding and Replica Set are essential concepts for scaling and ensuring high availability in MongoDB.\\r\\n\\r\\n### Sharding\\r\\n\\r\\nSharding distributes data across multiple servers to improve read and write scalability.\\r\\n\\r\\n### Replica Set\\r\\n\\r\\nA Replica Set consists of multiple nodes with one primary node and two replicate nodes.\\r\\n\\r\\n## MongoDB Best Practices\\r\\n\\r\\nMongoDB offers various best practices and considerations for efficient data modeling and management.\\r\\n\\r\\n### Data Model Patterns\\r\\n\\r\\nThere are 12 data model patterns, including Computed Pattern, Attribute Pattern, Polymorphic pattern, Bucket, Outline, and others.\\r\\n\\r\\n### Capped Collection\\r\\n\\r\\n```javascript\\r\\ndb.createCollection(\\"\\", {capped: true, size: 10, max: 3})\\r\\n```\\r\\n\\r\\nCapped collection has a Limit size.\\r\\n\\r\\n### Read and Write Concern\\r\\n\\r\\n- Read Concern: Available, Majority, Local\\r\\n- Write Concern: Majority\\r\\n\\r\\n## MongoDB Views\\r\\n\\r\\nCreating and working with views in MongoDB:\\r\\n\\r\\n```javascript\\r\\nDb.createView(\\"view_name\\",\\"source_collection\\",[pipeline],collation)\\r\\nDb.createView(\\"name\\", \\"source\\", [])\\r\\n```\\r\\n\\r\\nCannot update to view.\\r\\n\\r\\n## MongoDB Administration and Tools\\r\\n\\r\\nMongoDB provides tools and commands for administrative tasks, backup, and restore.\\r\\n\\r\\n### mongorestore\\r\\n\\r\\nUse `mongorestore` to restore a dump file to MongoDB.\\r\\n\\r\\n### Cursor Method and Indexing\\r\\n\\r\\nChoose the appropriate cursor method, like `Cursor.hint()`, to force MongoDB to use a specific index for a query.\\r\\n\\r\\n## MongoDB Security\\r\\n\\r\\nEnsure the security of your MongoDB instance by understanding the importance of the \\"admin\\" database and controlling user access.\\r\\n\\r\\n## Conclusion\\r\\n\\r\\nIn conclusion, MongoDB offers a robust and flexible database solution with a wide range of features for efficient data management and querying. Understanding the various concepts and best practices will empower you to make the most out of MongoDB in your projects. Happy coding!"},{"id":"/2023/12/31/gitflow-and-githubflow","metadata":{"permalink":"/2023/12/31/gitflow-and-githubflow","editUrl":"https://github.com/nhonvo/nhonvo.github.io/edit/main/blog/blog/2023-12-31-gitflow-and-githubflow.md","source":"@site/blog/2023-12-31-gitflow-and-githubflow.md","title":"gitflow-and-githubflow","description":"\x3c!-- ---","date":"2023-12-31T00:00:00.000Z","formattedDate":"December 31, 2023","tags":[],"readingTime":4.49,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Exploring MongoDB and mongosh in Bash","permalink":"/2024/1/1/Exploring-MongoDB-and-mongosh-in-Bash-Senior-note"},"nextItem":{"title":"docker command","permalink":"/2023/12/29/docker-cheatsheet"}},"content":"\x3c!-- ---\\r\\ntitle: Gitflow and github flow\\r\\ndescription: L\u1eadp tr\xecnh c\u01a1 b\u1ea3n Cpp.\\r\\nslug: /git-flow/\\r\\nimage: https://i.imgur.com/mErPwqL.png\\r\\nhide_table_of_contents: false\\r\\nauthors:\\r\\n  - truongnhon\\r\\ntags: [git]\\r\\n---\\r\\n\\r\\ncompare gitflow and github flow\\r\\n\\r\\n## Gitflow\\r\\n\\r\\nGitflow is a branching model built around Git, defining a structured approach to managing branches for different purposes in larger projects. It consists of several key branches: `master`, `develop`, `feature`, `release`, and `hotfix`.\\r\\n\\r\\nMore information: [Gitflow Workflow | Atlassian Git Tutorial](https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow)\\r\\n\\r\\n<img src=\\"https://www.janbasktraining.com/community/uploads/b20ec99acd8ebafa76cf8d926540fea5.png\\" alt=\\"Would you be able to clarify the Gitflow process? - Learn & Grow with ...\\" style=\\"zoom:50%;\\" />\\r\\n\\r\\n### Pros\\r\\n\\r\\n- Structured branching model for managing larger projects.\\r\\n- Well-defined release process with versioning.\\r\\n- Clear separation of features, releases, and hotfixes.\\r\\n\\r\\n### Cons\\r\\n\\r\\n- Complexity, especially for smaller projects or teams.\\r\\n- Potential for longer release cycles.\\r\\n- Overhead in managing multiple branches.\\r\\n\\r\\n## GitHub Flow\\r\\n\\r\\nGitHub Flow, in contrast, is a simpler workflow emphasizing continuous delivery and frequent deployments. It revolves around a single main branch (`main` or `production`) and feature branches.\\r\\n\\r\\nMore information: [GitHub flow - GitHub Docs](https://docs.github.com/en/get-started/quickstart/github-flow)\\r\\n\\r\\n<img src=\\"https://velog.velcdn.com/images/fenjo/post/5a348eaa-fc61-468c-ad93-8eed0a8f984a/image.png\\" alt=\\"\ud611\uc5c5\uc744 \uc704\ud55c Git-flow / GitHub-flow / Git branch \uc0ac\uc6a9\ubc95\\" style=\\"zoom:50%;\\" />\\r\\n\\r\\n### Pros\\r\\n\\r\\n- Simplicity in its approach, suitable for smaller, agile teams.\\r\\n- Continuous deployment and quick iterations.\\r\\n- Flexibility for rapid feature development.\\r\\n\\r\\n### Cons\\r\\n\\r\\n- Might struggle with managing larger release cycles or complex projects.\\r\\n- Lack of a formal release process might cause confusion in some scenarios.\\r\\n- Limited in handling more structured release management needs.\\r\\n\\r\\n## Comparative Analysis\\r\\n\\r\\n### Suitability\\r\\n\\r\\n- Gitflow: Suited for larger projects with well-defined release cycles and structured development phases.\\r\\n- GitHub Flow: Ideal for smaller teams requiring rapid iterations and continuous deployment without complex branching.\\r\\n\\r\\n### Ease of Use\\r\\n\\r\\n- Gitflow: More complex due to multiple long-lived branches.\\r\\n- GitHub Flow: Simpler, with fewer branches and a straightforward process.\\r\\n\\r\\n### Adaptability\\r\\n\\r\\n- Gitflow: Less flexible due to its structured nature, but effective for projects following a more traditional release model.\\r\\n- GitHub Flow: Highly adaptable for agile teams and projects requiring frequent releases.\\r\\n\\r\\n### Recommendations\\r\\n\\r\\n- For larger projects with clear release cycles and a need for structured development phases, consider adopting Gitflow.\\r\\n- For smaller, agile teams focusing on rapid iterations and continuous deployment, GitHub Flow might be more suitable.\\r\\n\\r\\n## Demo\\r\\n\\r\\n### Gitflow Workflow Demo\\r\\n\\r\\n#### Setting Up Gitflow\\r\\n\\r\\nAssuming you have Git installed, to initialize Gitflow in a repository:\\r\\n\\r\\n1. Install Gitflow via command line:\\r\\n\\r\\n```bash\\r\\nbrew install git-flow\\r\\n# Using apt-get (Ubuntu)\\r\\nsudo apt-get install git-flow\\r\\n# Using Homebrew (Mac)\\r\\n```\\r\\n\\r\\n2. Initialize Gitflow in a Git repository:\\r\\n\\r\\n```bash\\r\\ngit flow init\\r\\n```\\r\\n\\r\\n#### Using Gitflow\\r\\n\\r\\n1. **Feature Development:**\\r\\n\\r\\n- Start a new feature:\\r\\n\\r\\n    ```bash\\r\\n    git flow feature start new-feature\\r\\n    ```\\r\\n\\r\\n- Develop your feature on this branch, committing changes as needed.\\r\\n\\r\\n2. **Feature Completion:**\\r\\n\\r\\n- Finish the feature branch:\\r\\n\\r\\n    ```bash\\r\\n    git flow feature finish new-feature\\r\\n    ```\\r\\n\\r\\n3. **Release Process:**\\r\\n\\r\\n- Start a release:\\r\\n\\r\\n    ```bash\\r\\n    git flow release start 1.0.0\\r\\n    ```\\r\\n\\r\\n- Perform release-specific tasks, bug fixes, version updates.\\r\\n\\r\\n- Finish the release:\\r\\n\\r\\n    ```bash\\r\\n    git flow release finish 1.0.0\\r\\n    ```\\r\\n\\r\\n4. **Hotfixes:**\\r\\n\\r\\n- Start a hotfix:\\r\\n\\r\\n    ```bash\\r\\n    git flow hotfix start issue-123-fix\\r\\n    ```\\r\\n\\r\\n- Make necessary changes and finish the hotfix:\\r\\n\\r\\n    ```bash\\r\\n    git flow hotfix finish issue-123-fix\\r\\n    ```\\r\\n\\r\\n### GitHub Flow Demo\\r\\n\\r\\nGitHub Flow is simpler and follows a more straightforward branching model:\\r\\n\\r\\n1. **Main Branch (Production):**\\r\\n\\r\\n- All work is directly committed to the main branch.\\r\\n\\r\\n2. **Feature Development:**\\r\\n\\r\\n- Create a feature branch:\\r\\n\\r\\n    ```bash\\r\\n    git checkout -b feature-branch main\\r\\n    ```\\r\\n\\r\\n- Develop the feature on this branch, committing changes.\\r\\n\\r\\n3. **Pull Request:**\\r\\n\\r\\n- Once feature development is complete, open a pull request (PR) on GitHub.\\r\\n- Review and discuss changes with colleagues in the PR.\\r\\n- Merge the feature branch into the main branch upon approval.\\r\\n\\r\\n4. **Continuous Deployment:**\\r\\n\\r\\n- Changes merged into the main branch trigger automated deployments or continuous integration/continuous deployment (CI/CD) processes.\\r\\n\\r\\n## Summary\\r\\n\\r\\n|                  | Gitflow                                                | GitHub Flow                                                  |\\r\\n| ---------------- | ------------------------------------------------------ | ------------------------------------------------------------ |\\r\\n| **Description**  | Structured branching model for larger projects         | Simpler workflow for rapid iterations and continuous deployment |\\r\\n| **Key Branches** | `master`, `develop`, `feature`, `release`, `hotfix`    | `main` (or `production`), feature branches                   |\\r\\n| **Pros**         | Structured for larger projects                       | Simplicity for smaller, agile teams                        |\\r\\n|                  | Well-defined release process                         | Continuous deployment and quick iterations                 |\\r\\n|                  | Clear separation of features, releases, and hotfixes | Flexibility for rapid feature development                  |\\r\\n| **Cons**         | Complexity, especially for smaller projects or teams | Struggle with larger release cycles or complex projects    |\\r\\n|                  | Potential for longer release cycles                  | Lack of a formal release process may cause confusion       |\\r\\n|                  | Overhead in managing multiple branches               | Limited in handling structured release management needs    |\\r\\n| **Suitability**  | Suited for larger projects with structured cycles      | Ideal for smaller teams without complex branching            |\\r\\n| **Ease of Use**  | More complex due to multiple long-lived branches       | Simpler with fewer branches and straightforward process      |\\r\\n| **Adaptability** | Less flexible due to structured nature                 | Highly adaptable for agile teams and frequent releases       |\\r\\n\\r\\nBoth Gitflow and GitHub Flow offer distinct advantages depending on the project\'s size, complexity, and release needs. The choice between the two workflows should align with the team\'s working style, project requirements, and desired release management strategy. --\x3e"},{"id":"/2023/12/29/docker-cheatsheet","metadata":{"permalink":"/2023/12/29/docker-cheatsheet","editUrl":"https://github.com/nhonvo/nhonvo.github.io/edit/main/blog/blog/2023-12-29-docker-cheatsheet.md","source":"@site/blog/2023-12-29-docker-cheatsheet.md","title":"docker command","description":"Images","date":"2023-12-29T12:00:00.000Z","formattedDate":"December 29, 2023","tags":[{"label":"docker","permalink":"/tags/docker"},{"label":"cheatsheat","permalink":"/tags/cheatsheat"}],"readingTime":1.325,"hasTruncateMarker":false,"authors":[{"name":"Truong Nhon"}],"frontMatter":{"layout":"post","title":"docker command","subtitle":"cheatsheet","date":"2023-12-29T12:00:00.000Z","author":"Truong Nhon","hidden":false,"published":true,"multilingual":false,"catalog":true,"lang":"en","tags":["docker","cheatsheat"]},"prevItem":{"title":"gitflow-and-githubflow","permalink":"/2023/12/31/gitflow-and-githubflow"},"nextItem":{"title":"Git command","permalink":"/2023/12/29/git-cheatsheet"}},"content":"## Images\\r\\n\\r\\n```bash\\r\\ndocker images                   # List all images\\r\\ndocker pull <image_name>         # Pull an image from Docker Hub\\r\\ndocker build -t <image_name> .   # Build an image from the current directory\\r\\ndocker rmi <image_id>            # Remove an image\\r\\n```\\r\\n\\r\\n## Containers\\r\\n\\r\\n```bash\\r\\ndocker ps                       # List running containers\\r\\ndocker ps -a                    # List all containers\\r\\ndocker run <image_name>         # Create and start a container\\r\\ndocker exec -it <container_id> bash   # Access a running container\'s shell\\r\\ndocker stop <container_id>      # Stop a running container\\r\\ndocker rm <container_id>        # Remove a container\\r\\n```\\r\\n\\r\\n## Volumes\\r\\n\\r\\n```bash\\r\\ndocker volume ls                # List all volumes\\r\\ndocker volume create <volume_name>  # Create a volume\\r\\ndocker run -v <volume_name>:/path/in/container <image_name>   # Mount a volume to a container\\r\\n```\\r\\n\\r\\n## Networks\\r\\n\\r\\n```bash\\r\\ndocker network ls               # List all networks\\r\\ndocker network create <network_name>  # Create a network\\r\\ndocker run --network=<network_name> <image_name>   # Connect a container to a network\\r\\n```\\r\\n\\r\\n## Compose\\r\\n\\r\\n```bash\\r\\ndocker-compose up               # Start services defined in a docker-compose.yml\\r\\ndocker-compose down             # Stop and remove services defined in a docker-compose.yml\\r\\n```\\r\\n\\r\\n## Registry\\r\\n\\r\\n```bash\\r\\ndocker login                    # Log in to a Docker registry\\r\\ndocker push <image_name>         # Push an image to a registry\\r\\ndocker pull <registry>/<image_name>  # Pull an image from a registry\\r\\n```\\r\\n\\r\\n## System\\r\\n\\r\\n```bash\\r\\ndocker info                     # Display system-wide information\\r\\ndocker version                  # Show the Docker version\\r\\ndocker system prune             # Remove all stopped containers, unused networks, and dangling images\\r\\n```\\r\\n\\r\\n## Dockerize Applications\\r\\n\\r\\n```bash\\r\\ndocker build -t <image_name> .         # Build a Docker image\\r\\ndocker run -p <host_port>:<container_port> <image_name>   # Run a Docker container\\r\\n```"},{"id":"/2023/12/29/git-cheatsheet","metadata":{"permalink":"/2023/12/29/git-cheatsheet","editUrl":"https://github.com/nhonvo/nhonvo.github.io/edit/main/blog/blog/2023-12-29-git-cheatsheet.md","source":"@site/blog/2023-12-29-git-cheatsheet.md","title":"Git command","description":"Git Basics","date":"2023-12-29T12:00:00.000Z","formattedDate":"December 29, 2023","tags":[{"label":"git","permalink":"/tags/git"},{"label":"cheatsheat","permalink":"/tags/cheatsheat"}],"readingTime":1.715,"hasTruncateMarker":false,"authors":[{"name":"Truong Nhon"}],"frontMatter":{"layout":"post","title":"Git command","subtitle":"cheatsheet","date":"2023-12-29T12:00:00.000Z","author":"Truong Nhon","hidden":false,"published":true,"multilingual":false,"catalog":true,"lang":"en","tags":["git","cheatsheat"]},"prevItem":{"title":"docker command","permalink":"/2023/12/29/docker-cheatsheet"},"nextItem":{"title":"dotnet command cheatsheat","permalink":"/2023/12/29/net-cheatsheet"}},"content":"## Git Basics\\r\\n\\r\\n```bash\\r\\ngit init\\r\\ngit clone <repository_url>\\r\\ngit status\\r\\n```\\r\\n\\r\\n## Staging and Commits\\r\\n\\r\\n```bash\\r\\ngit add <file(s)>\\r\\ngit commit -m \\"Commit message\\"\\r\\ngit reset --soft HEAD^  // Undo Last Commit (Keep Changes)\\r\\ngit reset --hard HEAD^  // Undo Last Commit (Discard Changes)\\r\\n```\\r\\n\\r\\n## Branching\\r\\n\\r\\n```bash\\r\\ngit branch <branch_name>\\r\\ngit checkout <branch_name>\\r\\ngit checkout -b <branch_name>\\r\\ngit merge <branch_name>\\r\\ngit branch -d <branch_name>\\r\\n```\\r\\n\\r\\n## Remote Repositories\\r\\n\\r\\n```bash\\r\\ngit remote add <remote_name> <repository_url>\\r\\ngit push <remote_name> <branch_name>\\r\\ngit pull <remote_name> <branch_name>\\r\\n```\\r\\n\\r\\n## Logging and History\\r\\n\\r\\n```bash\\r\\ngit log\\r\\ngit show <commit_hash>\\r\\ngit diff\\r\\n```\\r\\n\\r\\n## Miscellaneous\\r\\n\\r\\n```bash\\r\\ntouch .gitignore  // Ignore Files (Create .gitignore)\\r\\ngit checkout -- <file(s)>  // Undo Changes in Working Directory\\r\\ngit reset HEAD <file(s)>  // Undo Staged Changes\\r\\n```\\r\\n\\r\\n## Cherry-pick\\r\\n\\r\\n```bash\\r\\ngit cherry-pick <commit_hash>\\r\\n```\\r\\n\\r\\n## Rebase\\r\\n\\r\\n```bash\\r\\ngit rebase <base_branch>\\r\\ngit rebase -i <base_branch>  // Interactive rebase\\r\\n```\\r\\n\\r\\n## Squash Commits during Rebase\\r\\n\\r\\n```bash\\r\\n// Change \\"pick\\" to \\"squash\\" for the commits you want to squash\\r\\n// Follow on-screen instructions to edit the commit messages\\r\\ngit rebase -i <base_branch>\\r\\n```\\r\\n\\r\\n## Amend the Last Commit\\r\\n\\r\\n```bash\\r\\ngit commit --amend\\r\\n```\\r\\n\\r\\n## Stash Changes\\r\\n\\r\\n```bash\\r\\ngit stash\\r\\ngit stash save \\"Stash message\\"\\r\\n```\\r\\n\\r\\n## Apply Stashed Changes\\r\\n\\r\\n```bash\\r\\ngit stash apply\\r\\ngit stash pop  // Apply and remove from stash\\r\\n```\\r\\n\\r\\n## View Stash List\\r\\n\\r\\n```bash\\r\\ngit stash list\\r\\n```\\r\\n\\r\\n## Show Differences with Stash\\r\\n\\r\\n```bash\\r\\ngit stash show -p <stash_id>\\r\\n```\\r\\n\\r\\n## Discard Stashed Changes\\r\\n\\r\\n```bash\\r\\ngit stash drop <stash_id>\\r\\ngit stash clear  // Remove all stashes\\r\\n```\\r\\n\\r\\n## Tagging\\r\\n\\r\\n```bash\\r\\ngit tag <tag_name>  // Create lightweight tag\\r\\ngit tag -a <tag_name> -m \\"Tag message\\"  // Create annotated tag\\r\\ngit push origin <tag_name>  // Push tag to remote\\r\\n```\\r\\n\\r\\n## Submodules\\r\\n\\r\\n```bash\\r\\ngit submodule add <repository_url> <path>  // Add submodule\\r\\ngit submodule update --init --recursive  // Initialize submodules\\r\\ngit submodule foreach git pull origin master  // Update submodules\\r\\n```\\r\\n\\r\\n## Git Configurations\\r\\n\\r\\n```bash\\r\\ngit config --global user.name \\"Your Name\\"\\r\\ngit config --global user.email \\"your@email.com\\"\\r\\n```\\r\\n\\r\\n## Show Configurations\\r\\n\\r\\n```bash\\r\\ngit config --list\\r\\n```"},{"id":"/2023/12/29/net-cheatsheet","metadata":{"permalink":"/2023/12/29/net-cheatsheet","editUrl":"https://github.com/nhonvo/nhonvo.github.io/edit/main/blog/blog/2023-12-29-net-cheatsheet.md","source":"@site/blog/2023-12-29-net-cheatsheet.md","title":"dotnet command cheatsheat","description":"1. c# basic(datatype, exception, ...) -> important","date":"2023-12-29T12:00:00.000Z","formattedDate":"December 29, 2023","tags":[{"label":"c#","permalink":"/tags/c"},{"label":"cheatsheat","permalink":"/tags/cheatsheat"}],"readingTime":1.495,"hasTruncateMarker":false,"authors":[{"name":"Truong Nhon"}],"frontMatter":{"layout":"post","title":"dotnet command cheatsheat","subtitle":"","date":"2023-12-29T12:00:00.000Z","author":"Truong Nhon","hidden":false,"published":true,"multilingual":false,"catalog":true,"lang":"en","tags":["c#","cheatsheat"]},"prevItem":{"title":"Git command","permalink":"/2023/12/29/git-cheatsheet"},"nextItem":{"title":"Advanced topic in SQL","permalink":"/2023/12/25/Advanced-Topics-in-SQL"}},"content":"1. c# basic(datatype, exception, ...) -> *important*\\r\\n2. Algorithm (bubble sort, selected sort, ...) -> *quick view*\\r\\n3. OOP (4 ) **-> *important***\\r\\n4. SOLID (5)  -> *quick view*\\r\\n5. C# advance (delegate, generic, async ) -> *optional*\\r\\n6. SQL(join(8), understand func vs store procedure) **-> *important***\\r\\n7. Linq  -> *quick view*\\r\\n8. ef core  -> *quick view*\\r\\n9. webapi -> *optional*\\r\\n\\r\\n## Create and Build Projects\\r\\n\\r\\n```bash\\r\\ndotnet new console -n MyConsoleApp    // Create a new console application\\r\\ndotnet new webapi -n MyWebApi         // Create a new Web API project\\r\\ndotnet build                          // Build the project\\r\\n```\\r\\n\\r\\n## Run Applications\\r\\n\\r\\n```bash\\r\\ndotnet run                            // Run the application\\r\\ndotnet run --project <project_path>   // Run a specific project\\r\\ndotnet watch run                      // Run with file watching\\r\\n```\\r\\n\\r\\n## Add Dependencies\\r\\n\\r\\n```bash\\r\\ndotnet add package <package_name>     // Add a NuGet package\\r\\ndotnet restore                        // Restore dependencies\\r\\n```\\r\\n\\r\\n## Generate Code\\r\\n\\r\\n```bash\\r\\ndotnet new classlib -n MyLibrary      // Create a class library\\r\\ndotnet add reference <project_path>   // Add a project reference\\r\\ndotnet publish -c Release             // Publish the application\\r\\n```\\r\\n\\r\\n## Unit Testing\\r\\n\\r\\n```bash\\r\\ndotnet new xunit -n MyTests           // Create xUnit test project\\r\\ndotnet test                           // Run tests\\r\\n```\\r\\n\\r\\n## Entity Framework Core\\r\\n\\r\\n```bash\\r\\ndotnet ef migrations add <migration_name>    // Add a migration\\r\\ndotnet ef database update                  // Apply migrations\\r\\n```\\r\\n\\r\\n## Publish and Deploy\\r\\n\\r\\n```bash\\r\\ndotnet publish -c Release --self-contained // Publish a self-contained application\\r\\n```\\r\\n\\r\\n## Package Management\\r\\n\\r\\n```bash\\r\\ndotnet nuget push -k <api_key> -s <source> <package.nupkg>    // Publish a NuGet package\\r\\n```\\r\\n\\r\\n## ASP.NET Core Identity\\r\\n\\r\\n```bash\\r\\ndotnet new identity -n MyIdentityApp   // Create an ASP.NET Core Identity project\\r\\n\\r\\n```\\r\\n\\r\\n## Azure Functions\\r\\n\\r\\n```bash\\r\\ndotnet new func -n MyFunction          // Create an Azure Functions project\\r\\n```\\r\\n\\r\\n## Clean Up\\r\\n\\r\\n```bash\\r\\ndotnet clean                          // Clean the build output\\r\\n```"},{"id":"/2023/12/25/Advanced-Topics-in-SQL","metadata":{"permalink":"/2023/12/25/Advanced-Topics-in-SQL","editUrl":"https://github.com/nhonvo/nhonvo.github.io/edit/main/blog/blog/2023-12-25-Advanced-Topics-in-SQL.md","source":"@site/blog/2023-12-25-Advanced-Topics-in-SQL.md","title":"Advanced topic in SQL","description":"SQL Clauses","date":"2023-12-25T15:00:00.000Z","formattedDate":"December 25, 2023","tags":[{"label":"sql","permalink":"/tags/sql"},{"label":"database","permalink":"/tags/database"}],"readingTime":5.935,"hasTruncateMarker":false,"authors":[{"name":"Truong Nhon"}],"frontMatter":{"layout":"post","title":"Advanced topic in SQL","subtitle":"SQL Essentials Part 3","date":"2023-12-25T15:00:00.000Z","author":"Truong Nhon","multilingual":false,"catalog":true,"lang":"en","tags":["sql","database"]},"prevItem":{"title":"dotnet command cheatsheat","permalink":"/2023/12/29/net-cheatsheet"},"nextItem":{"title":"Querying and Data Modification","permalink":"/2023/12/25/Querying-and-Data-Modification"}},"content":"## SQL Clauses\\r\\n\\r\\n- WHERE, ORDER BY, GROUP BY, and HAVING: Crafting strategic queries.\\r\\n- Today\'s exploration: INNER JOIN, OUTER JOIN, EXCLUDING JOIN, SELF JOIN, CROSS JOIN, UNION, and UNION ALL.\\r\\n\\r\\n## Why Do We Need JOIN?\\r\\n\\r\\n- Combining data from multiple tables based on matching conditions for comprehensive analysis.\\r\\n\\r\\n## INNER JOIN: A Deeper Dive\\r\\n\\r\\n```sql\\r\\n-- Example of INNER JOIN\\r\\nSELECT c.CustomerID, c.FullName, o.FoodName\\r\\nFROM Customer c\\r\\nINNER JOIN CustomerOrder o ON c.CustomerID = o.CustomerID;\\r\\n```\\r\\n\\r\\nIn this practice, we retrieve customer information along with their corresponding orders using INNER JOIN.\\r\\n\\r\\n## JOIN More Than 2 Tables\\r\\n\\r\\n```sql\\r\\n-- Example of INNER JOIN with 3 tables\\r\\nSELECT c.CustomerID, c.FullName, o.FoodName, d.FullAddress\\r\\nFROM Customer c\\r\\nINNER JOIN CustomerOrder o ON c.CustomerID = o.CustomerID\\r\\nINNER JOIN DeliveryAddress d ON d.ID = o.DeliveryAddressID;\\r\\n```\\r\\n\\r\\nExtending the concept of INNER JOIN to involve three tables for a more comprehensive result set.\\r\\n\\r\\n## LEFT JOIN: Embracing Incompleteness\\r\\n\\r\\n```sql\\r\\n-- Example of LEFT JOIN\\r\\nSELECT c.CustomerID, c.FullName, o.FoodName\\r\\nFROM Customer c\\r\\nLEFT JOIN CustomerOrder o ON c.CustomerID = o.CustomerID;\\r\\n```\\r\\n\\r\\nIncorporating LEFT JOIN to include all customers, even those without orders.\\r\\n\\r\\n## RIGHT JOIN: Balancing the Equation\\r\\n\\r\\n```sql\\r\\n-- Example of RIGHT JOIN\\r\\nSELECT c.CustomerID, c.FullName, o.FoodName\\r\\nFROM Customer c\\r\\nRIGHT JOIN CustomerOrder o ON c.CustomerID = o.CustomerID;\\r\\n```\\r\\n\\r\\nImplementing RIGHT JOIN to include all orders, even those without customers.\\r\\n\\r\\n## FULL JOIN: Embracing Completeness\\r\\n\\r\\n```sql\\r\\n-- Example of FULL JOIN\\r\\nSELECT c.CustomerID, c.FullName, o.FoodName\\r\\nFROM Customer c\\r\\nFULL JOIN CustomerOrder o ON c.CustomerID = o.CustomerID;\\r\\n```\\r\\n\\r\\nUtilizing FULL JOIN to encompass all customers and orders, regardless of matches.\\r\\n\\r\\n## LEFT EXCLUDING JOIN: Seeking the Unique\\r\\n\\r\\n```sql\\r\\n-- Example of LEFT EXCLUDING JOIN\\r\\nSELECT c.CustomerID, c.FullName, o.FoodName\\r\\nFROM Customer c\\r\\nLEFT JOIN CustomerOrder o ON c.CustomerID = o.CustomerID\\r\\nWHERE o.CustomerID IS NULL;\\r\\n```\\r\\n\\r\\nApplying LEFT EXCLUDING JOIN to identify customers without orders.\\r\\n\\r\\n## RIGHT EXCLUDING JOIN: Excluding to the Right\\r\\n\\r\\n```sql\\r\\n-- Example of RIGHT EXCLUDING JOIN\\r\\nSELECT c.CustomerID, c.FullName, o.FoodName\\r\\nFROM Customer c\\r\\nRIGHT JOIN CustomerOrder o ON c.CustomerID = o.CustomerID\\r\\nWHERE c.CustomerID IS NULL;\\r\\n```\\r\\n\\r\\nImplementing RIGHT EXCLUDING JOIN to identify orders without customers.\\r\\n\\r\\n## OUTER EXCLUDING JOIN: Excluding in Unison\\r\\n\\r\\n```sql\\r\\n-- Example of OUTER EXCLUDING JOIN\\r\\nSELECT c.CustomerID, c.FullName, o.FoodName\\r\\nFROM Customer c\\r\\nFULL JOIN CustomerOrder o ON c.CustomerID = o.CustomerID\\r\\nWHERE c.CustomerID IS NULL OR o.CustomerID IS NULL;\\r\\n```\\r\\n\\r\\nIntegrating OUTER EXCLUDING JOIN to identify unmatched records from both tables.\\r\\n\\r\\n## SELF JOIN: Connecting Within\\r\\n\\r\\n```sql\\r\\n-- Example of SELF JOIN\\r\\nSELECT emp.ID, emp.FullName, manager.FullName AS Manager \\r\\nFROM Employee emp\\r\\nINNER JOIN Employee manager ON emp.ManagerID = manager.ID;\\r\\n```\\r\\n\\r\\nDemonstrating the concept of SELF JOIN to connect records within the same table.\\r\\n\\r\\n## CROSS JOIN: Expanding Horizons\\r\\n\\r\\n```sql\\r\\n-- Example of CROSS JOIN\\r\\nSELECT *\\r\\nFROM A\\r\\nCROSS JOIN B;\\r\\n```\\r\\n\\r\\nExpanding horizons with CROSS JOIN to combine each row from one table with each row from another.\\r\\n\\r\\n## UNION: Merging Similarities\\r\\n\\r\\n```sql\\r\\n-- Example of UNION\\r\\nSELECT FromColumnTableA FROM A\\r\\nUNION\\r\\nSELECT FromColumnTableB FROM B;\\r\\n```\\r\\n\\r\\nMerging similarities with UNION to combine result-sets from two tables.\\r\\n\\r\\n## UNION ALL: Embracing All\\r\\n\\r\\n```sql\\r\\n-- Example of UNION ALL\\r\\nSELECT FromColumnTableA FROM A\\r\\nUNION ALL\\r\\nSELECT FromColumnTableB FROM B;\\r\\n```\\r\\n\\r\\nEmbracing all with UNION ALL, including duplicates in the result set.\\r\\n\\r\\n## Sub Queries and Advanced Operators\\r\\n\\r\\n- Exploring the power of subqueries.\\r\\n- Advanced operators: EXISTS, ALL, IN, ANY.\\r\\n\\r\\n## What We Will Explore Today?\\r\\n\\r\\n- Sub queries, advanced operators, rules of subqueries, and practical exercises.\\r\\n\\r\\n## Subquery Basics\\r\\n\\r\\n- A sub-query, or inner query, nested inside a larger query.\\r\\n- Works independently within the outer query.\\r\\n- Execution sequence: Inner query executes first, results stored, and outer query runs on stored results.\\r\\n- Exception: Correlated subqueries reference outer query columns.\\r\\n\\r\\n## Example 1: Subquery for Average\\r\\n\\r\\n```sql\\r\\n-- Example of Subquery\\r\\nUSE LECTURE4_FUNCTION\\r\\nSELECT LastName, Physic, (SELECT AVG(Physic * 1.0) FROM Student) AS \'AVG OF Physic\'\\r\\nFROM Student;\\r\\n```\\r\\n\\r\\n## Example 2: Subquery in WHERE Clause\\r\\n\\r\\n```sql\\r\\n-- Example of Subquery in WHERE\\r\\nUSE LECTURE5_JOIN_DEMO\\r\\nSELECT CustomerID, FullName\\r\\nFROM Customer\\r\\nWHERE CustomerID IN (SELECT CustomerID FROM CustomerOrder);\\r\\n```\\r\\n\\r\\n## Types of Subqueries\\r\\n\\r\\n- Single-row subquery.\\r\\n- Multiple-row subquery.\\r\\n- Multiple-column subquery.\\r\\n- Correlated subquery.\\r\\n- Nested subquery.\\r\\n\\r\\n## Single-Row Subquery\\r\\n\\r\\n```sql\\r\\n-- Example of Single-Row Subquery\\r\\nUSE LECTURE5_JOIN_DEMO;\\r\\nSELECT CustomerID, FullName\\r\\nFROM Customer\\r\\nWHERE CustomerID = (SELECT CustomerID\\r\\nFROM CustomerOrder\\r\\nWHERE FoodName = \'Heo Quay\');\\r\\n```\\r\\n\\r\\n## Exercise: Single-Row Subquery\\r\\n\\r\\nQuery CustomerID, OrderID, FoodName from CustomerOrder with Delivery FullAddress = \'TP. HCM\' using a single-row subquery.\\r\\n\\r\\n## Multiple-Row Subquery\\r\\n\\r\\n```sql\\r\\n-- Example of Multiple-Row Subquery\\r\\nUSE LECTURE5_JOIN_DEMO\\r\\nSELECT CustomerID, FullName\\r\\nFROM Customer\\r\\nWHERE CustomerID IN (SELECT CustomerID FROM CustomerOrder);\\r\\n```\\r\\n\\r\\n## Exercise: Multiple-Row Subquery\\r\\n\\r\\nQuery CustomerID, OrderID, FoodName from CustomerOrder with Delivery FullAddress = \'TP. HCM\' or \'TP. HA NOI\' using a multiple-row subquery.\\r\\n\\r\\n## Multiple-Column Subquery\\r\\n\\r\\n```sql\\r\\n-- Example of Multiple-Column Subquery\\r\\nUSE LECTURE5_JOIN_DEMO;\\r\\nSELECT CustomerID, FullName\\r\\nFROM Customer \\r\\nWHERE EXISTS\\r\\n(SELECT CustomerID, OrderID, FoodName\\r\\nFROM CustomerOrder\\r\\nWHERE CustomerOrder.CustomerID = Customer.CustomerID);\\r\\n```\\r\\n\\r\\n## Exercise: Multiple-Column Subquery\\r\\n\\r\\nCreate a database, perform a self-join on the Employee table, and query managers with at least 1 employee.\\r\\n\\r\\n## Correlated Subquery\\r\\n\\r\\n- Normal subquery executes first and provides a value to the outer query.\\r\\n- Correlated subquery references a column in the outer query and executes the subquery once for each row in the outer query.\\r\\n\\r\\n```sql\\r\\n-- Example of Correlated Subquery\\r\\nUSE LECTURE5_JOIN_DEMO;\\r\\nSELECT CustomerID, FullName\\r\\nFROM Customer \\r\\nWHERE EXISTS\\r\\n(SELECT CustomerID, OrderID, FoodName\\r\\nFROM CustomerOrder\\r\\nWHERE CustomerOrder.CustomerID = Customer.CustomerID);\\r\\n```\\r\\n\\r\\n## Exercise: Correlated Subquery\\r\\n\\r\\nCreate a database, perform a self-join on the Employee table, and query managers with at least 1 employee.\\r\\n\\r\\n## Nested Subquery\\r\\n\\r\\n```sql\\r\\n-- Example of Nested Subquery\\r\\nUSE LECTURE5_JOIN_DEMO;\\r\\nSELECT CustomerID, FullName\\r\\nFROM Customer\\r\\nWHERE CustomerID IN (SELECT CustomerID \\r\\nFROM CustomerOrder\\r\\nWHERE DeliveryAddressID = (SELECT ID\\r\\nFROM DeliveryAddress\\r\\nWHERE FullAddress = \'TP. HA NOI\'));\\r\\n```\\r\\n\\r\\n## Rules of Subqueries\\r\\n\\r\\n- Enclose a subquery in parentheses.\\r\\n- Must include a SELECT clause and a FROM clause.\\r\\n- Subqueries that return more than one row can only be used with multiple-value operators.\\r\\n- Can include WHERE, GROUP BY, and HAVING clauses.\\r\\n- Can include an ORDER BY clause only with a TOP clause.\\r\\n- Can nest subqueries up to 32 levels.\\r\\n\\r\\n## Advanced Operators: EXISTS\\r\\n\\r\\n- Used to test for the existence of any record in a subquery.\\r\\n\\r\\n```sql\\r\\n-- Example of EXISTS\\r\\nUSE LECTURE5_JOIN_DEMO;\\r\\nSELECT CustomerID, FullName\\r\\nFROM Customer \\r\\nWHERE EXISTS\\r\\n(SELECT CustomerID, OrderID, FoodName\\r\\nFROM CustomerOrder\\r\\nWHERE CustomerOrder.CustomerID = Customer.CustomerID);\\r\\n```\\r\\n\\r\\n## Advanced Operators: ALL\\r\\n\\r\\n- Returns TRUE if ALL of the subquery values meet the condition.\\r\\n\\r\\n```sql\\r\\n-- Example of ALL\\r\\nUSE LECTURE5_JOIN_DEMO;\\r\\nSELECT CustomerID, FullName\\r\\nFROM Customer\\r\\nWHERE CustomerID = ALL (SELECT CustomerID FROM CustomerOrder);\\r\\n```\\r\\n\\r\\n## Advanced Operators: IN\\r\\n\\r\\n- Allows specifying multiple values in a WHERE clause.\\r\\n\\r\\n```sql\\r\\n-- Example of IN\\r\\nUSE LECTURE5_JOIN_DEMO;\\r\\nSELECT CustomerID, FullName\\r\\nFROM Customer\\r\\nWHERE CustomerID IN (SELECT CustomerID FROM CustomerOrder);\\r\\n```\\r\\n\\r\\n## Advanced Operators: ANY\\r\\n\\r\\n- Allows performing a comparison between a single column value and a range of other values.\\r\\n\\r\\n```sql\\r\\n-- Example of ANY\\r\\nUSE LECTURE5_JOIN_DEMO;\\r\\nSELECT CustomerID, FullName\\r\\nFROM Customer\\r\\nWHERE CustomerID = ANY (SELECT CustomerID FROM CustomerOrder);\\r\\n```"},{"id":"/2023/12/25/Querying-and-Data-Modification","metadata":{"permalink":"/2023/12/25/Querying-and-Data-Modification","editUrl":"https://github.com/nhonvo/nhonvo.github.io/edit/main/blog/blog/2023-12-25-Querying-and-Data-Modification.md","source":"@site/blog/2023-12-25-Querying-and-Data-Modification.md","title":"Querying and Data Modification","description":"Data Manipulation Language (DML) Operations:","date":"2023-12-25T12:00:00.000Z","formattedDate":"December 25, 2023","tags":[{"label":"sql","permalink":"/tags/sql"},{"label":"database","permalink":"/tags/database"}],"readingTime":8.73,"hasTruncateMarker":false,"authors":[{"name":"Truong Nhon"}],"frontMatter":{"layout":"post","title":"Querying and Data Modification","subtitle":"SQL Essentials Part 2","date":"2023-12-25T12:00:00.000Z","author":"Truong Nhon","multilingual":false,"catalog":true,"lang":"en","tags":["sql","database"]},"prevItem":{"title":"Advanced topic in SQL","permalink":"/2023/12/25/Advanced-Topics-in-SQL"},"nextItem":{"title":"Fundamentals-SQL","permalink":"/2023/12/25/Fundamentals-SQL"}},"content":"## **Data Manipulation Language (DML) Operations:**\\r\\n\\r\\nDML operations involve the manipulation of data within a database.\\r\\n### **INSERT Data:**\\r\\n\\r\\n```sql\\r\\n-- Single Record\\r\\nINSERT INTO Student(ID, FullName, Email, PhoneNumber, Math)\\r\\nVALUES(5, \'HUY\', \'HUY@gmail.com\', \'0123456789\', 5);\\r\\n\\r\\n-- Multiple Records\\r\\nINSERT INTO Student(ID, FullName, Email, PhoneNumber, DateOfBirth, Math)\\r\\nVALUES\\r\\n    (4, \'LAN\', \'LAN@gmail.com\', \'0123456789\', \'1/30/1999\', 7),\\r\\n    (3, \'HAO\', \'HAO@gmail.com\', \'0123456789\', \'12/15/2000\', 8);\\r\\n```\\r\\n\\r\\nThe `INSERT` statement adds new records to a table.\\r\\n### **UPDATE Data:**\\r\\n\\r\\n```sql\\r\\n-- Update Single Record\\r\\nUPDATE Student\\r\\nSET FullName = \'I AM A GOOD BOY\'\\r\\nWHERE ID = 3;\\r\\n\\r\\n-- Update Multiple Records\\r\\nUPDATE Student\\r\\nSET FullName = \'Updated Name\'\\r\\nWHERE Math > 5;\\r\\n```\\r\\n\\r\\nThe `UPDATE` statement modifies existing records in a table.\\r\\n### **DELETE Data:**\\r\\n\\r\\n```sql\\r\\n-- Delete Single Record\\r\\nDELETE FROM Student\\r\\nWHERE ID = 3;\\r\\n\\r\\n-- Delete All Records with a Condition\\r\\nDELETE FROM Student\\r\\nWHERE Math > 5;\\r\\n\\r\\n-- Truncate Table (Remove all records)\\r\\nTRUNCATE TABLE Parent;\\r\\n```\\r\\n\\r\\nThe `DELETE` statement removes records from a table.\\r\\n\\r\\n------\\r\\n\\r\\n## **Operators:**\\r\\n\\r\\nOperators perform various operations in SQL.\\r\\n### **Arithmetic Operators:**\\r\\n\\r\\n```sql\\r\\nSELECT 30 + 20 AS \'ADDITION\';\\r\\nSELECT 30 - 20 AS \'SUBTRACTION\';\\r\\nSELECT 30 * 20 AS \'MULTIPLICATION\';\\r\\nSELECT 30 / 20 AS \'DIVISION\';\\r\\nSELECT 30 % 20 AS \'MODULO\';\\r\\n```\\r\\n\\r\\nArithmetic operators perform mathematical operations.\\r\\n### **Comparison Operators:**\\r\\n\\r\\n```sql\\r\\n-- Equal To\\r\\nSELECT ID, FullName\\r\\nFROM Student\\r\\nWHERE FullName = \'Lan Anh\';\\r\\n\\r\\n-- Greater Than\\r\\nSELECT ID, FullName, Math\\r\\nFROM Student\\r\\nWHERE Math > 5;\\r\\n```\\r\\n\\r\\nComparison operators compare values for equality, inequality, etc.\\r\\n### **Logical Operators:**\\r\\n\\r\\n```sql\\r\\n-- AND Operator\\r\\nSELECT ID, FullName\\r\\nFROM Student\\r\\nWHERE FullName = \'Lan Anh\' AND ID = 1010;\\r\\n\\r\\n-- OR Operator\\r\\nSELECT ID, FullName\\r\\nFROM Student\\r\\nWHERE FullName = \'Lan Anh\' OR ID = 1005;\\r\\n\\r\\n-- NOT Operator\\r\\nSELECT ID, FullName, Math\\r\\nFROM Student\\r\\nWHERE NOT Math > 5;\\r\\n```\\r\\n\\r\\nLogical operators combine conditions using AND, OR, and NOT.\\r\\n### **BETWEEN - AND:**\\r\\n\\r\\n```sql\\r\\n-- Values within a Range\\r\\nSELECT ID, FullName\\r\\nFROM Student\\r\\nWHERE ID BETWEEN 1003 AND 1005;\\r\\n```\\r\\n\\r\\nThe `BETWEEN - AND` operator selects values within a specified range.\\r\\n### **LIKE Operator:**\\r\\n\\r\\n```sql\\r\\n-- Pattern Matching\\r\\nSELECT FullName, Math\\r\\nFROM Student\\r\\nWHERE FullName LIKE \'%U%\';\\r\\n```\\r\\n\\r\\nThe `LIKE` operator searches for a specified pattern in a column.\\r\\n### **IS NULL:**\\r\\n\\r\\n```sql\\r\\n-- Check for NULL Values\\r\\nSELECT ID, FullName, Math\\r\\nFROM Student\\r\\nWHERE Math IS NULL;\\r\\n```\\r\\n\\r\\nThe `IS NULL` operator checks for NULL values in a column.\\r\\n\\r\\n------\\r\\n\\r\\n## **SELECT Statement:**\\r\\n\\r\\nThe `SELECT` statement retrieves data from one or more tables.\\r\\n### **ORDER BY Clause:**\\r\\n\\r\\n```sql\\r\\n-- Ascending Order\\r\\nSELECT *\\r\\nFROM Student\\r\\nORDER BY FullName ASC;\\r\\n\\r\\n-- Descending Order\\r\\nSELECT *\\r\\nFROM Student\\r\\nORDER BY FullName DESC;\\r\\n\\r\\n-- Order by Multiple Columns\\r\\nSELECT *\\r\\nFROM Student\\r\\nORDER BY FullName ASC, Math ASC;\\r\\n```\\r\\n\\r\\nThe `ORDER BY` clause sorts query results in ascending or descending order.\\r\\n### **TOP, PERCENT, and WITH TIES:**\\r\\n\\r\\n```sql\\r\\n-- SELECT TOP N Rows\\r\\nSELECT TOP 3 *\\r\\nFROM Student;\\r\\n\\r\\n-- SELECT TOP N Percent of Rows\\r\\nSELECT TOP 50 PERCENT ID, FullName\\r\\nFROM Student;\\r\\n```\\r\\n\\r\\n`TOP` limits the number of rows returned, and `PERCENT` filters by a percentage.\\r\\n### **DISTINCT Keyword:**\\r\\n\\r\\n```sql\\r\\n-- Select Distinct Values\\r\\nSELECT DISTINCT FullName\\r\\nFROM Student;\\r\\n\\r\\n-- Select Distinct Values for Multiple Columns\\r\\nSELECT DISTINCT ID, FullName\\r\\nFROM Student;\\r\\n```\\r\\n\\r\\nThe `DISTINCT` keyword removes duplicate rows from query results.\\r\\n### **SELECT INTO Statement:**\\r\\n\\r\\n```sql\\r\\n-- Create a New Table from SELECT Query\\r\\nSELECT ID, FullName\\r\\nINTO NewTable\\r\\nFROM Student;\\r\\n\\r\\n-- Select Data from Newly Created Table\\r\\nSELECT *\\r\\nFROM NewTable;\\r\\n```\\r\\n\\r\\nThe `SELECT INTO` statement creates a new table from the result of a query.\\r\\n\\r\\n------\\r\\n\\r\\n## **VIEW:**\\r\\n\\r\\nA view is a virtual table based on the result of a SELECT statement.\\r\\n### CREATE VIEW:\\r\\n\\r\\n```sql\\r\\n-- Create a View\\r\\nCREATE VIEW HelloView AS\\r\\nSELECT FullName, Math\\r\\nFROM Student\\r\\nWHERE Math > 5;\\r\\n\\r\\n-- Select Data from the View\\r\\nSELECT *\\r\\nFROM HelloView;\\r\\n```\\r\\n\\r\\nUse  ``` CREATE VIEW ``` to define a view.\\r\\n\\r\\n## **SQL Operators (Continued):**\\r\\n\\r\\nAdditional SQL operators and their applications.\\r\\n### NOT NULL and IS NOT NULL:\\r\\n\\r\\n```sql\\r\\n-- Records with NULL Values\\r\\nSELECT ID, FullName, Math\\r\\nFROM Student\\r\\nWHERE Math IS NULL;\\r\\n\\r\\n-- Records with Non-NULL Values\\r\\nSELECT ID, FullName, Math\\r\\nFROM Student\\r\\nWHERE Math IS NOT NULL;\\r\\n```\\r\\n\\r\\nCheck for NULL or non-NULL values using  ``` IS NULL ``` and  ``` IS NOT NULL ``` .\\r\\n\\r\\n**Wildcards in LIKE Operator:**\\r\\n\\r\\nUtilize `%` and `_` for pattern matching in the `LIKE` operator.\\r\\n### Wildcards in LIKE Operator:\\r\\n\\r\\n```sql\\r\\n-- Pattern Matching with Wildcards\\r\\nSELECT FullName, Math\\r\\nFROM Student\\r\\nWHERE FullName LIKE \'%U%\';\\r\\n```\\r\\n\\r\\n``` % ``` represents zero or more characters, and  ``` _ ``` represents a single character in pattern matching.\\r\\n\\r\\n------\\r\\n\\r\\n## **JOIN Operation:**\\r\\n\\r\\nThe `JOIN` operation combines rows from two or more tables based on related columns.\\r\\n### JOIN Operation:\\r\\n\\r\\n```sql\\r\\n-- Combine Rows from Two Tables\\r\\nSELECT Student.ID, Student.FullName, Course.CourseName\\r\\nFROM Student\\r\\nJOIN Course ON Student.CourseID = Course.CourseID;\\r\\n```\\r\\n\\r\\nUse the  ``` JOIN ``` keyword with specified conditions for combining rows.\\r\\n\\r\\n------\\r\\n\\r\\n## **GROUP BY and HAVING:**\\r\\n\\r\\nThe `GROUP BY` clause groups rows that have the same values in specified columns, and `HAVING` applies conditions to grouped data.\\r\\n### GROUP BY and HAVING:\\r\\n\\r\\n```sql\\r\\n-- Group by CourseID and Calculate Average Math Score\\r\\nSELECT CourseID, AVG(Math) AS AvgMathScore\\r\\nFROM Student\\r\\nGROUP BY CourseID\\r\\nHAVING AVG(Math) > 7;\\r\\n```\\r\\n\\r\\nUse the ```GROUP BY``` clause for grouping and apply conditions with ```HAVING```.\\r\\n\\r\\n---\\r\\n\\r\\n## **Authentic Operators:**\\r\\n\\r\\n### **Arithmetic:**\\r\\n\\r\\n```sql\\r\\n-- Mathematical Wonders\\r\\nSELECT 5 + 3 AS \'Addition\', 10 - 4 AS \'Subtraction\', 6 * 2 AS \'Multiplication\', 16 / 4 AS \'Division\', 17 % 5 AS \'Modulo\';\\r\\n```\\r\\n\\r\\nIn this example, we perform basic arithmetic operations on numerical values, showcasing the versatility of SQL in handling mathematical tasks.\\r\\n\\r\\n### **Comparison:**\\r\\n\\r\\n```sql\\r\\n-- Unveiling Equality and More\\r\\nSELECT ID, FullName\\r\\nFROM Students\\r\\nWHERE Age = 25 OR Age > 30;\\r\\n```\\r\\n\\r\\nHere, we retrieve student records based on age, utilizing comparison operators to filter results for specific age criteria.\\r\\n\\r\\n### **Logical:**\\r\\n\\r\\n```sql\\r\\n-- Crafting Conditions with AND, OR, and NOT\\r\\nSELECT ID, FullName\\r\\nFROM Students\\r\\nWHERE Age > 25 AND Department = \'Engineering\';\\r\\n```\\r\\n\\r\\nCrafting a query that combines logical operators to filter students who are older than 25 and belong to the Engineering department.\\r\\n\\r\\n## **Selecting Wisely:**\\r\\n\\r\\n### **SELECT Syntax:**\\r\\n\\r\\n```sql\\r\\n-- Crafting the Perfect SELECT Statement\\r\\nSELECT FirstName, LastName, Age\\r\\nFROM Employees;\\r\\n```\\r\\n\\r\\nIn this example, we select specific columns from the Employees table, demonstrating the fundamental syntax of the SELECT statement.\\r\\n\\r\\n### **TOP & PERCENT:**\\r\\n\\r\\n```sql\\r\\n-- Limiting and Filtering Rows\\r\\nSELECT TOP 5 ID, ProductName, Price\\r\\nFROM Products\\r\\nORDER BY Price DESC;\\r\\n```\\r\\n\\r\\nLimiting query results to the top 5 rows, showcasing the use of TOP in conjunction with ORDER BY to filter and sort data effectively.\\r\\n\\r\\n### **ALIAS & DISTINCT:**\\r\\n\\r\\n```sql\\r\\n-- Bringing Clarity to Your Results\\r\\nSELECT AVG(Salary) AS \'Average Salary\'\\r\\nFROM Employees;\\r\\n```\\r\\n\\r\\nCalculating the average salary and assigning it an alias for clarity, highlighting the use of aliases in result sets.\\r\\n\\r\\n### **FROM, WHERE, VIEW, SELECT INTO:**\\r\\n\\r\\n```sql\\r\\n-- Mastering the Essentials\\r\\nSELECT EmployeeID, FirstName, LastName\\r\\nINTO NewEmployeeTable\\r\\nFROM Employees\\r\\nWHERE Department = \'IT\';\\r\\n```\\r\\n\\r\\nCreating a new table named NewEmployeeTable by selecting specific columns from the Employees table and filtering results based on the IT department.\\r\\n\\r\\n------\\r\\n\\r\\n## **SQL Built-in Functions: A Symphony of Capabilities**\\r\\n\\r\\n## **String Functions Showcase:**\\r\\n\\r\\n### **LOWER & UPPER:**\\r\\n\\r\\n```sql\\r\\n-- Transforming Case with Flair\\r\\nSELECT LOWER(\'Hello\') AS \'lower function\', UPPER(\'Hi there\') AS \'UPPER FUNCTION\';\\r\\n```\\r\\n\\r\\nApplying the LOWER and UPPER functions to manipulate text case, showcasing the versatility of string functions.\\r\\n\\r\\n### **LEN & REVERSE:**\\r\\n\\r\\n```sql\\r\\n-- Revealing Lengths and Reversing Strings\\r\\nSELECT LEN(\'Database\') AS \'Length\', REVERSE(\'SQL\') AS \'Reversed\';\\r\\n```\\r\\n\\r\\nUsing LEN to find the length of a string and REVERSE to reverse the characters, demonstrating string manipulation capabilities.\\r\\n\\r\\n### **CONCAT & SUBSTRING:**\\r\\n\\r\\n```sql\\r\\n-- Crafting and Extracting Strings\\r\\nSELECT CONCAT(\'Hello\', \' \', \'World\') AS \'CONCAT FUNCTION\', SUBSTRING(\'123456789\', 3, 4) AS \'SUBSTRING FUNCTION\';\\r\\n```\\r\\n\\r\\nCombining strings with CONCAT and extracting a substring, exemplifying the power of string functions in SQL.\\r\\n\\r\\n### **LTRIM & RTRIM:**\\r\\n\\r\\n```sql\\r\\n-- Trimming with Finesse\\r\\nSELECT \'|\' + LTRIM(\'   Hi\') + \'|\' AS \'LTRIM FUNCTION\', \'|\' + RTRIM(\'Hi   \') + \'|\' AS \'RTRIM FUNCTION\';\\r\\n```\\r\\n\\r\\nTrimming leading and trailing spaces using LTRIM and RTRIM, showcasing string manipulation for cleaner outputs.\\r\\n\\r\\n## **Datetime Functions: Unraveling Time\'s Mysteries:**\\r\\n\\r\\n### **MONTH, DAY, YEAR:**\\r\\n\\r\\n```sql\\r\\n-- Extracting Temporal Insights\\r\\nSELECT MONTH(\'11/13/2022\') AS \'MONTH FUNCTION\', DAY(\'11/13/2022\') AS \'DAY FUNCTION\', YEAR(\'11/13/2022\') AS \'YEAR FUNCTION\';\\r\\n```\\r\\n\\r\\nExtracting month, day, and year components from a date, unraveling temporal insights using datetime functions.\\r\\n\\r\\n### **GETDATE & ISDATE:**\\r\\n\\r\\n```sql\\r\\n-- Unleashing the Power of Time\\r\\nSELECT GETDATE() AS \'GETDATE FUNCTION\', ISDATE(\'11/13/2022\') AS \'ISDATE FUNCTION\';\\r\\n```\\r\\n\\r\\nUtilizing GETDATE to retrieve the current date and time, along with ISDATE to validate a date string.\\r\\n\\r\\n### **DATEPART:**\\r\\n\\r\\n```sql\\r\\n-- Precision in Date and Time\\r\\nSELECT DATEPART(HOUR, \'11/13/2022 19:20\') AS \'DATEPART HOUR\', DATEPART(MINUTE, \'11/13/2022 19:20\') AS \'DATEPART MINUTE\';\\r\\n```\\r\\n\\r\\nExtracting specific components like hour and minute using DATEPART, providing precision in date and time manipulation.\\r\\n\\r\\n### **Date Manipulation with DATEDIFF:**\\r\\n\\r\\n```sql\\r\\n-- Exploring the Gap Between Dates\\r\\nSELECT DATEDIFF(MONTH, \'10/15/2020\', \'11/25/2022\') AS \'DATEDIFF MONTHS\';\\r\\n```\\r\\n\\r\\nCalculating the difference in months between two dates using DATEDIFF, demonstrating date manipulation capabilities.\\r\\n\\r\\n## **Aggregate Functions: Bringing Data Together**\\r\\n\\r\\n### **SUM & AVG:**\\r\\n\\r\\n```sql\\r\\n-- Summing Up and Finding Averages\\r\\nSELECT SUM(Sales) AS \'Total Sales\', AVG(Price) AS \'Average Price\'\\r\\nFROM Products;\\r\\n```\\r\\n\\r\\nAggregating data with SUM and AVG, showcasing their roles in summarizing numeric values.\\r\\n\\r\\n### **MIN & MAX:**\\r\\n\\r\\n```sql\\r\\n-- Uncovering Extremes\\r\\nSELECT MIN(Age) AS \'Minimum Age\', MAX(Age) AS \'Maximum Age\'\\r\\nFROM Employees;\\r\\n```\\r\\n\\r\\nIdentifying the minimum and maximum values within a dataset using MIN and MAX aggregate functions.\\r\\n\\r\\n### **COUNT:**\\r\\n\\r\\n```sql\\r\\n-- Counting Rows Strategically\\r\\nSELECT COUNT(*) AS \'Total Records\'\\r\\nFROM Customers;\\r\\n```\\r\\n\\r\\nCounting the total number of records in the Customers table, emphasizing the strategic use of COUNT.\\r\\n\\r\\n### **Counting the COUNTs: Strategies Unveiled**\\r\\n\\r\\n### **COUNT(\\\\*) vs COUNT(1):**\\r\\n\\r\\n```sql\\r\\n-- Decoding the Mystery\\r\\nSELECT COUNT(*) AS \'Total Records\', COUNT(1) AS \'Another Count\'\\r\\nFROM Orders;\\r\\n```\\r\\n\\r\\nComparing COUNT(*) and COUNT(1) to decode the mystery of counting rows effectively.\\r\\n\\r\\n### **COUNT with DISTINCT:**\\r\\n\\r\\n```sql\\r\\n-- Navigating Unique Territories\\r\\nSELECT COUNT(DISTINCT Department) AS \'Distinct Departments\'\\r\\nFROM Employees;\\r\\n```\\r\\n\\r\\nCounting the distinct departments within the Employees table, illustrating the usage of COUNT with DISTINCT.\\r\\n\\r\\n### **Ceiling & Floor: Elevating and Lowering Numbers**\\r\\n\\r\\n### **CEILING & FLOOR:**\\r\\n\\r\\n```sql\\r\\n\\r\\n-- Rounding Up and Down\\r\\n```"},{"id":"/2023/12/25/Fundamentals-SQL","metadata":{"permalink":"/2023/12/25/Fundamentals-SQL","editUrl":"https://github.com/nhonvo/nhonvo.github.io/edit/main/blog/blog/2023-12-25-Fundamentals-SQL.md","source":"@site/blog/2023-12-25-Fundamentals-SQL.md","title":"Fundamentals-SQL","description":"\x3c!-- ---","date":"2023-12-25T00:00:00.000Z","formattedDate":"December 25, 2023","tags":[],"readingTime":4.905,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Querying and Data Modification","permalink":"/2023/12/25/Querying-and-Data-Modification"},"nextItem":{"title":"Clean Code concepts adapted for .NET/.NET Core","permalink":"/2024/1/9/Clean-code"}},"content":"\x3c!-- ---\\r\\nlayout:     post\\r\\ntitle:      \\"Basic SQL - Fundamental SQL\\"\\r\\nsubtitle:   \\"SQL Essentials Part 1\\"\\r\\ndate:       2023-12-25 12:00:00\\r\\nauthor:     \\"Truong Nhon\\"\\r\\n# hidden: true\\r\\n# header-img: \\"img/post-bg-apple-event-2015.jpg\\"\\r\\n# header-style: text\\r\\n# header-img-credit: \\"@WebdesignerDepot\\"\\r\\n# header-img-credit-href: \\"medium.com/@WebdesignerDepot/poll-should-css-become-more-like-a-programming-language-c74eb26a4270\\"\\r\\n# published: true\\r\\n# header-mask: 0.4\\r\\nmultilingual: false\\r\\ncatalog:      true\\r\\nlang: en\\r\\ntags:\\r\\n- sql\\r\\n- database\\r\\n---\\r\\n\\r\\n# INTRODUCTION\\r\\n\\r\\n## Database Fundamentals\\r\\n\\r\\n1. **What is a Database?**\\r\\n   - Definition: An organized collection of data stored and accessed electronically.\\r\\n   - Examples of data stored: Usernames, passwords, emails, addresses, salaries, images, videos, etc.\\r\\n2. **What is DBMS?**\\r\\n   - Definition: Database Management System, software managing databases.\\r\\n   - Control access, create, modify, delete databases, and manipulate data.\\r\\n   - RDBMS stores data in tables; queries are used for communication.\\r\\n3. **What is RDBMS?**\\r\\n   - Types of DBMS: Relational, Object-Oriented, Hierarchical, Network.\\r\\n   - Focus on relational databases with tables and relationships.\\r\\n\\r\\n## Entity Relation Model (ER Model)\\r\\n\\r\\n1. **ER Model Basics**\\r\\n   - Conceptual design representing relationships between data entities.\\r\\n   - Visualizes overall database design.\\r\\n2. **Entities, Attributes, and Relationships**\\r\\n   - Strong vs. weak entities, entity attributes, and ER notation.\\r\\n   - Understanding entity relationships: unary, binary, ternary, and n-nary.\\r\\n3. **Designing ER Model**\\r\\n   - Creating entities, attributes, and relationships in the context of a Shopee-like system.\\r\\n\\r\\n## Database Schema and Instance\\r\\n\\r\\n1. **Database Schema**\\r\\n   - Describing how data should look but not holding any data.\\r\\n   - Multiple tables with relationships make up a relational database schema.\\r\\n2. **Database Instance**\\r\\n   - A specific realization of a database at a particular moment in time.\\r\\n   - Understanding instances through practical examples.\\r\\n\\r\\n# KEY CONCEPT\\r\\n\\r\\n## SQL Server and Basic Querying\\r\\n\\r\\n1. **SQL Server Overview**\\r\\n   - A deep dive into Microsoft SQL Server, a robust relational database management system developed by Microsoft.\\r\\n   - Thorough exploration of SQL as Structured Query Language, employed for the storage, manipulation, and retrieval of data.\\r\\n2. **Data Definition Language (DDL)**\\r\\n   - In-depth exploration of DDL, with a specific focus on creating, modifying, and dropping databases.\\r\\n   - Practical demonstrations illustrating the creation, alteration, and removal of databases, ensuring hands-on learning.\\r\\n3. **SQL Data Types**\\r\\n   - A detailed breakdown of SQL data types, covering <u>NULL values, exact numbers, float, real, decimal, numeric, money, character strings, Unicode character strings, binary strings, and datetime data types.</u>\\r\\n   - Real-world examples and considerations for each data type, empowering a comprehensive grasp of their applications.\\r\\n4. **Tables and Constraints**\\r\\n   - A practical guide to creating tables enriched with constraints, such as PRIMARY KEY, FOREIGN KEY, UNIQUE, DEFAULT, NOT NULL, and CHECK constraints.\\r\\n   - Hands-on experience in adding and modifying constraints, fostering an environment of data accuracy and reliability.\\r\\n5. **Database Diagrams and Practices**\\r\\n   - Implementation of database diagrams as a visual aid to comprehend relationships between tables.\\r\\n   - Engaging in practical exercises to create tables, define constraints, and navigate the intricacies of database diagrams.\\r\\n6. **SQL Process and Conventions**\\r\\n\\r\\n   - A thorough understanding of the SQL process, accompanied by adherence to conventions for writing SQL statements.\\r\\n   ![img](/img/2023-12-25-Fundamentals-and-CRUD-Operations.assets/image-20231225151442556.png)\\r\\n\\r\\n   - Best practices for naming conventions, key word prefixes, and other considerations, elevating the quality and readability of SQL code.\\r\\n\\r\\n| key word        | prefix                  |\\r\\n| --------------- | ----------------------- |\\r\\n| PRIMARY KEY PK_ | Primary Key constraints |\\r\\n| FOREIGN KEY FK_ | Foreign Key constraints |\\r\\n| UNIQUE UNI_     | Unique constraints      |\\r\\n| DEFAULT DF_     | Default constraints     |\\r\\n| NOT NULL        | Follow after column     |\\r\\n| CHECK CHK_      | Check constraints       |\\r\\n| View view_      | Views                   |\\r\\n| Index IX_       | Indexes                 |\\r\\n\\r\\n# Practices and Examples\\r\\n\\r\\n## **Practice: Modify Database**\\r\\n\\r\\n- Modify the name of an existing database.\\r\\n- Syntax: `ALTER DATABASE old_name MODIFY NAME = new_name`\\r\\n- Example: `ALTER DATABASE HELLO_SQL MODIFY NAME = HELLO_SQL_RENAME`\\r\\n\\r\\n## **Practice: Drop Database**\\r\\n\\r\\n- Drop an existing database.\\r\\n- Syntax: `DROP DATABASE data_base_name`\\r\\n- Example: `DROP DATABASE HELLO_SQL_RENAME`\\r\\n\\r\\n## **Practice: Create Table**\\r\\n\\r\\n- Create a new table named \\"MyFirstTable\\" with various columns.\\r\\n\\r\\n- Syntax: `CREATE TABLE table_name (column1 datatype, column2 datatype, ...)`\\r\\n\\r\\n- Example:\\r\\n\\r\\n     ```sql\\r\\n     CREATE TABLE MyFirstTable(\\r\\n         ID int,\\r\\n         FullName nchar(50),\\r\\n         Email varchar(20),\\r\\n         PhoneNumber varchar(10),\\r\\n         DateOfBirth date,\\r\\n         Wallet money\\r\\n     );\\r\\n     ```\\r\\n\\r\\n## **Practice: Add Column and Modify Column**\\r\\n\\r\\n- Add a new column \\"City\\" to an existing table.\\r\\n\\r\\n- Modify the datatype of the \\"City\\" column.\\r\\n\\r\\n- Drop the \\"City\\" column.\\r\\n\\r\\n- Example:\\r\\n\\r\\n     ```sql\\r\\n     ALTER TABLE MyFirstTable\\r\\n     ADD City nvarchar(100);\\r\\n     \\r\\n     ALTER TABLE MyFirstTable\\r\\n     ALTER COLUMN City nvarchar(500);\\r\\n     \\r\\n     ALTER TABLE MyFirstTable\\r\\n     DROP COLUMN City;\\r\\n     ```\\r\\n\\r\\n## **Practice: Create Table with Constraints**\\r\\n\\r\\n- Create a new table named \\"MySecondTable\\" with various constraints.\\r\\n\\r\\n- Example:\\r\\n\\r\\n     ```sql\\r\\n     CREATE TABLE MySecondTable(\\r\\n         ID int PRIMARY KEY,\\r\\n         FullName nchar(50) NOT NULL,\\r\\n         Email varchar(20) UNIQUE,\\r\\n         PhoneNumber varchar(10),\\r\\n         DateOfBirth date DEFAULT GETDATE(),\\r\\n         Wallet money CHECK (Wallet > 0)\\r\\n     );\\r\\n     ```\\r\\n\\r\\n## **Practice: Add Constraints to Table**\\r\\n\\r\\n- Add constraints to an existing table \\"MySecondTableWithAlter.\\"\\r\\n\\r\\n- Example:\\r\\n\\r\\n     ```sql\\r\\n     ALTER TABLE MySecondTableWithAlter ALTER COLUMN ID int NOT NULL;\\r\\n     ALTER TABLE MySecondTableWithAlter ADD PRIMARY KEY (ID);\\r\\n     ALTER TABLE MySecondTableWithAlter ALTER COLUMN FullName nchar(50) NOT NULL;\\r\\n     ALTER TABLE MySecondTableWithAlter ADD UNIQUE (Email);\\r\\n     ALTER TABLE MySecondTableWithAlter ADD CONSTRAINT df_DateOfBirth DEFAULT GETDATE() FOR DateOfBirth;\\r\\n     ALTER TABLE MySecondTableWithAlter ADD CHECK (Wallet > 0);\\r\\n     ```\\r\\n\\r\\n## **Practice: Add Foreign Key**\\r\\n\\r\\n- Add a foreign key to an existing table \\"StudentEmail.\\"\\r\\n\\r\\n- Example:\\r\\n\\r\\n     ```sql\\r\\n     ALTER TABLE StudentEmail\\r\\n     ADD FOREIGN KEY (StudentID) REFERENCES Student(StudentID);\\r\\n     ```\\r\\n\\r\\n## **Practice: Auto-generate Identity**\\r\\n\\r\\n- Create a table with an auto-incrementing identity column.\\r\\n\\r\\n- Example:\\r\\n\\r\\n     ```sql\\r\\n     CREATE TABLE StudentWithAutoIncreaseID(\\r\\n         StudentID int PRIMARY KEY IDENTITY(1, 1),\\r\\n         FullName nchar(50) NOT NULL,\\r\\n         DateOfBirth date DEFAULT GETDATE()\\r\\n     );\\r\\n     ```\\r\\n\\r\\n## **Practice: Database Diagram**\\r\\n\\r\\n- Create tables and relationships using a database diagram.\\r\\n- Example: Refer to the \\"lecture2-practice-create-table-result.sql\\" file for visual representation.\\r\\n\\r\\n## **Practice: SQL Process**\\r\\n\\r\\n- Follow SQL conventions for writing statements.\\r\\n- Example: Adherence to conventions like uppercase SELECT, lowercase data types, Pascal case for variables, etc.\\r\\n\\r\\n## **Practice: View All Databases**\\r\\n\\r\\n- Retrieve a list of all databases in the master.sys.databases table.\\r\\n- Example: `SELECT name FROM master.sys.databases` --\x3e"},{"id":"/2024/1/9/Clean-code","metadata":{"permalink":"/2024/1/9/Clean-code","editUrl":"https://github.com/nhonvo/nhonvo.github.io/edit/main/blog/blog/2024-1-9-Clean-code.md","source":"@site/blog/2024-1-9-Clean-code.md","title":"Clean Code concepts adapted for .NET/.NET Core","description":"Naming","date":"2023-01-09T12:00:00.000Z","formattedDate":"January 9, 2023","tags":[{"label":"c#","permalink":"/tags/c"}],"readingTime":42.515,"hasTruncateMarker":false,"authors":[{"name":"Truong Nhon"}],"frontMatter":{"layout":"post","title":"Clean Code concepts adapted for .NET/.NET Core","subtitle":"","date":"2023-01-09T12:00:00.000Z","author":"Truong Nhon","hidden":false,"published":true,"multilingual":false,"catalog":true,"lang":"en","tags":["c#"]},"prevItem":{"title":"Fundamentals-SQL","permalink":"/2023/12/25/Fundamentals-SQL"}},"content":"## Naming\\r\\n\\r\\n<b>Avoid using bad names</b>\\r\\n\\r\\nA good name allows the code to be used by many developers. The name should reflect what it does and give context.\\r\\n\\r\\n**Bad:**\\r\\n\\r\\n```csharp\\r\\nint d;\\r\\n```\\r\\n\\r\\n**Good:**\\r\\n\\r\\n```csharp\\r\\nint daySinceModification;\\r\\n```\\r\\n\\r\\n<b>Avoid Misleading Names</b>\\r\\n\\r\\nName the variable to reflect what it is used for.\\r\\n\\r\\n**Bad:**\\r\\n\\r\\n```csharp\\r\\nvar dataFromDb = db.GetFromService().ToList();\\r\\n```\\r\\n\\r\\n**Good:**\\r\\n\\r\\n```csharp\\r\\nvar listOfEmployee = _employeeService.GetEmployees().ToList();\\r\\n```\\r\\n\\r\\n<b>Avoid Hungarian notation</b>\\r\\n\\r\\nHungarian Notation restates the type which is already present in the declaration. This is pointless since modern IDEs will identify the type.\\r\\n\\r\\n**Bad:**\\r\\n\\r\\n```csharp\\r\\nint iCounter;\\r\\nstring strFullName;\\r\\nDateTime dModifiedDate;\\r\\n```\\r\\n\\r\\n**Good:**\\r\\n\\r\\n```csharp\\r\\nint counter;\\r\\nstring fullName;\\r\\nDateTime modifiedDate;\\r\\n```\\r\\n\\r\\nHungarian Notation should also not be used in paramaters.\\r\\n\\r\\n**Bad:**\\r\\n\\r\\n```csharp\\r\\npublic bool IsShopOpen(string pDay, int pAmount)\\r\\n{\\r\\n    // some logic\\r\\n}\\r\\n```\\r\\n\\r\\n**Good:**\\r\\n\\r\\n```csharp\\r\\npublic bool IsShopOpen(string day, int amount)\\r\\n{\\r\\n    // some logic\\r\\n}\\r\\n```\\r\\n\\r\\n<b>Use consistent capitalization</b>\\r\\n\\r\\nCapitalization tells you a lot about your variables,\\r\\nfunctions, etc. These rules are subjective, so your team can choose whatever\\r\\nthey want. The point is, no matter what you all choose, just be consistent.\\r\\n\\r\\n**Bad:**\\r\\n\\r\\n```csharp\\r\\nconst int DAYS_IN_WEEK = 7;\\r\\nconst int daysInMonth = 30;\\r\\n\\r\\nvar songs = new List<string> { \'Back In Black\', \'Stairway to Heaven\', \'Hey Jude\' };\\r\\nvar Artists = new List<string> { \'ACDC\', \'Led Zeppelin\', \'The Beatles\' };\\r\\n\\r\\nbool EraseDatabase() {}\\r\\nbool Restore_database() {}\\r\\n\\r\\nclass animal {}\\r\\nclass Alpaca {}\\r\\n```\\r\\n\\r\\n**Good:**\\r\\n\\r\\n```csharp\\r\\nconst int DaysInWeek = 7;\\r\\nconst int DaysInMonth = 30;\\r\\n\\r\\nvar songs = new List<string> { \'Back In Black\', \'Stairway to Heaven\', \'Hey Jude\' };\\r\\nvar artists = new List<string> { \'ACDC\', \'Led Zeppelin\', \'The Beatles\' };\\r\\n\\r\\nbool EraseDatabase() {}\\r\\nbool RestoreDatabase() {}\\r\\n\\r\\nclass Animal {}\\r\\nclass Alpaca {}\\r\\n```\\r\\n\\r\\n<b>Use pronounceable names</b>\\r\\n\\r\\nIt will take time to investigate the meaning of the variables and functions when they are not pronounceable.\\r\\n\\r\\n**Bad:**\\r\\n\\r\\n```csharp\\r\\npublic class Employee\\r\\n{\\r\\n    public Datetime sWorkDate { get; set; } // what the heck is this\\r\\n    public Datetime modTime { get; set; } // same here\\r\\n}\\r\\n```\\r\\n\\r\\n**Good:**\\r\\n\\r\\n```csharp\\r\\npublic class Employee\\r\\n{\\r\\n    public Datetime StartWorkingDate { get; set; }\\r\\n    public Datetime ModificationTime { get; set; }\\r\\n}\\r\\n```\\r\\n\\r\\n<b>Use Camelcase notation</b>\\r\\n\\r\\nUse [Camelcase Notation](https://en.wikipedia.org/wiki/Camel_case) for variable and method paramaters.\\r\\n\\r\\n**Bad:**\\r\\n\\r\\n```csharp\\r\\nvar employeephone;\\r\\n\\r\\npublic double CalculateSalary(int workingdays, int workinghours)\\r\\n{\\r\\n    // some logic\\r\\n}\\r\\n```\\r\\n\\r\\n**Good:**\\r\\n\\r\\n```csharp\\r\\nvar employeePhone;\\r\\n\\r\\npublic double CalculateSalary(int workingDays, int workingHours)\\r\\n{\\r\\n    // some logic\\r\\n}\\r\\n```\\r\\n\\r\\n<b>Use domain name</b>\\r\\n\\r\\nPeople who read your code are also programmers. Naming things right will help everyone be on the same page. We don\'t want to take time to explain to everyone what a variable or function is for.\\r\\n\\r\\n**Good**\\r\\n\\r\\n```csharp\\r\\npublic class SingleObject\\r\\n{\\r\\n    // create an object of SingleObject\\r\\n    private static SingleObject _instance = new SingleObject();\\r\\n\\r\\n    // make the constructor private so that this class cannot be instantiated\\r\\n    private SingleObject() {}\\r\\n\\r\\n    // get the only object available\\r\\n    public static SingleObject GetInstance()\\r\\n    {\\r\\n        return _instance;\\r\\n    }\\r\\n\\r\\n    public string ShowMessage()\\r\\n    {\\r\\n        return \\"Hello World!\\";\\r\\n    }\\r\\n}\\r\\n\\r\\npublic static void main(String[] args)\\r\\n{\\r\\n    // illegal construct\\r\\n    // var object = new SingleObject();\\r\\n\\r\\n    // Get the only object available\\r\\n    var singletonObject = SingleObject.GetInstance();\\r\\n\\r\\n    // show the message\\r\\n    singletonObject.ShowMessage();\\r\\n}\\r\\n```\\r\\n\\r\\n## Variables\\r\\n\\r\\n<b>Avoid nesting too deeply and return early</b>\\r\\n\\r\\nToo many if else statements can make the code hard to follow. **Explicit is better than implicit**.\\r\\n\\r\\n**Bad:**\\r\\n\\r\\n```csharp\\r\\npublic bool IsShopOpen(string day)\\r\\n{\\r\\n    if (!string.IsNullOrEmpty(day))\\r\\n    {\\r\\n        day = day.ToLower();\\r\\n        if (day == \\"friday\\")\\r\\n        {\\r\\n            return true;\\r\\n        }\\r\\n        else if (day == \\"saturday\\")\\r\\n        {\\r\\n            return true;\\r\\n        }\\r\\n        else if (day == \\"sunday\\")\\r\\n        {\\r\\n            return true;\\r\\n        }\\r\\n        else\\r\\n        {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n    else\\r\\n    {\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n}\\r\\n```\\r\\n\\r\\n**Good:**\\r\\n\\r\\n```csharp\\r\\npublic bool IsShopOpen(string day)\\r\\n{\\r\\n    if (string.IsNullOrEmpty(day))\\r\\n    {\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    var openingDays = new[] { \\"friday\\", \\"saturday\\", \\"sunday\\" };\\r\\n    return openingDays.Any(d => d == day.ToLower());\\r\\n}\\r\\n```\\r\\n\\r\\n**Bad:**\\r\\n\\r\\n```csharp\\r\\npublic long Fibonacci(int n)\\r\\n{\\r\\n    if (n < 50)\\r\\n    {\\r\\n        if (n != 0)\\r\\n        {\\r\\n            if (n != 1)\\r\\n            {\\r\\n                return Fibonacci(n - 1) + Fibonacci(n - 2);\\r\\n            }\\r\\n            else\\r\\n            {\\r\\n                return 1;\\r\\n            }\\r\\n        }\\r\\n        else\\r\\n        {\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n    else\\r\\n    {\\r\\n        throw new System.Exception(\\"Not supported\\");\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n**Good:**\\r\\n\\r\\n```csharp\\r\\npublic long Fibonacci(int n)\\r\\n{\\r\\n    if (n == 0)\\r\\n    {\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    if (n == 1)\\r\\n    {\\r\\n        return 1;\\r\\n    }\\r\\n\\r\\n    if (n > 50)\\r\\n    {\\r\\n        throw new System.Exception(\\"Not supported\\");\\r\\n    }\\r\\n\\r\\n    return Fibonacci(n - 1) + Fibonacci(n - 2);\\r\\n}\\r\\n```\\r\\n\\r\\n<b>Avoid mental mapping</b>\\r\\n\\r\\nDon\u2019t force the reader of your code to translate what the variable means. **Explicit is better than implicit**.\\r\\n\\r\\n**Bad:**\\r\\n\\r\\n```csharp\\r\\nvar l = new[] { \\"Austin\\", \\"New York\\", \\"San Francisco\\" };\\r\\n\\r\\nfor (var i = 0; i < l.Count(); i++)\\r\\n{\\r\\n    var li = l[i];\\r\\n    DoStuff();\\r\\n    DoSomeOtherStuff();\\r\\n\\r\\n    // ...\\r\\n    // ...\\r\\n    // ...\\r\\n    // Wait, what is `li` for again?\\r\\n    Dispatch(li);\\r\\n}\\r\\n```\\r\\n\\r\\n**Good:**\\r\\n\\r\\n```csharp\\r\\nvar locations = new[] { \\"Austin\\", \\"New York\\", \\"San Francisco\\" };\\r\\n\\r\\nforeach (var location in locations)\\r\\n{\\r\\n    DoStuff();\\r\\n    DoSomeOtherStuff();\\r\\n\\r\\n    // ...\\r\\n    // ...\\r\\n    // ...\\r\\n    Dispatch(location);\\r\\n}\\r\\n```\\r\\n\\r\\n<b>Avoid magic string</b>\\r\\n\\r\\nMagic strings are string values that are specified directly within application code that have an impact on the application\u2019s behavior. Frequently, such strings will end up being duplicated within the system, and since they cannot automatically be updated using refactoring tools, they become a common source of bugs when changes are made to some strings but not others.\\r\\n\\r\\n**Bad**\\r\\n\\r\\n```csharp\\r\\nif (userRole == \\"Admin\\")\\r\\n{\\r\\n    // logic in here\\r\\n}\\r\\n```\\r\\n\\r\\n**Good**\\r\\n\\r\\n```csharp\\r\\nconst string ADMIN_ROLE = \\"Admin\\"\\r\\nif (userRole == ADMIN_ROLE)\\r\\n{\\r\\n    // logic in here\\r\\n}\\r\\n```\\r\\n\\r\\nUsing this we only have to change in centralize place and others will adapt it.\\r\\n\\r\\n<b>Don\'t add unneeded context</b>\\r\\n\\r\\nIf your class/object name tells you something, don\'t repeat that in your variable name.\\r\\n\\r\\n**Bad:**\\r\\n\\r\\n```csharp\\r\\npublic class Car\\r\\n{\\r\\n    public string CarMake { get; set; }\\r\\n    public string CarModel { get; set; }\\r\\n    public string CarColor { get; set; }\\r\\n\\r\\n    //...\\r\\n}\\r\\n```\\r\\n\\r\\n**Good:**\\r\\n\\r\\n```csharp\\r\\npublic class Car\\r\\n{\\r\\n    public string Make { get; set; }\\r\\n    public string Model { get; set; }\\r\\n    public string Color { get; set; }\\r\\n\\r\\n    //...\\r\\n}\\r\\n```\\r\\n\\r\\n<b>Use meaningful and pronounceable variable names</b>\\r\\n\\r\\n**Bad:**\\r\\n\\r\\n```csharp\\r\\nvar ymdstr = DateTime.UtcNow.ToString(\\"MMMM dd, yyyy\\");\\r\\n```\\r\\n\\r\\n**Good:**\\r\\n\\r\\n```csharp\\r\\nvar currentDate = DateTime.UtcNow.ToString(\\"MMMM dd, yyyy\\");\\r\\n```\\r\\n\\r\\n<b>Use the same vocabulary for the same type of variable</b>\\r\\n\\r\\n**Bad:**\\r\\n\\r\\n```csharp\\r\\nGetUserInfo();\\r\\nGetUserData();\\r\\nGetUserRecord();\\r\\nGetUserProfile();\\r\\n```\\r\\n\\r\\n**Good:**\\r\\n\\r\\n```csharp\\r\\nGetUser();\\r\\n```\\r\\n\\r\\n<b>Use searchable names (part 1)</b>\\r\\n\\r\\nWe will read more code than we will ever write. It\'s important that the code we do write is readable and searchable. By _not_ naming variables that end up being meaningful for understanding our program, we hurt our readers. Make your names searchable.\\r\\n\\r\\n**Bad:**\\r\\n\\r\\n```csharp\\r\\n// What the heck is data for?\\r\\nvar data = new { Name = \\"John\\", Age = 42 };\\r\\n\\r\\nvar stream1 = new MemoryStream();\\r\\nvar ser1 = new DataContractJsonSerializer(typeof(object));\\r\\nser1.WriteObject(stream1, data);\\r\\n\\r\\nstream1.Position = 0;\\r\\nvar sr1 = new StreamReader(stream1);\\r\\nConsole.Write(\\"JSON form of Data object: \\");\\r\\nConsole.WriteLine(sr1.ReadToEnd());\\r\\n```\\r\\n\\r\\n**Good:**\\r\\n\\r\\n```csharp\\r\\nvar person = new Person\\r\\n{\\r\\n    Name = \\"John\\",\\r\\n    Age = 42\\r\\n};\\r\\n\\r\\nvar stream2 = new MemoryStream();\\r\\nvar ser2 = new DataContractJsonSerializer(typeof(Person));\\r\\nser2.WriteObject(stream2, data);\\r\\n\\r\\nstream2.Position = 0;\\r\\nvar sr2 = new StreamReader(stream2);\\r\\nConsole.Write(\\"JSON form of Data object: \\");\\r\\nConsole.WriteLine(sr2.ReadToEnd());\\r\\n```\\r\\n\\r\\n<b>Use searchable names (part 2)</b>\\r\\n\\r\\n**Bad:**\\r\\n\\r\\n```csharp\\r\\nvar data = new { Name = \\"John\\", Age = 42, PersonAccess = 4};\\r\\n\\r\\n// What the heck is 4 for?\\r\\nif (data.PersonAccess == 4)\\r\\n{\\r\\n    // do edit ...\\r\\n}\\r\\n```\\r\\n\\r\\n**Good:**\\r\\n\\r\\n```csharp\\r\\npublic enum PersonAccess : int\\r\\n{\\r\\n    ACCESS_READ = 1,\\r\\n    ACCESS_CREATE = 2,\\r\\n    ACCESS_UPDATE = 4,\\r\\n    ACCESS_DELETE = 8\\r\\n}\\r\\n\\r\\nvar person = new Person\\r\\n{\\r\\n    Name = \\"John\\",\\r\\n    Age = 42,\\r\\n    PersonAccess= PersonAccess.ACCESS_CREATE\\r\\n};\\r\\n\\r\\nif (person.PersonAccess == PersonAccess.ACCESS_UPDATE)\\r\\n{\\r\\n    // do edit ...\\r\\n}\\r\\n```\\r\\n\\r\\n<b>Use explanatory variables</b>\\r\\n\\r\\n**Bad:**\\r\\n\\r\\n```csharp\\r\\nconst string Address = \\"One Infinite Loop, Cupertino 95014\\";\\r\\nvar cityZipCodeRegex = @\\"/^[^,\\\\]+[,\\\\\\\\s]+(.+?)\\\\s*(\\\\d{5})?$/\\";\\r\\nvar matches = Regex.Matches(Address, cityZipCodeRegex);\\r\\nif (matches[0].Success == true && matches[1].Success == true)\\r\\n{\\r\\n    SaveCityZipCode(matches[0].Value, matches[1].Value);\\r\\n}\\r\\n```\\r\\n\\r\\n**Good:**\\r\\n\\r\\nDecrease dependence on regex by naming subpatterns.\\r\\n\\r\\n```csharp\\r\\nconst string Address = \\"One Infinite Loop, Cupertino 95014\\";\\r\\nvar cityZipCodeWithGroupRegex = @\\"/^[^,\\\\]+[,\\\\\\\\s]+(?<city>.+?)\\\\s*(?<zipCode>\\\\d{5})?$/\\";\\r\\nvar matchesWithGroup = Regex.Match(Address, cityZipCodeWithGroupRegex);\\r\\nvar cityGroup = matchesWithGroup.Groups[\\"city\\"];\\r\\nvar zipCodeGroup = matchesWithGroup.Groups[\\"zipCode\\"];\\r\\nif(cityGroup.Success == true && zipCodeGroup.Success == true)\\r\\n{\\r\\n    SaveCityZipCode(cityGroup.Value, zipCodeGroup.Value);\\r\\n}\\r\\n```\\r\\n\\r\\n<b>Use default arguments instead of short circuiting or conditionals</b>\\r\\n\\r\\n**Not good:**\\r\\n\\r\\nThis is not good because `breweryName` can be `NULL`.\\r\\n\\r\\nThis opinion is more understandable than the previous version, but it better controls the value of the variable.\\r\\n\\r\\n```csharp\\r\\npublic void CreateMicrobrewery(string name = null)\\r\\n{\\r\\n    var breweryName = !string.IsNullOrEmpty(name) ? name : \\"Hipster Brew Co.\\";\\r\\n    // ...\\r\\n}\\r\\n```\\r\\n\\r\\n**Good:**\\r\\n\\r\\n```csharp\\r\\npublic void CreateMicrobrewery(string breweryName = \\"Hipster Brew Co.\\")\\r\\n{\\r\\n    // ...\\r\\n}\\r\\n```\\r\\n\\r\\n## Functions\\r\\n\\r\\n<b>Avoid side effects</b>\\r\\n\\r\\nA function produces a side effect if it does anything other than take a value in and return another value or values. A side effect could be writing to a file, modifying some global variable, or accidentally wiring all your money to a stranger.\\r\\n\\r\\nNow, you do need to have side effects in a program on occasion. Like the previous example, you might need to write to a file. What you want to do is to centralize where you are doing this. Don\'t have several functions and classes that write to a particular file. Have one service that does it. One and only one.\\r\\n\\r\\nThe main point is to avoid common pitfalls like sharing state between objects without any structure, using mutable data types that can be written to by anything, and not centralizing where your side effects occur. If you can do this, you will be happier\\r\\nthan the vast majority of other programmers.\\r\\n\\r\\n**Bad:**\\r\\n\\r\\n```csharp\\r\\n// Global variable referenced by following function.\\r\\n// If we had another function that used this name, now it\'d be an array and it could break it.\\r\\nvar name = \\"Ryan McDermott\\";\\r\\n\\r\\npublic void SplitAndEnrichFullName()\\r\\n{\\r\\n    var temp = name.Split(\\" \\");\\r\\n    name = $\\"His first name is {temp[0]}, and his last name is {temp[1]}\\"; // side effect\\r\\n}\\r\\n\\r\\nSplitAndEnrichFullName();\\r\\n\\r\\nConsole.WriteLine(name); // His first name is Ryan, and his last name is McDermott\\r\\n```\\r\\n\\r\\n**Good:**\\r\\n\\r\\n```csharp\\r\\npublic string SplitAndEnrichFullName(string name)\\r\\n{\\r\\n    var temp = name.Split(\\" \\");\\r\\n    return $\\"His first name is {temp[0]}, and his last name is {temp[1]}\\";\\r\\n}\\r\\n\\r\\nvar name = \\"Ryan McDermott\\";\\r\\nvar fullName = SplitAndEnrichFullName(name);\\r\\n\\r\\nConsole.WriteLine(name); // Ryan McDermott\\r\\nConsole.WriteLine(fullName); // His first name is Ryan, and his last name is McDermott\\r\\n```\\r\\n\\r\\n<b>Avoid negative conditionals</b>\\r\\n\\r\\n**Bad:**\\r\\n\\r\\n```csharp\\r\\npublic bool IsDOMNodeNotPresent(string node)\\r\\n{\\r\\n    // ...\\r\\n}\\r\\n\\r\\nif (!IsDOMNodeNotPresent(node))\\r\\n{\\r\\n    // ...\\r\\n}\\r\\n```\\r\\n\\r\\n**Good:**\\r\\n\\r\\n```csharp\\r\\npublic bool IsDOMNodePresent(string node)\\r\\n{\\r\\n    // ...\\r\\n}\\r\\n\\r\\nif (IsDOMNodePresent(node))\\r\\n{\\r\\n    // ...\\r\\n}\\r\\n```\\r\\n\\r\\n<b>Avoid conditionals</b>\\r\\n\\r\\nThis seems like an impossible task. Upon first hearing this, most people say, \\"how am I supposed to do anything without an `if` statement?\\" The answer is that you can use polymorphism to achieve the same task in many cases. The second question is usually, \\"well that\'s great but why would I want to do that?\\" The answer is a previous clean code concept we learned: a function should only do\\r\\none thing. When you have classes and functions that have `if` statements, you are telling your user that your function does more than one thing. Remember, just do one thing.\\r\\n\\r\\n**Bad:**\\r\\n\\r\\n```csharp\\r\\nclass Airplane\\r\\n{\\r\\n    // ...\\r\\n\\r\\n    public double GetCruisingAltitude()\\r\\n    {\\r\\n        switch (_type)\\r\\n        {\\r\\n            case \'777\':\\r\\n                return GetMaxAltitude() - GetPassengerCount();\\r\\n            case \'Air Force One\':\\r\\n                return GetMaxAltitude();\\r\\n            case \'Cessna\':\\r\\n                return GetMaxAltitude() - GetFuelExpenditure();\\r\\n        }\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n**Good:**\\r\\n\\r\\n```csharp\\r\\ninterface IAirplane\\r\\n{\\r\\n    // ...\\r\\n\\r\\n    double GetCruisingAltitude();\\r\\n}\\r\\n\\r\\nclass Boeing777 : IAirplane\\r\\n{\\r\\n    // ...\\r\\n\\r\\n    public double GetCruisingAltitude()\\r\\n    {\\r\\n        return GetMaxAltitude() - GetPassengerCount();\\r\\n    }\\r\\n}\\r\\n\\r\\nclass AirForceOne : IAirplane\\r\\n{\\r\\n    // ...\\r\\n\\r\\n    public double GetCruisingAltitude()\\r\\n    {\\r\\n        return GetMaxAltitude();\\r\\n    }\\r\\n}\\r\\n\\r\\nclass Cessna : IAirplane\\r\\n{\\r\\n    // ...\\r\\n\\r\\n    public double GetCruisingAltitude()\\r\\n    {\\r\\n        return GetMaxAltitude() - GetFuelExpenditure();\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n<b>Avoid type-checking (part 1)</b>\\r\\n\\r\\n**Bad:**\\r\\n\\r\\n```csharp\\r\\npublic Path TravelToTexas(object vehicle)\\r\\n{\\r\\n    if (vehicle.GetType() == typeof(Bicycle))\\r\\n    {\\r\\n        (vehicle as Bicycle).PeddleTo(new Location(\\"texas\\"));\\r\\n    }\\r\\n    else if (vehicle.GetType() == typeof(Car))\\r\\n    {\\r\\n        (vehicle as Car).DriveTo(new Location(\\"texas\\"));\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n**Good:**\\r\\n\\r\\n```csharp\\r\\npublic Path TravelToTexas(Traveler vehicle)\\r\\n{\\r\\n    vehicle.TravelTo(new Location(\\"texas\\"));\\r\\n}\\r\\n```\\r\\n\\r\\nor\\r\\n\\r\\n```csharp\\r\\n// pattern matching\\r\\npublic Path TravelToTexas(object vehicle)\\r\\n{\\r\\n    if (vehicle is Bicycle bicycle)\\r\\n    {\\r\\n        bicycle.PeddleTo(new Location(\\"texas\\"));\\r\\n    }\\r\\n    else if (vehicle is Car car)\\r\\n    {\\r\\n        car.DriveTo(new Location(\\"texas\\"));\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n<b>Avoid type-checking (part 2)</b>\\r\\n\\r\\n**Bad:**\\r\\n\\r\\n```csharp\\r\\npublic int Combine(dynamic val1, dynamic val2)\\r\\n{\\r\\n    int value;\\r\\n    if (!int.TryParse(val1, out value) || !int.TryParse(val2, out value))\\r\\n    {\\r\\n        throw new Exception(\'Must be of type Number\');\\r\\n    }\\r\\n\\r\\n    return val1 + val2;\\r\\n}\\r\\n```\\r\\n\\r\\n**Good:**\\r\\n\\r\\n```csharp\\r\\npublic int Combine(int val1, int val2)\\r\\n{\\r\\n    return val1 + val2;\\r\\n}\\r\\n```\\r\\n\\r\\n<b>Avoid flags in method parameters</b>\\r\\n\\r\\nA flag indicates that the method has more than one responsibility. It is best if the method only has a single responsibility. Split the method into two if a boolean parameter adds multiple responsibilities to the method.\\r\\n\\r\\n**Bad:**\\r\\n\\r\\n```csharp\\r\\npublic void CreateFile(string name, bool temp = false)\\r\\n{\\r\\n    if (temp)\\r\\n    {\\r\\n        Touch(\\"./temp/\\" + name);\\r\\n    }\\r\\n    else\\r\\n    {\\r\\n        Touch(name);\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n**Good:**\\r\\n\\r\\n```csharp\\r\\npublic void CreateFile(string name)\\r\\n{\\r\\n    Touch(name);\\r\\n}\\r\\n\\r\\npublic void CreateTempFile(string name)\\r\\n{\\r\\n    Touch(\\"./temp/\\"  + name);\\r\\n}\\r\\n```\\r\\n\\r\\n<b>Don\'t write to global functions</b>\\r\\n\\r\\nPolluting globals is a bad practice in many languages because you could clash with another library and the user of your API would be none-the-wiser until they get an exception in production. Let\'s think about an example: what if you wanted to have configuration array.\\r\\nYou could write global function like `Config()`, but it could clash with another library that tried to do the same thing.\\r\\n\\r\\n**Bad:**\\r\\n\\r\\n```csharp\\r\\npublic Dictionary<string, string> Config()\\r\\n{\\r\\n    return new Dictionary<string,string>(){\\r\\n        [\\"foo\\"] = \\"bar\\"\\r\\n    };\\r\\n}\\r\\n```\\r\\n\\r\\n**Good:**\\r\\n\\r\\n```csharp\\r\\nclass Configuration\\r\\n{\\r\\n    private Dictionary<string, string> _configuration;\\r\\n\\r\\n    public Configuration(Dictionary<string, string> configuration)\\r\\n    {\\r\\n        _configuration = configuration;\\r\\n    }\\r\\n\\r\\n    public string[] Get(string key)\\r\\n    {\\r\\n        return _configuration.ContainsKey(key) ? _configuration[key] : null;\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\nLoad configuration and create instance of `Configuration` class\\r\\n\\r\\n```csharp\\r\\nvar configuration = new Configuration(new Dictionary<string, string>() {\\r\\n    [\\"foo\\"] = \\"bar\\"\\r\\n});\\r\\n```\\r\\n\\r\\nAnd now you must use instance of `Configuration` in your application.\\r\\n\\r\\n<b>Don\'t use a Singleton pattern</b>\\r\\n\\r\\nSingleton is an [anti-pattern](https://en.wikipedia.org/wiki/Singleton_pattern). Paraphrased from Brian Button:\\r\\n\\r\\n1. They are generally used as a **global instance**, why is that so bad? Because **you hide the dependencies** of your application in your code, instead of exposing them through the interfaces. Making something global to avoid passing it around is a [code smell](https://en.wikipedia.org/wiki/Code_smell).\\r\\n2. They violate the [single responsibility principle](#single-responsibility-principle-srp): by virtue of the fact that **they control their own creation and lifecycle**.\\r\\n3. They inherently cause code to be tightly [coupled](https://en.wikipedia.org/wiki/Coupling_%28computer_programming%29). This makes faking them out under **test rather difficult** in many cases.\\r\\n4. They carry state around for the lifetime of the application. Another hit to testing since **you can end up with a situation where tests need to be ordered** which is a big no for unit tests. Why? Because each unit test should be independent from the other.\\r\\n\\r\\nThere is also very good thoughts by [Misko Hevery](http://misko.hevery.com/about/) about the [root of problem](http://misko.hevery.com/2008/08/25/root-cause-of-singletons/).\\r\\n\\r\\n**Bad:**\\r\\n\\r\\n```csharp\\r\\nclass DBConnection\\r\\n{\\r\\n    private static DBConnection _instance;\\r\\n\\r\\n    private DBConnection()\\r\\n    {\\r\\n        // ...\\r\\n    }\\r\\n\\r\\n    public static GetInstance()\\r\\n    {\\r\\n        if (_instance == null)\\r\\n        {\\r\\n            _instance = new DBConnection();\\r\\n        }\\r\\n\\r\\n        return _instance;\\r\\n    }\\r\\n\\r\\n    // ...\\r\\n}\\r\\n\\r\\nvar singleton = DBConnection.GetInstance();\\r\\n```\\r\\n\\r\\n**Good:**\\r\\n\\r\\n```csharp\\r\\nclass DBConnection\\r\\n{\\r\\n    public DBConnection(IOptions<DbConnectionOption> options)\\r\\n    {\\r\\n        // ...\\r\\n    }\\r\\n\\r\\n    // ...\\r\\n}\\r\\n```\\r\\n\\r\\nCreate instance of `DBConnection` class and configure it with [Option pattern](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options?view=aspnetcore-2.1).\\r\\n\\r\\n```csharp\\r\\nvar options = <resolve from IOC>;\\r\\nvar connection = new DBConnection(options);\\r\\n```\\r\\n\\r\\nAnd now you must use instance of `DBConnection` in your application.\\r\\n\\r\\n<b>Function arguments (2 or fewer ideally)</b>\\r\\n\\r\\nLimiting the amount of function parameters is incredibly important because it makes testing your function easier. Having more than three leads to a combinatorial explosion where you have to test tons of different cases with each separate argument.\\r\\n\\r\\nZero arguments is the ideal case. One or two arguments is ok, and three should be avoided. Anything more than that should be consolidated. Usually, if you have more than two arguments then your function is trying to do too much. In cases where it\'s not, most of the time a higher-level object will suffice as an argument.\\r\\n\\r\\n**Bad:**\\r\\n\\r\\n```csharp\\r\\npublic void CreateMenu(string title, string body, string buttonText, bool cancellable)\\r\\n{\\r\\n    // ...\\r\\n}\\r\\n```\\r\\n\\r\\n**Good:**\\r\\n\\r\\n```csharp\\r\\npublic class MenuConfig\\r\\n{\\r\\n    public string Title { get; set; }\\r\\n    public string Body { get; set; }\\r\\n    public string ButtonText { get; set; }\\r\\n    public bool Cancellable { get; set; }\\r\\n}\\r\\n\\r\\nvar config = new MenuConfig\\r\\n{\\r\\n    Title = \\"Foo\\",\\r\\n    Body = \\"Bar\\",\\r\\n    ButtonText = \\"Baz\\",\\r\\n    Cancellable = true\\r\\n};\\r\\n\\r\\npublic void CreateMenu(MenuConfig config)\\r\\n{\\r\\n    // ...\\r\\n}\\r\\n```\\r\\n\\r\\n<b>Functions should do one thing</b>\\r\\n\\r\\nThis is by far the most important rule in software engineering. When functions do more than one thing, they are harder to compose, test, and reason about. When you can isolate a function to just one action, they can be refactored easily and your code will read much\\r\\ncleaner. If you take nothing else away from this guide other than this, you\'ll be ahead of many developers.\\r\\n\\r\\n**Bad:**\\r\\n\\r\\n```csharp\\r\\npublic void SendEmailToListOfClients(string[] clients)\\r\\n{\\r\\n    foreach (var client in clients)\\r\\n    {\\r\\n        var clientRecord = db.Find(client);\\r\\n        if (clientRecord.IsActive())\\r\\n        {\\r\\n            Email(client);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n**Good:**\\r\\n\\r\\n```csharp\\r\\npublic void SendEmailToListOfClients(string[] clients)\\r\\n{\\r\\n    var activeClients = GetActiveClients(clients);\\r\\n    // Do some logic\\r\\n}\\r\\n\\r\\npublic List<Client> GetActiveClients(string[] clients)\\r\\n{\\r\\n    return db.Find(clients).Where(s => s.Status == \\"Active\\");\\r\\n}\\r\\n```\\r\\n\\r\\n<b>Function names should say what they do</b>\\r\\n\\r\\n**Bad:**\\r\\n\\r\\n```csharp\\r\\npublic class Email\\r\\n{\\r\\n    //...\\r\\n\\r\\n    public void Handle()\\r\\n    {\\r\\n        SendMail(this._to, this._subject, this._body);\\r\\n    }\\r\\n}\\r\\n\\r\\nvar message = new Email(...);\\r\\n// What is this? A handle for the message? Are we writing to a file now?\\r\\nmessage.Handle();\\r\\n```\\r\\n\\r\\n**Good:**\\r\\n\\r\\n```csharp\\r\\npublic class Email\\r\\n{\\r\\n    //...\\r\\n\\r\\n    public void Send()\\r\\n    {\\r\\n        SendMail(this._to, this._subject, this._body);\\r\\n    }\\r\\n}\\r\\n\\r\\nvar message = new Email(...);\\r\\n// Clear and obvious\\r\\nmessage.Send();\\r\\n```\\r\\n\\r\\n<b>Functions should only be one level of abstraction</b>\\r\\n\\r\\n> Not finished yet\\r\\n\\r\\nWhen you have more than one level of abstraction your function is usually doing too much. Splitting up functions leads to reusability and easier testing.\\r\\n\\r\\n**Bad:**\\r\\n\\r\\n```csharp\\r\\npublic string ParseBetterJSAlternative(string code)\\r\\n{\\r\\n    var regexes = [\\r\\n        // ...\\r\\n    ];\\r\\n\\r\\n    var statements = explode(\\" \\", code);\\r\\n    var tokens = new string[] {};\\r\\n    foreach (var regex in regexes)\\r\\n    {\\r\\n        foreach (var statement in statements)\\r\\n        {\\r\\n            // ...\\r\\n        }\\r\\n    }\\r\\n\\r\\n    var ast = new string[] {};\\r\\n    foreach (var token in tokens)\\r\\n    {\\r\\n        // lex...\\r\\n    }\\r\\n\\r\\n    foreach (var node in ast)\\r\\n    {\\r\\n        // parse...\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n**Bad too:**\\r\\n\\r\\nWe have carried out some of the functionality, but the `ParseBetterJSAlternative()` function is still very complex and not testable.\\r\\n\\r\\n```csharp\\r\\npublic string Tokenize(string code)\\r\\n{\\r\\n    var regexes = new string[]\\r\\n    {\\r\\n        // ...\\r\\n    };\\r\\n\\r\\n    var statements = explode(\\" \\", code);\\r\\n    var tokens = new string[] {};\\r\\n    foreach (var regex in regexes)\\r\\n    {\\r\\n        foreach (var statement in statements)\\r\\n        {\\r\\n            tokens[] = /* ... */;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return tokens;\\r\\n}\\r\\n\\r\\npublic string Lexer(string[] tokens)\\r\\n{\\r\\n    var ast = new string[] {};\\r\\n    foreach (var token in tokens)\\r\\n    {\\r\\n        ast[] = /* ... */;\\r\\n    }\\r\\n\\r\\n    return ast;\\r\\n}\\r\\n\\r\\npublic string ParseBetterJSAlternative(string code)\\r\\n{\\r\\n    var tokens = Tokenize(code);\\r\\n    var ast = Lexer(tokens);\\r\\n    foreach (var node in ast)\\r\\n    {\\r\\n        // parse...\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n**Good:**\\r\\n\\r\\nThe best solution is move out the dependencies of `ParseBetterJSAlternative()` function.\\r\\n\\r\\n```csharp\\r\\nclass Tokenizer\\r\\n{\\r\\n    public string Tokenize(string code)\\r\\n    {\\r\\n        var regexes = new string[] {\\r\\n            // ...\\r\\n        };\\r\\n\\r\\n        var statements = explode(\\" \\", code);\\r\\n        var tokens = new string[] {};\\r\\n        foreach (var regex in regexes)\\r\\n        {\\r\\n            foreach (var statement in statements)\\r\\n            {\\r\\n                tokens[] = /* ... */;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return tokens;\\r\\n    }\\r\\n}\\r\\n\\r\\nclass Lexer\\r\\n{\\r\\n    public string Lexify(string[] tokens)\\r\\n    {\\r\\n        var ast = new[] {};\\r\\n        foreach (var token in tokens)\\r\\n        {\\r\\n            ast[] = /* ... */;\\r\\n        }\\r\\n\\r\\n        return ast;\\r\\n    }\\r\\n}\\r\\n\\r\\nclass BetterJSAlternative\\r\\n{\\r\\n    private string _tokenizer;\\r\\n    private string _lexer;\\r\\n\\r\\n    public BetterJSAlternative(Tokenizer tokenizer, Lexer lexer)\\r\\n    {\\r\\n        _tokenizer = tokenizer;\\r\\n        _lexer = lexer;\\r\\n    }\\r\\n\\r\\n    public string Parse(string code)\\r\\n    {\\r\\n        var tokens = _tokenizer.Tokenize(code);\\r\\n        var ast = _lexer.Lexify(tokens);\\r\\n        foreach (var node in ast)\\r\\n        {\\r\\n            // parse...\\r\\n        }\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n<b>Function callers and callees should be close</b>\\r\\n\\r\\nIf a function calls another, keep those functions vertically close in the source file. Ideally, keep the caller right above the callee. We tend to read code from top-to-bottom, like a newspaper. Because of this, make your code read that way.\\r\\n\\r\\n**Bad:**\\r\\n\\r\\n```csharp\\r\\nclass PerformanceReview\\r\\n{\\r\\n    private readonly Employee _employee;\\r\\n\\r\\n    public PerformanceReview(Employee employee)\\r\\n    {\\r\\n        _employee = employee;\\r\\n    }\\r\\n\\r\\n    private IEnumerable<PeersData> LookupPeers()\\r\\n    {\\r\\n        return db.lookup(_employee, \'peers\');\\r\\n    }\\r\\n\\r\\n    private ManagerData LookupManager()\\r\\n    {\\r\\n        return db.lookup(_employee, \'manager\');\\r\\n    }\\r\\n\\r\\n    private IEnumerable<PeerReviews> GetPeerReviews()\\r\\n    {\\r\\n        var peers = LookupPeers();\\r\\n        // ...\\r\\n    }\\r\\n\\r\\n    public PerfReviewData PerfReview()\\r\\n    {\\r\\n        GetPeerReviews();\\r\\n        GetManagerReview();\\r\\n        GetSelfReview();\\r\\n    }\\r\\n\\r\\n    public ManagerData GetManagerReview()\\r\\n    {\\r\\n        var manager = LookupManager();\\r\\n    }\\r\\n\\r\\n    public EmployeeData GetSelfReview()\\r\\n    {\\r\\n        // ...\\r\\n    }\\r\\n}\\r\\n\\r\\nvar  review = new PerformanceReview(employee);\\r\\nreview.PerfReview();\\r\\n```\\r\\n\\r\\n**Good:**\\r\\n\\r\\n```csharp\\r\\nclass PerformanceReview\\r\\n{\\r\\n    private readonly Employee _employee;\\r\\n\\r\\n    public PerformanceReview(Employee employee)\\r\\n    {\\r\\n        _employee = employee;\\r\\n    }\\r\\n\\r\\n    public PerfReviewData PerfReview()\\r\\n    {\\r\\n        GetPeerReviews();\\r\\n        GetManagerReview();\\r\\n        GetSelfReview();\\r\\n    }\\r\\n\\r\\n    private IEnumerable<PeerReviews> GetPeerReviews()\\r\\n    {\\r\\n        var peers = LookupPeers();\\r\\n        // ...\\r\\n    }\\r\\n\\r\\n    private IEnumerable<PeersData> LookupPeers()\\r\\n    {\\r\\n        return db.lookup(_employee, \'peers\');\\r\\n    }\\r\\n\\r\\n    private ManagerData GetManagerReview()\\r\\n    {\\r\\n        var manager = LookupManager();\\r\\n        return manager;\\r\\n    }\\r\\n\\r\\n    private ManagerData LookupManager()\\r\\n    {\\r\\n        return db.lookup(_employee, \'manager\');\\r\\n    }\\r\\n\\r\\n    private EmployeeData GetSelfReview()\\r\\n    {\\r\\n        // ...\\r\\n    }\\r\\n}\\r\\n\\r\\nvar review = new PerformanceReview(employee);\\r\\nreview.PerfReview();\\r\\n```\\r\\n\\r\\n<b>Encapsulate conditionals</b>\\r\\n\\r\\n**Bad:**\\r\\n\\r\\n```csharp\\r\\nif (article.state == \\"published\\")\\r\\n{\\r\\n    // ...\\r\\n}\\r\\n```\\r\\n\\r\\n**Good:**\\r\\n\\r\\n```csharp\\r\\nif (article.IsPublished())\\r\\n{\\r\\n    // ...\\r\\n}\\r\\n```\\r\\n\\r\\n<b>Remove dead code</b>\\r\\n\\r\\nDead code is just as bad as duplicate code. There\'s no reason to keep it in your codebase. If it\'s not being called, get rid of it! It will still be safe in your version history if you still need it.\\r\\n\\r\\n**Bad:**\\r\\n\\r\\n```csharp\\r\\npublic void OldRequestModule(string url)\\r\\n{\\r\\n    // ...\\r\\n}\\r\\n\\r\\npublic void NewRequestModule(string url)\\r\\n{\\r\\n    // ...\\r\\n}\\r\\n\\r\\nvar request = NewRequestModule(requestUrl);\\r\\nInventoryTracker(\\"apples\\", request, \\"www.inventory-awesome.io\\");\\r\\n```\\r\\n\\r\\n**Good:**\\r\\n\\r\\n```csharp\\r\\npublic void RequestModule(string url)\\r\\n{\\r\\n    // ...\\r\\n}\\r\\n\\r\\nvar request = RequestModule(requestUrl);\\r\\nInventoryTracker(\\"apples\\", request, \\"www.inventory-awesome.io\\");\\r\\n```\\r\\n\\r\\n## Objects and Data Structures\\r\\n\\r\\n<b>Use getters and setters</b>\\r\\n\\r\\nIn C# / VB.NET you can set `public`, `protected` and `private` keywords for methods.\\r\\nUsing it, you can control properties modification on an object.\\r\\n\\r\\n- When you want to do more beyond getting an object property, you don\'t have to look up and change every accessor in your codebase.\\r\\n- Makes adding validation simple when doing a `set`.\\r\\n- Encapsulates the internal representation.\\r\\n- Easy to add logging and error handling when getting and setting.\\r\\n- Inheriting this class, you can override default functionality.\\r\\n- You can lazy load your object\'s properties, let\'s say getting it from a server.\\r\\n\\r\\nAdditionally, this is part of Open/Closed principle, from object-oriented design principles.\\r\\n\\r\\n**Bad:**\\r\\n\\r\\n```csharp\\r\\nclass BankAccount\\r\\n{\\r\\n    public double Balance = 1000;\\r\\n}\\r\\n\\r\\nvar bankAccount = new BankAccount();\\r\\n\\r\\n// Fake buy shoes...\\r\\nbankAccount.Balance -= 100;\\r\\n```\\r\\n\\r\\n**Good:**\\r\\n\\r\\n```csharp\\r\\nclass BankAccount\\r\\n{\\r\\n    private double _balance = 0.0D;\\r\\n\\r\\n    pubic double Balance {\\r\\n        get {\\r\\n            return _balance;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    public BankAccount(balance = 1000)\\r\\n    {\\r\\n       _balance = balance;\\r\\n    }\\r\\n\\r\\n    public void WithdrawBalance(int amount)\\r\\n    {\\r\\n        if (amount > _balance)\\r\\n        {\\r\\n            throw new Exception(\'Amount greater than available balance.\');\\r\\n        }\\r\\n\\r\\n        _balance -= amount;\\r\\n    }\\r\\n\\r\\n    public void DepositBalance(int amount)\\r\\n    {\\r\\n        _balance += amount;\\r\\n    }\\r\\n}\\r\\n\\r\\nvar bankAccount = new BankAccount();\\r\\n\\r\\n// Buy shoes...\\r\\nbankAccount.WithdrawBalance(price);\\r\\n\\r\\n// Get balance\\r\\nbalance = bankAccount.Balance;\\r\\n```\\r\\n\\r\\n<b>Make objects have private/protected members</b>\\r\\n\\r\\n**Bad:**\\r\\n\\r\\n```csharp\\r\\nclass Employee\\r\\n{\\r\\n    public string Name { get; set; }\\r\\n\\r\\n    public Employee(string name)\\r\\n    {\\r\\n        Name = name;\\r\\n    }\\r\\n}\\r\\n\\r\\nvar employee = new Employee(\\"John Doe\\");\\r\\nConsole.WriteLine(employee.Name); // Employee name: John Doe\\r\\n```\\r\\n\\r\\n**Good:**\\r\\n\\r\\n```csharp\\r\\nclass Employee\\r\\n{\\r\\n    public string Name { get; }\\r\\n\\r\\n    public Employee(string name)\\r\\n    {\\r\\n        Name = name;\\r\\n    }\\r\\n}\\r\\n\\r\\nvar employee = new Employee(\\"John Doe\\");\\r\\nConsole.WriteLine(employee.Name); // Employee name: John Doe\\r\\n```\\r\\n\\r\\n## Classes\\r\\n\\r\\n<b>Use method chaining</b>\\r\\n\\r\\nThis pattern is very useful and commonly used in many libraries. It allows your code to be expressive, and less verbose.\\r\\nFor that reason, use method chaining and take a look at how clean your code will be.\\r\\n\\r\\n**Good:**\\r\\n\\r\\n```csharp\\r\\npublic static class ListExtensions\\r\\n{\\r\\n    public static List<T> FluentAdd<T>(this List<T> list, T item)\\r\\n    {\\r\\n        list.Add(item);\\r\\n        return list;\\r\\n    }\\r\\n\\r\\n    public static List<T> FluentClear<T>(this List<T> list)\\r\\n    {\\r\\n        list.Clear();\\r\\n        return list;\\r\\n    }\\r\\n\\r\\n    public static List<T> FluentForEach<T>(this List<T> list, Action<T> action)\\r\\n    {\\r\\n        list.ForEach(action);\\r\\n        return list;\\r\\n    }\\r\\n\\r\\n    public static List<T> FluentInsert<T>(this List<T> list, int index, T item)\\r\\n    {\\r\\n        list.Insert(index, item);\\r\\n        return list;\\r\\n    }\\r\\n\\r\\n    public static List<T> FluentRemoveAt<T>(this List<T> list, int index)\\r\\n    {\\r\\n        list.RemoveAt(index);\\r\\n        return list;\\r\\n    }\\r\\n\\r\\n    public static List<T> FluentReverse<T>(this List<T> list)\\r\\n    {\\r\\n        list.Reverse();\\r\\n        return list;\\r\\n    }\\r\\n}\\r\\n\\r\\ninternal static void ListFluentExtensions()\\r\\n{\\r\\n    var list = new List<int>() { 1, 2, 3, 4, 5 }\\r\\n        .FluentAdd(1)\\r\\n        .FluentInsert(0, 0)\\r\\n        .FluentRemoveAt(1)\\r\\n        .FluentReverse()\\r\\n        .FluentForEach(value => value.WriteLine())\\r\\n        .FluentClear();\\r\\n}\\r\\n```\\r\\n\\r\\n<b>Prefer composition over inheritance</b>\\r\\n\\r\\nAs stated famously in [_Design Patterns_](https://en.wikipedia.org/wiki/Design_Patterns) by the Gang of Four,\\r\\nyou should prefer composition over inheritance where you can. There are lots of good reasons to use inheritance and lots of good reasons to use composition.\\r\\n\\r\\nThe main point for this maxim is that if your mind instinctively goes for inheritance, try to think if composition could model your problem better. In some cases it can.\\r\\n\\r\\nYou might be wondering then, \\"when should I use inheritance?\\" It\\r\\ndepends on your problem at hand, but this is a decent list of when inheritance makes more sense than composition:\\r\\n\\r\\n1. Your inheritance represents an \\"is-a\\" relationship and not a \\"has-a\\" relationship (Human->Animal vs. User->UserDetails).\\r\\n2. You can reuse code from the base classes (Humans can move like all animals).\\r\\n3. You want to make global changes to derived classes by changing a base class (Change the caloric expenditure of all animals when they move).\\r\\n\\r\\n**Bad:**\\r\\n\\r\\n```csharp\\r\\nclass Employee\\r\\n{\\r\\n    private string Name { get; set; }\\r\\n    private string Email { get; set; }\\r\\n\\r\\n    public Employee(string name, string email)\\r\\n    {\\r\\n        Name = name;\\r\\n        Email = email;\\r\\n    }\\r\\n\\r\\n    // ...\\r\\n}\\r\\n\\r\\n// Bad because Employees \\"have\\" tax data.\\r\\n// EmployeeTaxData is not a type of Employee\\r\\n\\r\\nclass EmployeeTaxData : Employee\\r\\n{\\r\\n    private string Name { get; }\\r\\n    private string Email { get; }\\r\\n\\r\\n    public EmployeeTaxData(string name, string email, string ssn, string salary)\\r\\n    {\\r\\n         // ...\\r\\n    }\\r\\n\\r\\n    // ...\\r\\n}\\r\\n```\\r\\n\\r\\n**Good:**\\r\\n\\r\\n```csharp\\r\\nclass EmployeeTaxData\\r\\n{\\r\\n    public string Ssn { get; }\\r\\n    public string Salary { get; }\\r\\n\\r\\n    public EmployeeTaxData(string ssn, string salary)\\r\\n    {\\r\\n        Ssn = ssn;\\r\\n        Salary = salary;\\r\\n    }\\r\\n\\r\\n    // ...\\r\\n}\\r\\n\\r\\nclass Employee\\r\\n{\\r\\n    public string Name { get; }\\r\\n    public string Email { get; }\\r\\n    public EmployeeTaxData TaxData { get; }\\r\\n\\r\\n    public Employee(string name, string email)\\r\\n    {\\r\\n        Name = name;\\r\\n        Email = email;\\r\\n    }\\r\\n\\r\\n    public void SetTax(string ssn, double salary)\\r\\n    {\\r\\n        TaxData = new EmployeeTaxData(ssn, salary);\\r\\n    }\\r\\n\\r\\n    // ...\\r\\n}\\r\\n```\\r\\n\\r\\n## SOLID\\r\\n\\r\\n<b>What is SOLID?</b>\\r\\n\\r\\n**SOLID** is the mnemonic acronym introduced by Michael Feathers for the first five principles named by Robert Martin, which meant five basic principles of object-oriented programming and design.\\r\\n\\r\\n- [S: Single Responsibility Principle (SRP)](#single-responsibility-principle-srp)\\r\\n- [O: Open/Closed Principle (OCP)](#openclosed-principle-ocp)\\r\\n- [L: Liskov Substitution Principle (LSP)](#liskov-substitution-principle-lsp)\\r\\n- [I: Interface Segregation Principle (ISP)](#interface-segregation-principle-isp)\\r\\n- [D: Dependency Inversion Principle (DIP)](#dependency-inversion-principle-dip)\\r\\n\\r\\n<b>Single Responsibility Principle (SRP)</b>\\r\\n\\r\\nAs stated in Clean Code, \\"There should never be more than one reason for a class to change\\". It\'s tempting to jam-pack a class with a lot of functionality, like when you can only take one suitcase on your flight. The issue with this is that your class won\'t be conceptually cohesive and it will give it many reasons to change. Minimizing the amount of times you need to change a class is important.\\r\\n\\r\\nIt\'s important because if too much functionality is in one class and you modify a piece of it, it can be difficult to understand how that will affect other dependent modules in your codebase.\\r\\n\\r\\n**Bad:**\\r\\n\\r\\n```csharp\\r\\nclass UserSettings\\r\\n{\\r\\n    private User User;\\r\\n\\r\\n    public UserSettings(User user)\\r\\n    {\\r\\n        User = user;\\r\\n    }\\r\\n\\r\\n    public void ChangeSettings(Settings settings)\\r\\n    {\\r\\n        if (verifyCredentials())\\r\\n        {\\r\\n            // ...\\r\\n        }\\r\\n    }\\r\\n\\r\\n    private bool VerifyCredentials()\\r\\n    {\\r\\n        // ...\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n**Good:**\\r\\n\\r\\n```csharp\\r\\nclass UserAuth\\r\\n{\\r\\n    private User User;\\r\\n\\r\\n    public UserAuth(User user)\\r\\n    {\\r\\n        User = user;\\r\\n    }\\r\\n\\r\\n    public bool VerifyCredentials()\\r\\n    {\\r\\n        // ...\\r\\n    }\\r\\n}\\r\\n\\r\\nclass UserSettings\\r\\n{\\r\\n    private User User;\\r\\n    private UserAuth Auth;\\r\\n\\r\\n    public UserSettings(User user)\\r\\n    {\\r\\n        User = user;\\r\\n        Auth = new UserAuth(user);\\r\\n    }\\r\\n\\r\\n    public void ChangeSettings(Settings settings)\\r\\n    {\\r\\n        if (Auth.VerifyCredentials())\\r\\n        {\\r\\n            // ...\\r\\n        }\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n<b>Open/Closed Principle (OCP)</b>\\r\\n\\r\\nAs stated by Bertrand Meyer, \\"software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification.\\" What does that mean though? This principle basically states that you should allow users to add new functionalities without changing existing code.\\r\\n\\r\\n**Bad:**\\r\\n\\r\\n```csharp\\r\\nabstract class AdapterBase\\r\\n{\\r\\n    protected string Name;\\r\\n\\r\\n    public string GetName()\\r\\n    {\\r\\n        return Name;\\r\\n    }\\r\\n}\\r\\n\\r\\nclass AjaxAdapter : AdapterBase\\r\\n{\\r\\n    public AjaxAdapter()\\r\\n    {\\r\\n        Name = \\"ajaxAdapter\\";\\r\\n    }\\r\\n}\\r\\n\\r\\nclass NodeAdapter : AdapterBase\\r\\n{\\r\\n    public NodeAdapter()\\r\\n    {\\r\\n        Name = \\"nodeAdapter\\";\\r\\n    }\\r\\n}\\r\\n\\r\\nclass HttpRequester : AdapterBase\\r\\n{\\r\\n    private readonly AdapterBase Adapter;\\r\\n\\r\\n    public HttpRequester(AdapterBase adapter)\\r\\n    {\\r\\n        Adapter = adapter;\\r\\n    }\\r\\n\\r\\n    public bool Fetch(string url)\\r\\n    {\\r\\n        var adapterName = Adapter.GetName();\\r\\n\\r\\n        if (adapterName == \\"ajaxAdapter\\")\\r\\n        {\\r\\n            return MakeAjaxCall(url);\\r\\n        }\\r\\n        else if (adapterName == \\"httpNodeAdapter\\")\\r\\n        {\\r\\n            return MakeHttpCall(url);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    private bool MakeAjaxCall(string url)\\r\\n    {\\r\\n        // request and return promise\\r\\n    }\\r\\n\\r\\n    private bool MakeHttpCall(string url)\\r\\n    {\\r\\n        // request and return promise\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n**Good:**\\r\\n\\r\\n```csharp\\r\\ninterface IAdapter\\r\\n{\\r\\n    bool Request(string url);\\r\\n}\\r\\n\\r\\nclass AjaxAdapter : IAdapter\\r\\n{\\r\\n    public bool Request(string url)\\r\\n    {\\r\\n        // request and return promise\\r\\n    }\\r\\n}\\r\\n\\r\\nclass NodeAdapter : IAdapter\\r\\n{\\r\\n    public bool Request(string url)\\r\\n    {\\r\\n        // request and return promise\\r\\n    }\\r\\n}\\r\\n\\r\\nclass HttpRequester\\r\\n{\\r\\n    private readonly IAdapter Adapter;\\r\\n\\r\\n    public HttpRequester(IAdapter adapter)\\r\\n    {\\r\\n        Adapter = adapter;\\r\\n    }\\r\\n\\r\\n    public bool Fetch(string url)\\r\\n    {\\r\\n        return Adapter.Request(url);\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n<b>Liskov Substitution Principle (LSP)</b>\\r\\n\\r\\nThis is a scary term for a very simple concept. It\'s formally defined as \\"If S is a subtype of T, then objects of type T may be replaced with objects of type S (i.e., objects of type S may substitute objects of type T) without altering any of the desirable properties of that program (correctness, task performed,\\r\\netc.).\\" That\'s an even scarier definition.\\r\\n\\r\\nThe best explanation for this is if you have a parent class and a child class, then the base class and child class can be used interchangeably without getting incorrect results. This might still be confusing, so let\'s take a look at the classic Square-Rectangle example. Mathematically, a square is a rectangle, but if you model it using the \\"is-a\\" relationship via inheritance, you quickly\\r\\nget into trouble.\\r\\n\\r\\n**Bad:**\\r\\n\\r\\n```csharp\\r\\nclass Rectangle\\r\\n{\\r\\n    protected double Width = 0;\\r\\n    protected double Height = 0;\\r\\n\\r\\n    public Drawable Render(double area)\\r\\n    {\\r\\n        // ...\\r\\n    }\\r\\n\\r\\n    public void SetWidth(double width)\\r\\n    {\\r\\n        Width = width;\\r\\n    }\\r\\n\\r\\n    public void SetHeight(double height)\\r\\n    {\\r\\n        Height = height;\\r\\n    }\\r\\n\\r\\n    public double GetArea()\\r\\n    {\\r\\n        return Width * Height;\\r\\n    }\\r\\n}\\r\\n\\r\\nclass Square : Rectangle\\r\\n{\\r\\n    public double SetWidth(double width)\\r\\n    {\\r\\n        Width = Height = width;\\r\\n    }\\r\\n\\r\\n    public double SetHeight(double height)\\r\\n    {\\r\\n        Width = Height = height;\\r\\n    }\\r\\n}\\r\\n\\r\\nDrawable RenderLargeRectangles(Rectangle rectangles)\\r\\n{\\r\\n    foreach (rectangle in rectangles)\\r\\n    {\\r\\n        rectangle.SetWidth(4);\\r\\n        rectangle.SetHeight(5);\\r\\n        var area = rectangle.GetArea(); // BAD: Will return 25 for Square. Should be 20.\\r\\n        rectangle.Render(area);\\r\\n    }\\r\\n}\\r\\n\\r\\nvar rectangles = new[] { new Rectangle(), new Rectangle(), new Square() };\\r\\nRenderLargeRectangles(rectangles);\\r\\n```\\r\\n\\r\\n**Good:**\\r\\n\\r\\n```csharp\\r\\nabstract class ShapeBase\\r\\n{\\r\\n    protected double Width = 0;\\r\\n    protected double Height = 0;\\r\\n\\r\\n    abstract public double GetArea();\\r\\n\\r\\n    public Drawable Render(double area)\\r\\n    {\\r\\n        // ...\\r\\n    }\\r\\n}\\r\\n\\r\\nclass Rectangle : ShapeBase\\r\\n{\\r\\n    public void SetWidth(double width)\\r\\n    {\\r\\n        Width = width;\\r\\n    }\\r\\n\\r\\n    public void SetHeight(double height)\\r\\n    {\\r\\n        Height = height;\\r\\n    }\\r\\n\\r\\n    public double GetArea()\\r\\n    {\\r\\n        return Width * Height;\\r\\n    }\\r\\n}\\r\\n\\r\\nclass Square : ShapeBase\\r\\n{\\r\\n    private double Length = 0;\\r\\n\\r\\n    public double SetLength(double length)\\r\\n    {\\r\\n        Length = length;\\r\\n    }\\r\\n\\r\\n    public double GetArea()\\r\\n    {\\r\\n        return Math.Pow(Length, 2);\\r\\n    }\\r\\n}\\r\\n\\r\\nDrawable RenderLargeRectangles(Rectangle rectangles)\\r\\n{\\r\\n    foreach (rectangle in rectangles)\\r\\n    {\\r\\n        if (rectangle is Square)\\r\\n        {\\r\\n            rectangle.SetLength(5);\\r\\n        }\\r\\n        else if (rectangle is Rectangle)\\r\\n        {\\r\\n            rectangle.SetWidth(4);\\r\\n            rectangle.SetHeight(5);\\r\\n        }\\r\\n\\r\\n        var area = rectangle.GetArea();\\r\\n        rectangle.Render(area);\\r\\n    }\\r\\n}\\r\\n\\r\\nvar shapes = new[] { new Rectangle(), new Rectangle(), new Square() };\\r\\nRenderLargeRectangles(shapes);\\r\\n```\\r\\n\\r\\n<b>Interface Segregation Principle (ISP)</b>\\r\\n\\r\\nISP states that \\"Clients should not be forced to depend upon interfaces that they do not use.\\"\\r\\n\\r\\nA good example to look at that demonstrates this principle is for\\r\\nclasses that require large settings objects. Not requiring clients to setup huge amounts of options is beneficial, because most of the time they won\'t need all of the settings. Making them optional helps prevent having a \\"fat interface\\".\\r\\n\\r\\n**Bad:**\\r\\n\\r\\n```csharp\\r\\npublic interface IEmployee\\r\\n{\\r\\n    void Work();\\r\\n    void Eat();\\r\\n}\\r\\n\\r\\npublic class Human : IEmployee\\r\\n{\\r\\n    public void Work()\\r\\n    {\\r\\n        // ....working\\r\\n    }\\r\\n\\r\\n    public void Eat()\\r\\n    {\\r\\n        // ...... eating in lunch break\\r\\n    }\\r\\n}\\r\\n\\r\\npublic class Robot : IEmployee\\r\\n{\\r\\n    public void Work()\\r\\n    {\\r\\n        //.... working much more\\r\\n    }\\r\\n\\r\\n    public void Eat()\\r\\n    {\\r\\n        //.... robot can\'t eat, but it must implement this method\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n**Good:**\\r\\n\\r\\nNot every worker is an employee, but every employee is an worker.\\r\\n\\r\\n```csharp\\r\\npublic interface IWorkable\\r\\n{\\r\\n    void Work();\\r\\n}\\r\\n\\r\\npublic interface IFeedable\\r\\n{\\r\\n    void Eat();\\r\\n}\\r\\n\\r\\npublic interface IEmployee : IFeedable, IWorkable\\r\\n{\\r\\n}\\r\\n\\r\\npublic class Human : IEmployee\\r\\n{\\r\\n    public void Work()\\r\\n    {\\r\\n        // ....working\\r\\n    }\\r\\n\\r\\n    public void Eat()\\r\\n    {\\r\\n        //.... eating in lunch break\\r\\n    }\\r\\n}\\r\\n\\r\\n// robot can only work\\r\\npublic class Robot : IWorkable\\r\\n{\\r\\n    public void Work()\\r\\n    {\\r\\n        // ....working\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n<b>Dependency Inversion Principle (DIP)</b>\\r\\n\\r\\nThis principle states two essential things:\\r\\n\\r\\n1. High-level modules should not depend on low-level modules. Both should depend on abstractions.\\r\\n2. Abstractions should not depend upon details. Details should depend on abstractions.\\r\\n\\r\\nThis can be hard to understand at first, but if you\'ve worked with .NET/.NET Core framework, you\'ve seen an implementation of this principle in the form of [Dependency Injection](https://martinfowler.com/articles/injection.html) (DI). While they are not identical concepts, DIP keeps high-level modules from knowing the details of its low-level modules and setting them up.\\r\\nIt can accomplish this through DI. A huge benefit of this is that it reduces the coupling between modules. Coupling is a very bad development pattern because it makes your code hard to refactor.\\r\\n\\r\\n**Bad:**\\r\\n\\r\\n```csharp\\r\\npublic abstract class EmployeeBase\\r\\n{\\r\\n    protected virtual void Work()\\r\\n    {\\r\\n        // ....working\\r\\n    }\\r\\n}\\r\\n\\r\\npublic class Human : EmployeeBase\\r\\n{\\r\\n    public override void Work()\\r\\n    {\\r\\n        //.... working much more\\r\\n    }\\r\\n}\\r\\n\\r\\npublic class Robot : EmployeeBase\\r\\n{\\r\\n    public override void Work()\\r\\n    {\\r\\n        //.... working much, much more\\r\\n    }\\r\\n}\\r\\n\\r\\npublic class Manager\\r\\n{\\r\\n    private readonly Robot _robot;\\r\\n    private readonly Human _human;\\r\\n\\r\\n    public Manager(Robot robot, Human human)\\r\\n    {\\r\\n        _robot = robot;\\r\\n        _human = human;\\r\\n    }\\r\\n\\r\\n    public void Manage()\\r\\n    {\\r\\n        _robot.Work();\\r\\n        _human.Work();\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n**Good:**\\r\\n\\r\\n```csharp\\r\\npublic interface IEmployee\\r\\n{\\r\\n    void Work();\\r\\n}\\r\\n\\r\\npublic class Human : IEmployee\\r\\n{\\r\\n    public void Work()\\r\\n    {\\r\\n        // ....working\\r\\n    }\\r\\n}\\r\\n\\r\\npublic class Robot : IEmployee\\r\\n{\\r\\n    public void Work()\\r\\n    {\\r\\n        //.... working much more\\r\\n    }\\r\\n}\\r\\n\\r\\npublic class Manager\\r\\n{\\r\\n    private readonly IEnumerable<IEmployee> _employees;\\r\\n\\r\\n    public Manager(IEnumerable<IEmployee> employees)\\r\\n    {\\r\\n        _employees = employees;\\r\\n    }\\r\\n\\r\\n    public void Manage()\\r\\n    {\\r\\n        foreach (var employee in _employees)\\r\\n        {\\r\\n            _employee.Work();\\r\\n        }\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n<b>Don\u2019t repeat yourself (DRY)</b>\\r\\n\\r\\nTry to observe the [DRY](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself) principle.\\r\\n\\r\\nDo your absolute best to avoid duplicate code. Duplicate code is bad because it means that there\'s more than one place to alter something if you need to change some logic.\\r\\n\\r\\nImagine if you run a restaurant and you keep track of your inventory: all your tomatoes, onions, garlic, spices, etc. If you have multiple lists that you keep this on, then all have to be updated when you serve a dish with tomatoes in them. If you only have one list, there\'s only one place to update!\\r\\n\\r\\nOftentimes you have duplicate code because you have two or more slightly different things, that share a lot in common, but their differences force you to have two or more separate functions that do much of the same things. Removing duplicate code means creating an abstraction that can handle this set of different things with just one function/module/class.\\r\\n\\r\\nGetting the abstraction right is critical, that\'s why you should follow the SOLID principles laid out in the [Classes](#classes) section. Bad abstractions can be worse than duplicate code, so be careful! Having said this, if you can make a good abstraction, do it! Don\'t repeat yourself, otherwise you\'ll find yourself updating multiple places anytime you want to change one thing.\\r\\n\\r\\n**Bad:**\\r\\n\\r\\n```csharp\\r\\npublic List<EmployeeData> ShowDeveloperList(Developers developers)\\r\\n{\\r\\n    foreach (var developers in developer)\\r\\n    {\\r\\n        var expectedSalary = developer.CalculateExpectedSalary();\\r\\n        var experience = developer.GetExperience();\\r\\n        var githubLink = developer.GetGithubLink();\\r\\n        var data = new[] {\\r\\n            expectedSalary,\\r\\n            experience,\\r\\n            githubLink\\r\\n        };\\r\\n\\r\\n        Render(data);\\r\\n    }\\r\\n}\\r\\n\\r\\npublic List<ManagerData> ShowManagerList(Manager managers)\\r\\n{\\r\\n    foreach (var manager in managers)\\r\\n    {\\r\\n        var expectedSalary = manager.CalculateExpectedSalary();\\r\\n        var experience = manager.GetExperience();\\r\\n        var githubLink = manager.GetGithubLink();\\r\\n        var data =\\r\\n        new[] {\\r\\n            expectedSalary,\\r\\n            experience,\\r\\n            githubLink\\r\\n        };\\r\\n\\r\\n        render(data);\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n**Good:**\\r\\n\\r\\n```csharp\\r\\npublic List<EmployeeData> ShowList(Employee employees)\\r\\n{\\r\\n    foreach (var employee in employees)\\r\\n    {\\r\\n        var expectedSalary = employees.CalculateExpectedSalary();\\r\\n        var experience = employees.GetExperience();\\r\\n        var githubLink = employees.GetGithubLink();\\r\\n        var data =\\r\\n        new[] {\\r\\n            expectedSalary,\\r\\n            experience,\\r\\n            githubLink\\r\\n        };\\r\\n\\r\\n        render(data);\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n**Very good:**\\r\\n\\r\\nIt is better to use a compact version of the code.\\r\\n\\r\\n```csharp\\r\\npublic List<EmployeeData> ShowList(Employee employees)\\r\\n{\\r\\n    foreach (var employee in employees)\\r\\n    {\\r\\n        render(new[] {\\r\\n            employee.CalculateExpectedSalary(),\\r\\n            employee.GetExperience(),\\r\\n            employee.GetGithubLink()\\r\\n        });\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n## Testing\\r\\n\\r\\n<b>Basic concept of testing</b>\\r\\n\\r\\nTesting is more important than shipping. If you have no tests or an\\r\\ninadequate amount, then every time you ship code you won\'t be sure that you didn\'t break anything. Deciding on what constitutes an adequate amount is up to your team, but having 100% coverage (all statements and branches) is how you achieve very high confidence and developer peace of mind. This means that in addition to having a great testing framework, you also need to use a [good coverage tool](https://docs.microsoft.com/en-us/visualstudio/test/using-code-coverage-to-determine-how-much-code-is-being-tested).\\r\\n\\r\\nThere\'s no excuse to not write tests. There\'s [plenty of good .NET test frameworks](https://github.com/thangchung/awesome-dotnet-core#testing), so find one that your team prefers. When you find one that works for your team, then aim to always write tests for every new feature/module you introduce. If your preferred method is Test Driven Development (TDD), that is great, but the main point is to just make sure you are reaching your coverage goals before launching any feature, or refactoring an existing one.\\r\\n\\r\\n<b>Single concept per test</b>\\r\\n\\r\\nEnsures that your tests are laser focused and not testing miscellaenous (non-related) things, forces [AAA patern](http://wiki.c2.com/?ArrangeActAssert) used to make your codes more clean and readable.\\r\\n\\r\\n**Bad:**\\r\\n\\r\\n```csharp\\r\\n\\r\\npublic class MakeDotNetGreatAgainTests\\r\\n{\\r\\n    [Fact]\\r\\n    public void HandleDateBoundaries()\\r\\n    {\\r\\n        var date = new MyDateTime(\\"1/1/2015\\");\\r\\n        date.AddDays(30);\\r\\n        Assert.Equal(\\"1/31/2015\\", date);\\r\\n\\r\\n        date = new MyDateTime(\\"2/1/2016\\");\\r\\n        date.AddDays(28);\\r\\n        Assert.Equal(\\"02/29/2016\\", date);\\r\\n\\r\\n        date = new MyDateTime(\\"2/1/2015\\");\\r\\n        date.AddDays(28);\\r\\n        Assert.Equal(\\"03/01/2015\\", date);\\r\\n    }\\r\\n}\\r\\n\\r\\n```\\r\\n\\r\\n**Good:**\\r\\n\\r\\n```csharp\\r\\n\\r\\npublic class MakeDotNetGreatAgainTests\\r\\n{\\r\\n    [Fact]\\r\\n    public void Handle30DayMonths()\\r\\n    {\\r\\n        // Arrange\\r\\n        var date = new MyDateTime(\\"1/1/2015\\");\\r\\n\\r\\n        // Act\\r\\n        date.AddDays(30);\\r\\n\\r\\n        // Assert\\r\\n        Assert.Equal(\\"1/31/2015\\", date);\\r\\n    }\\r\\n\\r\\n    [Fact]\\r\\n    public void HandleLeapYear()\\r\\n    {\\r\\n        // Arrange\\r\\n        var date = new MyDateTime(\\"2/1/2016\\");\\r\\n\\r\\n        // Act\\r\\n        date.AddDays(28);\\r\\n\\r\\n        // Assert\\r\\n        Assert.Equal(\\"02/29/2016\\", date);\\r\\n    }\\r\\n\\r\\n    [Fact]\\r\\n    public void HandleNonLeapYear()\\r\\n    {\\r\\n        // Arrange\\r\\n        var date = new MyDateTime(\\"2/1/2015\\");\\r\\n\\r\\n        // Act\\r\\n        date.AddDays(28);\\r\\n\\r\\n        // Assert\\r\\n        Assert.Equal(\\"03/01/2015\\", date);\\r\\n    }\\r\\n}\\r\\n\\r\\n```\\r\\n\\r\\n> Soure <https://www.codingblocks.net/podcast/how-to-write-amazing-unit-tests>\\r\\n\\r\\n## Concurrency\\r\\n\\r\\n<b>Use Async/Await</b>\\r\\n\\r\\n**Summary of Asynchronous Programming Guidelines**\\r\\n\\r\\n| Name              | Description                                       | Exceptions                      |\\r\\n| ----------------- | ------------------------------------------------- | ------------------------------- |\\r\\n| Avoid async void  | Prefer async Task methods over async void methods | Event handlers                  |\\r\\n| Async all the way | Don\'t mix blocking and async code                 | Console main method (C# <= 7.0) |\\r\\n| Configure context | Use `ConfigureAwait(false)` when you can          | Methods that require con\xadtext   |\\r\\n\\r\\n**The Async Way of Doing Things**\\r\\n\\r\\n| To Do This ...                           | Instead of This ...        | Use This             |\\r\\n| ---------------------------------------- | -------------------------- | -------------------- |\\r\\n| Retrieve the result of a background task | `Task.Wait or Task.Result` | `await`              |\\r\\n| Wait for any task to complete            | `Task.WaitAny`             | `await Task.WhenAny` |\\r\\n| Retrieve the results of multiple tasks   | `Task.WaitAll`             | `await Task.WhenAll` |\\r\\n| Wait a period of time                    | `Thread.Sleep`             | `await Task.Delay`   |\\r\\n\\r\\n**Best practice**\\r\\n\\r\\nThe async/await is the best for IO bound tasks (networking communication, database communication, http request, etc.) but it is not good to apply on computational bound tasks (traverse on the huge list, render a hugge image, etc.). Because it will release the holding thread to the thread pool and CPU/cores available will not involve to process those tasks. Therefore, we should avoid using Async/Await for computional bound tasks.\\r\\n\\r\\nFor dealing with computational bound tasks, prefer to use `Task.Factory.CreateNew` with `TaskCreationOptions` is `LongRunning`. It will start a new background thread to process a heavy computational bound task without release it back to the thread pool until the task being completed.\\r\\n\\r\\n**Know Your Tools**\\r\\n\\r\\nThere\'s a lot to learn about async and await, and it\'s natural to get a little disoriented. Here\'s a quick reference of solutions to common problems.\\r\\n\\r\\n**Solutions to Common Async Problems**\\r\\n\\r\\n| Problem                                         | Solution                                                                          |\\r\\n| ----------------------------------------------- | --------------------------------------------------------------------------------- |\\r\\n| Create a task to execute code                   | `Task.Run` or `TaskFactory.StartNew` (not the `Task` constructor or `Task.Start`) |\\r\\n| Create a task wrapper for an operation or event | `TaskFactory.FromAsync` or `TaskCompletionSource<T>`                              |\\r\\n| Support cancellation                            | `CancellationTokenSource` and `CancellationToken`                                 |\\r\\n| Report progress                                 | `IProgress<T>` and `Progress<T>`                                                  |\\r\\n| Handle streams of data                          | TPL Dataflow or Reactive Extensions                                               |\\r\\n| Synchronize access to a shared resource         | `SemaphoreSlim`                                                                   |\\r\\n| Asynchronously initialize a resource            | `AsyncLazy<T>`                                                                    |\\r\\n| Async-ready producer/consumer structures        | TPL Dataflow or `AsyncCollection<T>`                                              |\\r\\n\\r\\nRead the [Task-based Asynchronous Pattern (TAP) document](http://www.microsoft.com/download/en/details.aspx?id=19957).\\r\\nIt is extremely well-written, and includes guidance on API design and the proper use of async/await (including cancellation and progress reporting).\\r\\n\\r\\nThere are many new await-friendly techniques that should be used instead of the old blocking techniques. If you have any of these Old examples in your new async code, you\'re Doing It Wrong(TM):\\r\\n\\r\\n| Old                | New                                  | Description                                                   |\\r\\n| ------------------ | ------------------------------------ | ------------------------------------------------------------- |\\r\\n| `task.Wait`        | `await task`                         | Wait/await for a task to complete                             |\\r\\n| `task.Result`      | `await task`                         | Get the result of a completed task                            |\\r\\n| `Task.WaitAny`     | `await Task.WhenAny`                 | Wait/await for one of a collection of tasks to complete       |\\r\\n| `Task.WaitAll`     | `await Task.WhenAll`                 | Wait/await for every one of a collection of tasks to complete |\\r\\n| `Thread.Sleep`     | `await Task.Delay`                   | Wait/await for a period of time                               |\\r\\n| `Task` constructor | `Task.Run` or `TaskFactory.StartNew` | Create a code-based task                                      |\\r\\n\\r\\n> Source <https://gist.github.com/jonlabelle/841146854b23b305b50fa5542f84b20c>\\r\\n\\r\\n## Error Handling\\r\\n\\r\\n<b>Basic concept of error handling</b>\\r\\n\\r\\nThrown errors are a good thing! They mean the runtime has successfully identified when something in your program has gone wrong and it\'s letting you know by stopping function execution on the current stack, killing the process (in .NET/.NET Core), and notifying you in the console with a stack trace.\\r\\n\\r\\n<b>Don\'t use \'throw ex\' in catch block</b>\\r\\n\\r\\nIf you need to re-throw an exception after catching it, use just \'throw\'\\r\\nBy using this, you will save the stack trace. But in the bad option below,\\r\\nyou will lost the stack trace.\\r\\n\\r\\n**Bad:**\\r\\n\\r\\n```csharp\\r\\ntry\\r\\n{\\r\\n    // Do something..\\r\\n}\\r\\ncatch (Exception ex)\\r\\n{\\r\\n    // Any action something like roll-back or logging etc.\\r\\n    throw ex;\\r\\n}\\r\\n```\\r\\n\\r\\n**Good:**\\r\\n\\r\\n```csharp\\r\\ntry\\r\\n{\\r\\n    // Do something..\\r\\n}\\r\\ncatch (Exception ex)\\r\\n{\\r\\n    // Any action something like roll-back or logging etc.\\r\\n    throw;\\r\\n}\\r\\n```\\r\\n\\r\\n<b>Don\'t ignore caught errors</b>\\r\\n\\r\\nDoing nothing with a caught error doesn\'t give you the ability to ever fix or react to said error. Throwing the error isn\'t much better as often times it can get lost in a sea of things printed to the console. If you wrap any bit of code in a `try/catch` it means you think an error may occur there and therefore you should have a plan, or create a code path, for when it occurs.\\r\\n\\r\\n**Bad:**\\r\\n\\r\\n```csharp\\r\\ntry\\r\\n{\\r\\n    FunctionThatMightThrow();\\r\\n}\\r\\ncatch (Exception ex)\\r\\n{\\r\\n    // silent exception\\r\\n}\\r\\n```\\r\\n\\r\\n**Good:**\\r\\n\\r\\n```csharp\\r\\ntry\\r\\n{\\r\\n    FunctionThatMightThrow();\\r\\n}\\r\\ncatch (Exception error)\\r\\n{\\r\\n    NotifyUserOfError(error);\\r\\n\\r\\n    // Another option\\r\\n    ReportErrorToService(error);\\r\\n}\\r\\n```\\r\\n\\r\\n<b>Use multiple catch block instead of if conditions.</b>\\r\\n\\r\\nIf you need to take action according to type of the exception,\\r\\nyou better use multiple catch block for exception handling.\\r\\n\\r\\n**Bad:**\\r\\n\\r\\n```csharp\\r\\ntry\\r\\n{\\r\\n    // Do something..\\r\\n}\\r\\ncatch (Exception ex)\\r\\n{\\r\\n\\r\\n    if (ex is TaskCanceledException)\\r\\n    {\\r\\n        // Take action for TaskCanceledException\\r\\n    }\\r\\n    else if (ex is TaskSchedulerException)\\r\\n    {\\r\\n        // Take action for TaskSchedulerException\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n**Good:**\\r\\n\\r\\n```csharp\\r\\ntry\\r\\n{\\r\\n    // Do something..\\r\\n}\\r\\ncatch (TaskCanceledException ex)\\r\\n{\\r\\n    // Take action for TaskCanceledException\\r\\n}\\r\\ncatch (TaskSchedulerException ex)\\r\\n{\\r\\n    // Take action for TaskSchedulerException\\r\\n}\\r\\n```\\r\\n\\r\\n<b>Keep exception stack trace when rethrowing exceptions</b>\\r\\n\\r\\nC# allows the exception to be rethrown in a catch block using the `throw` keyword. It is a bad practice to throw a caught exception using `throw e;`. This statement resets the stack trace. Instead use `throw;`. This will keep the stack trace and provide a deeper insight about the exception.\\r\\nAnother option is to use a custom exception. Simply instantiate a new exception and set its inner exception property to the caught exception with throw `new CustomException(\\"some info\\", e);`. Adding information to an exception is a good practice as it will help with debugging. However, if the objective is to log an exception then use `throw;` to pass the buck to the caller.\\r\\n\\r\\n**Bad:**\\r\\n\\r\\n```csharp\\r\\ntry\\r\\n{\\r\\n    FunctionThatMightThrow();\\r\\n}\\r\\ncatch (Exception ex)\\r\\n{\\r\\n    logger.LogInfo(ex);\\r\\n    throw ex;\\r\\n}\\r\\n```\\r\\n\\r\\n**Good:**\\r\\n\\r\\n```csharp\\r\\ntry\\r\\n{\\r\\n    FunctionThatMightThrow();\\r\\n}\\r\\ncatch (Exception error)\\r\\n{\\r\\n    logger.LogInfo(error);\\r\\n    throw;\\r\\n}\\r\\n```\\r\\n\\r\\n**Good:**\\r\\n\\r\\n```csharp\\r\\ntry\\r\\n{\\r\\n    FunctionThatMightThrow();\\r\\n}\\r\\ncatch (Exception error)\\r\\n{\\r\\n    logger.LogInfo(error);\\r\\n    throw new CustomException(error);\\r\\n}\\r\\n```\\r\\n\\r\\n## Formatting\\r\\n\\r\\n<b>Uses <i>.editorconfig</i> file</b>\\r\\n\\r\\n**Bad:**\\r\\n\\r\\nHas many code formatting styles in the project. For example, indent style is `space` and `tab` mixed in the project.\\r\\n\\r\\n**Good:**\\r\\n\\r\\nDefine and maintain consistent code style in your codebase with the use of an `.editorconfig` file\\r\\n\\r\\n```csharp\\r\\nroot = true\\r\\n\\r\\n[*]\\r\\nindent_style = space\\r\\nindent_size = 2\\r\\nend_of_line = lf\\r\\ncharset = utf-8\\r\\ntrim_trailing_whitespace = true\\r\\ninsert_final_newline = true\\r\\n\\r\\n# C# files\\r\\n[*.cs]\\r\\nindent_size = 4\\r\\n# New line preferences\\r\\ncsharp_new_line_before_open_brace = all\\r\\ncsharp_new_line_before_else = true\\r\\ncsharp_new_line_before_catch = true\\r\\ncsharp_new_line_before_finally = true\\r\\ncsharp_new_line_before_members_in_object_initializers = true\\r\\ncsharp_new_line_before_members_in_anonymous_types = true\\r\\ncsharp_new_line_within_query_expression_clauses = true\\r\\n\\r\\n# Code files\\r\\n[*.{cs,csx,vb,vbx}]\\r\\nindent_size = 4\\r\\n\\r\\n# Indentation preferences\\r\\ncsharp_indent_block_contents = true\\r\\ncsharp_indent_braces = false\\r\\ncsharp_indent_case_contents = true\\r\\ncsharp_indent_switch_labels = true\\r\\ncsharp_indent_labels = one_less_than_current\\r\\n\\r\\n# avoid this. unless absolutely necessary\\r\\ndotnet_style_qualification_for_field = false:suggestion\\r\\ndotnet_style_qualification_for_property = false:suggestion\\r\\ndotnet_style_qualification_for_method = false:suggestion\\r\\ndotnet_style_qualification_for_event = false:suggestion\\r\\n\\r\\n# only use var when it\'s obvious what the variable type is\\r\\n# csharp_style_var_for_built_in_types = false:none\\r\\n# csharp_style_var_when_type_is_apparent = false:none\\r\\n# csharp_style_var_elsewhere = false:suggestion\\r\\n\\r\\n# use language keywords instead of BCL types\\r\\ndotnet_style_predefined_type_for_locals_parameters_members = true:suggestion\\r\\ndotnet_style_predefined_type_for_member_access = true:suggestion\\r\\n\\r\\n# name all constant fields using PascalCase\\r\\ndotnet_naming_rule.constant_fields_should_be_pascal_case.severity = suggestion\\r\\ndotnet_naming_rule.constant_fields_should_be_pascal_case.symbols  = constant_fields\\r\\ndotnet_naming_rule.constant_fields_should_be_pascal_case.style    = pascal_case_style\\r\\n\\r\\ndotnet_naming_symbols.constant_fields.applicable_kinds   = field\\r\\ndotnet_naming_symbols.constant_fields.required_modifiers = const\\r\\n\\r\\ndotnet_naming_style.pascal_case_style.capitalization = pascal_case\\r\\n\\r\\n# static fields should have s_ prefix\\r\\ndotnet_naming_rule.static_fields_should_have_prefix.severity = suggestion\\r\\ndotnet_naming_rule.static_fields_should_have_prefix.symbols  = static_fields\\r\\ndotnet_naming_rule.static_fields_should_have_prefix.style    = static_prefix_style\\r\\n\\r\\ndotnet_naming_symbols.static_fields.applicable_kinds   = field\\r\\ndotnet_naming_symbols.static_fields.required_modifiers = static\\r\\n\\r\\ndotnet_naming_style.static_prefix_style.required_prefix = s_\\r\\ndotnet_naming_style.static_prefix_style.capitalization = camel_case\\r\\n\\r\\n# internal and private fields should be _camelCase\\r\\ndotnet_naming_rule.camel_case_for_private_internal_fields.severity = suggestion\\r\\ndotnet_naming_rule.camel_case_for_private_internal_fields.symbols  = private_internal_fields\\r\\ndotnet_naming_rule.camel_case_for_private_internal_fields.style    = camel_case_underscore_style\\r\\n\\r\\ndotnet_naming_symbols.private_internal_fields.applicable_kinds = field\\r\\ndotnet_naming_symbols.private_internal_fields.applicable_accessibilities = private, internal\\r\\n\\r\\ndotnet_naming_style.camel_case_underscore_style.required_prefix = _\\r\\ndotnet_naming_style.camel_case_underscore_style.capitalization = camel_case\\r\\n\\r\\n# Code style defaults\\r\\ndotnet_sort_system_directives_first = true\\r\\ncsharp_preserve_single_line_blocks = true\\r\\ncsharp_preserve_single_line_statements = false\\r\\n\\r\\n# Expression-level preferences\\r\\ndotnet_style_object_initializer = true:suggestion\\r\\ndotnet_style_collection_initializer = true:suggestion\\r\\ndotnet_style_explicit_tuple_names = true:suggestion\\r\\ndotnet_style_coalesce_expression = true:suggestion\\r\\ndotnet_style_null_propagation = true:suggestion\\r\\n\\r\\n# Expression-bodied members\\r\\ncsharp_style_expression_bodied_methods = false:none\\r\\ncsharp_style_expression_bodied_constructors = false:none\\r\\ncsharp_style_expression_bodied_operators = false:none\\r\\ncsharp_style_expression_bodied_properties = true:none\\r\\ncsharp_style_expression_bodied_indexers = true:none\\r\\ncsharp_style_expression_bodied_accessors = true:none\\r\\n\\r\\n# Pattern matching\\r\\ncsharp_style_pattern_matching_over_is_with_cast_check = true:suggestion\\r\\ncsharp_style_pattern_matching_over_as_with_null_check = true:suggestion\\r\\ncsharp_style_inlined_variable_declaration = true:suggestion\\r\\n\\r\\n# Null checking preferences\\r\\ncsharp_style_throw_expression = true:suggestion\\r\\ncsharp_style_conditional_delegate_call = true:suggestion\\r\\n\\r\\n# Space preferences\\r\\ncsharp_space_after_cast = false\\r\\ncsharp_space_after_colon_in_inheritance_clause = true\\r\\ncsharp_space_after_comma = true\\r\\ncsharp_space_after_dot = false\\r\\ncsharp_space_after_keywords_in_control_flow_statements = true\\r\\ncsharp_space_after_semicolon_in_for_statement = true\\r\\ncsharp_space_around_binary_operators = before_and_after\\r\\ncsharp_space_around_declaration_statements = do_not_ignore\\r\\ncsharp_space_before_colon_in_inheritance_clause = true\\r\\ncsharp_space_before_comma = false\\r\\ncsharp_space_before_dot = false\\r\\ncsharp_space_before_open_square_brackets = false\\r\\ncsharp_space_before_semicolon_in_for_statement = false\\r\\ncsharp_space_between_empty_square_brackets = false\\r\\ncsharp_space_between_method_call_empty_parameter_list_parentheses = false\\r\\ncsharp_space_between_method_call_name_and_opening_parenthesis = false\\r\\ncsharp_space_between_method_call_parameter_list_parentheses = false\\r\\ncsharp_space_between_method_declaration_empty_parameter_list_parentheses = false\\r\\ncsharp_space_between_method_declaration_name_and_open_parenthesis = false\\r\\ncsharp_space_between_method_declaration_parameter_list_parentheses = false\\r\\ncsharp_space_between_parentheses = false\\r\\ncsharp_space_between_square_brackets = false\\r\\n\\r\\n[*.{asm,inc}]\\r\\nindent_size = 8\\r\\n\\r\\n# Xml project files\\r\\n[*.{csproj,vcxproj,vcxproj.filters,proj,nativeproj,locproj}]\\r\\nindent_size = 2\\r\\n\\r\\n# Xml config files\\r\\n[*.{props,targets,config,nuspec}]\\r\\nindent_size = 2\\r\\n\\r\\n[CMakeLists.txt]\\r\\nindent_size = 2\\r\\n\\r\\n[*.cmd]\\r\\nindent_size = 2\\r\\n\\r\\n```\\r\\n\\r\\n## Comments\\r\\n\\r\\n<b>Avoid positional markers</b>\\r\\n\\r\\nThey usually just add noise. Let the functions and variable names along with the proper indentation and formatting give the visual structure to your code.\\r\\n\\r\\n**Bad:**\\r\\n\\r\\n```csharp\\r\\n////////////////////////////////////////////////////////////////////////////////\\r\\n// Scope Model Instantiation\\r\\n////////////////////////////////////////////////////////////////////////////////\\r\\nvar model = new[]\\r\\n{\\r\\n    menu: \'foo\',\\r\\n    nav: \'bar\'\\r\\n};\\r\\n\\r\\n////////////////////////////////////////////////////////////////////////////////\\r\\n// Action setup\\r\\n////////////////////////////////////////////////////////////////////////////////\\r\\nvoid Actions()\\r\\n{\\r\\n    // ...\\r\\n};\\r\\n```\\r\\n\\r\\n**Bad:**\\r\\n\\r\\n```csharp\\r\\n\\r\\n#region Scope Model Instantiation\\r\\n\\r\\nvar model = {\\r\\n    menu: \'foo\',\\r\\n    nav: \'bar\'\\r\\n};\\r\\n\\r\\n#endregion\\r\\n\\r\\n#region Action setup\\r\\n\\r\\nvoid Actions() {\\r\\n    // ...\\r\\n};\\r\\n\\r\\n#endregion\\r\\n```\\r\\n\\r\\n**Good:**\\r\\n\\r\\n```csharp\\r\\nvar model = new[]\\r\\n{\\r\\n    menu: \'foo\',\\r\\n    nav: \'bar\'\\r\\n};\\r\\n\\r\\nvoid Actions()\\r\\n{\\r\\n    // ...\\r\\n};\\r\\n```\\r\\n\\r\\n<b>Don\'t leave commented out code in your codebase</b>\\r\\n\\r\\nVersion control exists for a reason. Leave old code in your history.\\r\\n\\r\\n**Bad:**\\r\\n\\r\\n```csharp\\r\\ndoStuff();\\r\\n// doOtherStuff();\\r\\n// doSomeMoreStuff();\\r\\n// doSoMuchStuff();\\r\\n```\\r\\n\\r\\n**Good:**\\r\\n\\r\\n```csharp\\r\\ndoStuff();\\r\\n```\\r\\n\\r\\n<b>Don\'t have journal comments</b>\\r\\n\\r\\nRemember, use version control! There\'s no need for dead code, commented code, and especially journal comments. Use `git log` to get history!\\r\\n\\r\\n**Bad:**\\r\\n\\r\\n```csharp\\r\\n/**\\r\\n * 2018-12-20: Removed monads, didn\'t understand them (RM)\\r\\n * 2017-10-01: Improved using special monads (JP)\\r\\n * 2016-02-03: Removed type-checking (LI)\\r\\n * 2015-03-14: Added combine with type-checking (JR)\\r\\n */\\r\\npublic int Combine(int a,int b)\\r\\n{\\r\\n    return a + b;\\r\\n}\\r\\n```\\r\\n\\r\\n**Good:**\\r\\n\\r\\n```csharp\\r\\npublic int Combine(int a,int b)\\r\\n{\\r\\n    return a + b;\\r\\n}\\r\\n```\\r\\n\\r\\n<b>Only comment things that have business logic complexity</b>\\r\\n\\r\\nComments are an apology, not a requirement. Good code _mostly_ documents itself.\\r\\n\\r\\n**Bad:**\\r\\n\\r\\n```csharp\\r\\npublic int HashIt(string data)\\r\\n{\\r\\n    // The hash\\r\\n    var hash = 0;\\r\\n\\r\\n    // Length of string\\r\\n    var length = data.length;\\r\\n\\r\\n    // Loop through every character in data\\r\\n    for (var i = 0; i < length; i++)\\r\\n    {\\r\\n        // Get character code.\\r\\n        const char = data.charCodeAt(i);\\r\\n        // Make the hash\\r\\n        hash = ((hash << 5) - hash) + char;\\r\\n        // Convert to 32-bit integer\\r\\n        hash &= hash;\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n**Better but still Bad:**\\r\\n\\r\\n```csharp\\r\\npublic int HashIt(string data)\\r\\n{\\r\\n    var hash = 0;\\r\\n    var length = data.length;\\r\\n    for (var i = 0; i < length; i++)\\r\\n    {\\r\\n        const char = data.charCodeAt(i);\\r\\n        hash = ((hash << 5) - hash) + char;\\r\\n\\r\\n        // Convert to 32-bit integer\\r\\n        hash &= hash;\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\nIf a comment explains WHAT the code is doing, it is probably a useless comment and can be implemented with a well named variable or function. The comment in the previous code could be replaced with a function named `ConvertTo32bitInt` so this comment is still useless.\\r\\nHowever it would be hard to express by code WHY the developer chose djb2 hash algorithm instead of sha-1 or another hash function. In that case a comment is acceptable.\\r\\n\\r\\n**Good:**\\r\\n\\r\\n```csharp\\r\\npublic int Hash(string data)\\r\\n{\\r\\n    var hash = 0;\\r\\n    var length = data.length;\\r\\n\\r\\n    for (var i = 0; i < length; i++)\\r\\n    {\\r\\n        var character = data[i];\\r\\n        // use of djb2 hash algorithm as it has a good compromise\\r\\n        // between speed and low collision with a very simple implementation\\r\\n        hash = ((hash << 5) - hash) + character;\\r\\n\\r\\n        hash = ConvertTo32BitInt(hash);\\r\\n    }\\r\\n    return hash;\\r\\n}\\r\\n\\r\\nprivate int ConvertTo32BitInt(int value)\\r\\n{\\r\\n    return value & value;\\r\\n}\\r\\n```"}]}')}}]);