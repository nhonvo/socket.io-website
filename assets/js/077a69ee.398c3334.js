"use strict";(self.webpackChunksample_website=self.webpackChunksample_website||[]).push([[7525],{5680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>b});var o=t(6540);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,o,i=function(e,n){if(null==e)return{};var t,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var a=o.createContext({}),l=function(e){var n=o.useContext(a),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=l(e.components);return o.createElement(a.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,a=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(t),m=i,b=u["".concat(a,".").concat(m)]||u[m]||d[m]||r;return t?o.createElement(b,s(s({ref:n},p),{},{components:t})):o.createElement(b,s({ref:n},p))}));function b(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,s=new Array(r);s[0]=m;var c={};for(var a in n)hasOwnProperty.call(n,a)&&(c[a]=n[a]);c.originalType=e,c[u]="string"==typeof e?e:i,s[1]=c;for(var l=2;l<r;l++)s[l]=t[l];return o.createElement.apply(null,s)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7972:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>c,toc:()=>a});var o=t(8168),i=(t(6540),t(5680));const r={title:"How to implement a subscription model"},s="How to implement a subscription model",c={type:"mdx",permalink:"/socket.io-website/how-to/implement-a-subscription-model",source:"@site/src/pages/how-to/implement-a-subscription-model.md",title:"How to implement a subscription model",description:"By default, events are sent over the wire even if there is no registered event handler on the other side.",frontMatter:{title:"How to implement a subscription model"}},a=[{value:"Client",id:"client",level:2},{value:"Server",id:"server",level:2},{value:"Additional notes",id:"additional-notes",level:2},{value:"List of subscriptions",id:"list-of-subscriptions",level:3},{value:"Connection state recovery",id:"connection-state-recovery",level:3}],l={toc:a},p="wrapper";function u(e){let{components:n,...t}=e;return(0,i.yg)(p,(0,o.A)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"how-to-implement-a-subscription-model"},"How to implement a subscription model"),(0,i.yg)("p",null,"By default, events are sent over the wire even if there is no registered event handler on the other side."),(0,i.yg)("admonition",{type:"note"},(0,i.yg)("p",{parentName:"admonition"},"You can catch those missing event handlers with a catch-all listener:"),(0,i.yg)("pre",{parentName:"admonition"},(0,i.yg)("code",{parentName:"pre",className:"language-js"},"socket.onAny((event) => {\n  if (socket.listeners(event).length === 0) {\n    console.log(`missing handler for event ${event}`);\n  }\n});\n")),(0,i.yg)("p",{parentName:"admonition"},"Reference:  ",(0,i.yg)("a",{parentName:"p",href:"/docs/v4/client-api/#socketonanycallback"},(0,i.yg)("inlineCode",{parentName:"a"},"onAny()")," method"))),(0,i.yg)("p",null,"To only receive a list of specific events (for example, if a part of your application only needs a handful of events), you can implement a subscription model:"),(0,i.yg)("h2",{id:"client"},"Client"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},'const subscriptions = [];\n\nfunction subscribe(topic) {\n  subscriptions.push(topic);\n  if (socket.connected) {\n    socket.emit("subscribe", [topic]);\n  }\n}\n\nfunction unsubscribe(topic) {\n  const i = subscriptions.indexOf(topic);\n  if (i !== -1) {\n    subscriptions.splice(i, 1);\n    if (socket.connected) {\n      socket.emit("unsubscribe", topic);\n    }\n  }\n}\n\n// restore the subscriptions upon reconnection\nsocket.on("connect", () => {\n  if (subscriptions.length && !socket.recovered) {\n    socket.emit("subscribe", subscriptions);\n  }\n});\n\nsubscribe("foo");\n')),(0,i.yg)("h2",{id:"server"},"Server"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},'io.on("connection", (socket) => {\n  socket.on("subscribe", (topics) => {\n    socket.join(topics);\n  });\n\n  socket.on("unsubscribe", (topic) => {\n    socket.leave(topic);\n  });\n\n  // send an event only to clients that have shown interest in the "foo" topic\n  io.to("foo").emit("foo");\n});\n')),(0,i.yg)("h2",{id:"additional-notes"},"Additional notes"),(0,i.yg)("h3",{id:"list-of-subscriptions"},"List of subscriptions"),(0,i.yg)("p",null,"We could have used a ES6 Set for the subscriptions on the client side:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},'const subscriptions = new Set();\n\nfunction subscribe(topic) {\n  subscriptions.add(topic);\n  if (socket.connected) {\n    socket.emit("subscribe", [topic]);\n  }\n}\n\nfunction unsubscribe(topic) {\n  const deleted = subscriptions.delete(topic);\n  if (deleted && socket.connected) {\n    socket.emit("unsubscribe", topic);\n  }\n}\n\n// restore the subscriptions upon reconnection\nsocket.on("connect", () => {\n  if (subscriptions.size) {\n    socket.emit("subscribe", [...subscriptions]);\n  }\n});\n')),(0,i.yg)("p",null,"Which is cleaner (no need to handle duplicate subscriptions, for example) but would require a polyfill if you need to target ",(0,i.yg)("a",{parentName:"p",href:"https://caniuse.com/mdn-javascript_builtins_set"},"old platforms"),"."),(0,i.yg)("h3",{id:"connection-state-recovery"},"Connection state recovery"),(0,i.yg)("p",null,'In the "connect" handler:'),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},'socket.on("connect", () => {\n  if (subscriptions.length && !socket.recovered) {\n    socket.emit("subscribe", subscriptions);\n  }\n});\n')),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"!socket.recovered")," condition is related to the ",(0,i.yg)("a",{parentName:"p",href:"/docs/v4/connection-state-recovery"},"Connection state recovery feature"),"."),(0,i.yg)("p",null,"If the connection state was successfully recovered, then the subscriptions (the rooms on the server side) will be automatically restored."),(0,i.yg)("p",null,"Reference: ",(0,i.yg)("a",{parentName:"p",href:"/docs/v4/client-api/#socketrecovered"},(0,i.yg)("inlineCode",{parentName:"a"},"socket.recovered")," attribute")))}u.isMDXComponent=!0}}]);