"use strict";(self.webpackChunksample_website=self.webpackChunksample_website||[]).push([[9540],{5680:(e,r,l)=>{l.d(r,{xA:()=>m,yg:()=>p});var n=l(6540);function a(e,r,l){return r in e?Object.defineProperty(e,r,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[r]=l,e}function u(e,r){var l=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),l.push.apply(l,n)}return l}function t(e){for(var r=1;r<arguments.length;r++){var l=null!=arguments[r]?arguments[r]:{};r%2?u(Object(l),!0).forEach((function(r){a(e,r,l[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):u(Object(l)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(l,r))}))}return e}function o(e,r){if(null==e)return{};var l,n,a=function(e,r){if(null==e)return{};var l,n,a={},u=Object.keys(e);for(n=0;n<u.length;n++)l=u[n],r.indexOf(l)>=0||(a[l]=e[l]);return a}(e,r);if(Object.getOwnPropertySymbols){var u=Object.getOwnPropertySymbols(e);for(n=0;n<u.length;n++)l=u[n],r.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(a[l]=e[l])}return a}var s=n.createContext({}),i=function(e){var r=n.useContext(s),l=r;return e&&(l="function"==typeof e?e(r):t(t({},r),e)),l},m=function(e){var r=i(e.components);return n.createElement(s.Provider,{value:r},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},g=n.forwardRef((function(e,r){var l=e.components,a=e.mdxType,u=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),d=i(l),g=a,p=d["".concat(s,".").concat(g)]||d[g]||c[g]||u;return l?n.createElement(p,t(t({ref:r},m),{},{components:l})):n.createElement(p,t({ref:r},m))}));function p(e,r){var l=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var u=l.length,t=new Array(u);t[0]=g;var o={};for(var s in r)hasOwnProperty.call(r,s)&&(o[s]=r[s]);o.originalType=e,o[d]="string"==typeof e?e:a,t[1]=o;for(var i=2;i<u;i++)t[i]=l[i];return n.createElement.apply(null,t)}return n.createElement.apply(null,l)}g.displayName="MDXCreateElement"},576:(e,r,l)=>{l.r(r),l.d(r,{assets:()=>s,contentTitle:()=>t,default:()=>c,frontMatter:()=>u,metadata:()=>o,toc:()=>i});var n=l(8168),a=(l(6540),l(5680));const u={layout:"post",title:"Advanced topic in SQL",subtitle:"SQL Essentials Part 3",date:new Date("2023-12-25T15:00:00.000Z"),author:"Truong Nhon",multilingual:!1,catalog:!0,lang:"en",tags:["sql","database"]},t=void 0,o={permalink:"/2023/12/25/Advanced-Topics-in-SQL",editUrl:"https://github.com/nhonvo/nhonvo.github.io/edit/main/blog/blog/2023-12-25-Advanced-Topics-in-SQL.md",source:"@site/blog/2023-12-25-Advanced-Topics-in-SQL.md",title:"Advanced topic in SQL",description:"SQL Clauses",date:"2023-12-25T15:00:00.000Z",formattedDate:"December 25, 2023",tags:[{label:"sql",permalink:"/tags/sql"},{label:"database",permalink:"/tags/database"}],readingTime:5.935,hasTruncateMarker:!1,authors:[{name:"Truong Nhon"}],frontMatter:{layout:"post",title:"Advanced topic in SQL",subtitle:"SQL Essentials Part 3",date:"2023-12-25T15:00:00.000Z",author:"Truong Nhon",multilingual:!1,catalog:!0,lang:"en",tags:["sql","database"]},prevItem:{title:"dotnet command cheatsheat",permalink:"/2023/12/29/net-cheatsheet"},nextItem:{title:"Querying and Data Modification",permalink:"/2023/12/25/Querying-and-Data-Modification"}},s={authorsImageUrls:[void 0]},i=[{value:"SQL Clauses",id:"sql-clauses",level:2},{value:"Why Do We Need JOIN?",id:"why-do-we-need-join",level:2},{value:"INNER JOIN: A Deeper Dive",id:"inner-join-a-deeper-dive",level:2},{value:"JOIN More Than 2 Tables",id:"join-more-than-2-tables",level:2},{value:"LEFT JOIN: Embracing Incompleteness",id:"left-join-embracing-incompleteness",level:2},{value:"RIGHT JOIN: Balancing the Equation",id:"right-join-balancing-the-equation",level:2},{value:"FULL JOIN: Embracing Completeness",id:"full-join-embracing-completeness",level:2},{value:"LEFT EXCLUDING JOIN: Seeking the Unique",id:"left-excluding-join-seeking-the-unique",level:2},{value:"RIGHT EXCLUDING JOIN: Excluding to the Right",id:"right-excluding-join-excluding-to-the-right",level:2},{value:"OUTER EXCLUDING JOIN: Excluding in Unison",id:"outer-excluding-join-excluding-in-unison",level:2},{value:"SELF JOIN: Connecting Within",id:"self-join-connecting-within",level:2},{value:"CROSS JOIN: Expanding Horizons",id:"cross-join-expanding-horizons",level:2},{value:"UNION: Merging Similarities",id:"union-merging-similarities",level:2},{value:"UNION ALL: Embracing All",id:"union-all-embracing-all",level:2},{value:"Sub Queries and Advanced Operators",id:"sub-queries-and-advanced-operators",level:2},{value:"What We Will Explore Today?",id:"what-we-will-explore-today",level:2},{value:"Subquery Basics",id:"subquery-basics",level:2},{value:"Example 1: Subquery for Average",id:"example-1-subquery-for-average",level:2},{value:"Example 2: Subquery in WHERE Clause",id:"example-2-subquery-in-where-clause",level:2},{value:"Types of Subqueries",id:"types-of-subqueries",level:2},{value:"Single-Row Subquery",id:"single-row-subquery",level:2},{value:"Exercise: Single-Row Subquery",id:"exercise-single-row-subquery",level:2},{value:"Multiple-Row Subquery",id:"multiple-row-subquery",level:2},{value:"Exercise: Multiple-Row Subquery",id:"exercise-multiple-row-subquery",level:2},{value:"Multiple-Column Subquery",id:"multiple-column-subquery",level:2},{value:"Exercise: Multiple-Column Subquery",id:"exercise-multiple-column-subquery",level:2},{value:"Correlated Subquery",id:"correlated-subquery",level:2},{value:"Exercise: Correlated Subquery",id:"exercise-correlated-subquery",level:2},{value:"Nested Subquery",id:"nested-subquery",level:2},{value:"Rules of Subqueries",id:"rules-of-subqueries",level:2},{value:"Advanced Operators: EXISTS",id:"advanced-operators-exists",level:2},{value:"Advanced Operators: ALL",id:"advanced-operators-all",level:2},{value:"Advanced Operators: IN",id:"advanced-operators-in",level:2},{value:"Advanced Operators: ANY",id:"advanced-operators-any",level:2}],m={toc:i},d="wrapper";function c(e){let{components:r,...l}=e;return(0,a.yg)(d,(0,n.A)({},m,l,{components:r,mdxType:"MDXLayout"}),(0,a.yg)("h2",{id:"sql-clauses"},"SQL Clauses"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"WHERE, ORDER BY, GROUP BY, and HAVING: Crafting strategic queries."),(0,a.yg)("li",{parentName:"ul"},"Today's exploration: INNER JOIN, OUTER JOIN, EXCLUDING JOIN, SELF JOIN, CROSS JOIN, UNION, and UNION ALL.")),(0,a.yg)("h2",{id:"why-do-we-need-join"},"Why Do We Need JOIN?"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Combining data from multiple tables based on matching conditions for comprehensive analysis.")),(0,a.yg)("h2",{id:"inner-join-a-deeper-dive"},"INNER JOIN: A Deeper Dive"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"-- Example of INNER JOIN\nSELECT c.CustomerID, c.FullName, o.FoodName\nFROM Customer c\nINNER JOIN CustomerOrder o ON c.CustomerID = o.CustomerID;\n")),(0,a.yg)("p",null,"In this practice, we retrieve customer information along with their corresponding orders using INNER JOIN."),(0,a.yg)("h2",{id:"join-more-than-2-tables"},"JOIN More Than 2 Tables"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"-- Example of INNER JOIN with 3 tables\nSELECT c.CustomerID, c.FullName, o.FoodName, d.FullAddress\nFROM Customer c\nINNER JOIN CustomerOrder o ON c.CustomerID = o.CustomerID\nINNER JOIN DeliveryAddress d ON d.ID = o.DeliveryAddressID;\n")),(0,a.yg)("p",null,"Extending the concept of INNER JOIN to involve three tables for a more comprehensive result set."),(0,a.yg)("h2",{id:"left-join-embracing-incompleteness"},"LEFT JOIN: Embracing Incompleteness"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"-- Example of LEFT JOIN\nSELECT c.CustomerID, c.FullName, o.FoodName\nFROM Customer c\nLEFT JOIN CustomerOrder o ON c.CustomerID = o.CustomerID;\n")),(0,a.yg)("p",null,"Incorporating LEFT JOIN to include all customers, even those without orders."),(0,a.yg)("h2",{id:"right-join-balancing-the-equation"},"RIGHT JOIN: Balancing the Equation"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"-- Example of RIGHT JOIN\nSELECT c.CustomerID, c.FullName, o.FoodName\nFROM Customer c\nRIGHT JOIN CustomerOrder o ON c.CustomerID = o.CustomerID;\n")),(0,a.yg)("p",null,"Implementing RIGHT JOIN to include all orders, even those without customers."),(0,a.yg)("h2",{id:"full-join-embracing-completeness"},"FULL JOIN: Embracing Completeness"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"-- Example of FULL JOIN\nSELECT c.CustomerID, c.FullName, o.FoodName\nFROM Customer c\nFULL JOIN CustomerOrder o ON c.CustomerID = o.CustomerID;\n")),(0,a.yg)("p",null,"Utilizing FULL JOIN to encompass all customers and orders, regardless of matches."),(0,a.yg)("h2",{id:"left-excluding-join-seeking-the-unique"},"LEFT EXCLUDING JOIN: Seeking the Unique"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"-- Example of LEFT EXCLUDING JOIN\nSELECT c.CustomerID, c.FullName, o.FoodName\nFROM Customer c\nLEFT JOIN CustomerOrder o ON c.CustomerID = o.CustomerID\nWHERE o.CustomerID IS NULL;\n")),(0,a.yg)("p",null,"Applying LEFT EXCLUDING JOIN to identify customers without orders."),(0,a.yg)("h2",{id:"right-excluding-join-excluding-to-the-right"},"RIGHT EXCLUDING JOIN: Excluding to the Right"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"-- Example of RIGHT EXCLUDING JOIN\nSELECT c.CustomerID, c.FullName, o.FoodName\nFROM Customer c\nRIGHT JOIN CustomerOrder o ON c.CustomerID = o.CustomerID\nWHERE c.CustomerID IS NULL;\n")),(0,a.yg)("p",null,"Implementing RIGHT EXCLUDING JOIN to identify orders without customers."),(0,a.yg)("h2",{id:"outer-excluding-join-excluding-in-unison"},"OUTER EXCLUDING JOIN: Excluding in Unison"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"-- Example of OUTER EXCLUDING JOIN\nSELECT c.CustomerID, c.FullName, o.FoodName\nFROM Customer c\nFULL JOIN CustomerOrder o ON c.CustomerID = o.CustomerID\nWHERE c.CustomerID IS NULL OR o.CustomerID IS NULL;\n")),(0,a.yg)("p",null,"Integrating OUTER EXCLUDING JOIN to identify unmatched records from both tables."),(0,a.yg)("h2",{id:"self-join-connecting-within"},"SELF JOIN: Connecting Within"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"-- Example of SELF JOIN\nSELECT emp.ID, emp.FullName, manager.FullName AS Manager \nFROM Employee emp\nINNER JOIN Employee manager ON emp.ManagerID = manager.ID;\n")),(0,a.yg)("p",null,"Demonstrating the concept of SELF JOIN to connect records within the same table."),(0,a.yg)("h2",{id:"cross-join-expanding-horizons"},"CROSS JOIN: Expanding Horizons"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"-- Example of CROSS JOIN\nSELECT *\nFROM A\nCROSS JOIN B;\n")),(0,a.yg)("p",null,"Expanding horizons with CROSS JOIN to combine each row from one table with each row from another."),(0,a.yg)("h2",{id:"union-merging-similarities"},"UNION: Merging Similarities"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"-- Example of UNION\nSELECT FromColumnTableA FROM A\nUNION\nSELECT FromColumnTableB FROM B;\n")),(0,a.yg)("p",null,"Merging similarities with UNION to combine result-sets from two tables."),(0,a.yg)("h2",{id:"union-all-embracing-all"},"UNION ALL: Embracing All"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"-- Example of UNION ALL\nSELECT FromColumnTableA FROM A\nUNION ALL\nSELECT FromColumnTableB FROM B;\n")),(0,a.yg)("p",null,"Embracing all with UNION ALL, including duplicates in the result set."),(0,a.yg)("h2",{id:"sub-queries-and-advanced-operators"},"Sub Queries and Advanced Operators"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Exploring the power of subqueries."),(0,a.yg)("li",{parentName:"ul"},"Advanced operators: EXISTS, ALL, IN, ANY.")),(0,a.yg)("h2",{id:"what-we-will-explore-today"},"What We Will Explore Today?"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Sub queries, advanced operators, rules of subqueries, and practical exercises.")),(0,a.yg)("h2",{id:"subquery-basics"},"Subquery Basics"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"A sub-query, or inner query, nested inside a larger query."),(0,a.yg)("li",{parentName:"ul"},"Works independently within the outer query."),(0,a.yg)("li",{parentName:"ul"},"Execution sequence: Inner query executes first, results stored, and outer query runs on stored results."),(0,a.yg)("li",{parentName:"ul"},"Exception: Correlated subqueries reference outer query columns.")),(0,a.yg)("h2",{id:"example-1-subquery-for-average"},"Example 1: Subquery for Average"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"-- Example of Subquery\nUSE LECTURE4_FUNCTION\nSELECT LastName, Physic, (SELECT AVG(Physic * 1.0) FROM Student) AS 'AVG OF Physic'\nFROM Student;\n")),(0,a.yg)("h2",{id:"example-2-subquery-in-where-clause"},"Example 2: Subquery in WHERE Clause"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"-- Example of Subquery in WHERE\nUSE LECTURE5_JOIN_DEMO\nSELECT CustomerID, FullName\nFROM Customer\nWHERE CustomerID IN (SELECT CustomerID FROM CustomerOrder);\n")),(0,a.yg)("h2",{id:"types-of-subqueries"},"Types of Subqueries"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Single-row subquery."),(0,a.yg)("li",{parentName:"ul"},"Multiple-row subquery."),(0,a.yg)("li",{parentName:"ul"},"Multiple-column subquery."),(0,a.yg)("li",{parentName:"ul"},"Correlated subquery."),(0,a.yg)("li",{parentName:"ul"},"Nested subquery.")),(0,a.yg)("h2",{id:"single-row-subquery"},"Single-Row Subquery"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"-- Example of Single-Row Subquery\nUSE LECTURE5_JOIN_DEMO;\nSELECT CustomerID, FullName\nFROM Customer\nWHERE CustomerID = (SELECT CustomerID\nFROM CustomerOrder\nWHERE FoodName = 'Heo Quay');\n")),(0,a.yg)("h2",{id:"exercise-single-row-subquery"},"Exercise: Single-Row Subquery"),(0,a.yg)("p",null,"Query CustomerID, OrderID, FoodName from CustomerOrder with Delivery FullAddress = 'TP. HCM' using a single-row subquery."),(0,a.yg)("h2",{id:"multiple-row-subquery"},"Multiple-Row Subquery"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"-- Example of Multiple-Row Subquery\nUSE LECTURE5_JOIN_DEMO\nSELECT CustomerID, FullName\nFROM Customer\nWHERE CustomerID IN (SELECT CustomerID FROM CustomerOrder);\n")),(0,a.yg)("h2",{id:"exercise-multiple-row-subquery"},"Exercise: Multiple-Row Subquery"),(0,a.yg)("p",null,"Query CustomerID, OrderID, FoodName from CustomerOrder with Delivery FullAddress = 'TP. HCM' or 'TP. HA NOI' using a multiple-row subquery."),(0,a.yg)("h2",{id:"multiple-column-subquery"},"Multiple-Column Subquery"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"-- Example of Multiple-Column Subquery\nUSE LECTURE5_JOIN_DEMO;\nSELECT CustomerID, FullName\nFROM Customer \nWHERE EXISTS\n(SELECT CustomerID, OrderID, FoodName\nFROM CustomerOrder\nWHERE CustomerOrder.CustomerID = Customer.CustomerID);\n")),(0,a.yg)("h2",{id:"exercise-multiple-column-subquery"},"Exercise: Multiple-Column Subquery"),(0,a.yg)("p",null,"Create a database, perform a self-join on the Employee table, and query managers with at least 1 employee."),(0,a.yg)("h2",{id:"correlated-subquery"},"Correlated Subquery"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Normal subquery executes first and provides a value to the outer query."),(0,a.yg)("li",{parentName:"ul"},"Correlated subquery references a column in the outer query and executes the subquery once for each row in the outer query.")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"-- Example of Correlated Subquery\nUSE LECTURE5_JOIN_DEMO;\nSELECT CustomerID, FullName\nFROM Customer \nWHERE EXISTS\n(SELECT CustomerID, OrderID, FoodName\nFROM CustomerOrder\nWHERE CustomerOrder.CustomerID = Customer.CustomerID);\n")),(0,a.yg)("h2",{id:"exercise-correlated-subquery"},"Exercise: Correlated Subquery"),(0,a.yg)("p",null,"Create a database, perform a self-join on the Employee table, and query managers with at least 1 employee."),(0,a.yg)("h2",{id:"nested-subquery"},"Nested Subquery"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"-- Example of Nested Subquery\nUSE LECTURE5_JOIN_DEMO;\nSELECT CustomerID, FullName\nFROM Customer\nWHERE CustomerID IN (SELECT CustomerID \nFROM CustomerOrder\nWHERE DeliveryAddressID = (SELECT ID\nFROM DeliveryAddress\nWHERE FullAddress = 'TP. HA NOI'));\n")),(0,a.yg)("h2",{id:"rules-of-subqueries"},"Rules of Subqueries"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Enclose a subquery in parentheses."),(0,a.yg)("li",{parentName:"ul"},"Must include a SELECT clause and a FROM clause."),(0,a.yg)("li",{parentName:"ul"},"Subqueries that return more than one row can only be used with multiple-value operators."),(0,a.yg)("li",{parentName:"ul"},"Can include WHERE, GROUP BY, and HAVING clauses."),(0,a.yg)("li",{parentName:"ul"},"Can include an ORDER BY clause only with a TOP clause."),(0,a.yg)("li",{parentName:"ul"},"Can nest subqueries up to 32 levels.")),(0,a.yg)("h2",{id:"advanced-operators-exists"},"Advanced Operators: EXISTS"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Used to test for the existence of any record in a subquery.")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"-- Example of EXISTS\nUSE LECTURE5_JOIN_DEMO;\nSELECT CustomerID, FullName\nFROM Customer \nWHERE EXISTS\n(SELECT CustomerID, OrderID, FoodName\nFROM CustomerOrder\nWHERE CustomerOrder.CustomerID = Customer.CustomerID);\n")),(0,a.yg)("h2",{id:"advanced-operators-all"},"Advanced Operators: ALL"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Returns TRUE if ALL of the subquery values meet the condition.")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"-- Example of ALL\nUSE LECTURE5_JOIN_DEMO;\nSELECT CustomerID, FullName\nFROM Customer\nWHERE CustomerID = ALL (SELECT CustomerID FROM CustomerOrder);\n")),(0,a.yg)("h2",{id:"advanced-operators-in"},"Advanced Operators: IN"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Allows specifying multiple values in a WHERE clause.")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"-- Example of IN\nUSE LECTURE5_JOIN_DEMO;\nSELECT CustomerID, FullName\nFROM Customer\nWHERE CustomerID IN (SELECT CustomerID FROM CustomerOrder);\n")),(0,a.yg)("h2",{id:"advanced-operators-any"},"Advanced Operators: ANY"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Allows performing a comparison between a single column value and a range of other values.")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"-- Example of ANY\nUSE LECTURE5_JOIN_DEMO;\nSELECT CustomerID, FullName\nFROM Customer\nWHERE CustomerID = ANY (SELECT CustomerID FROM CustomerOrder);\n")))}c.isMDXComponent=!0}}]);