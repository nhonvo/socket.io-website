"use strict";(self.webpackChunksample_website=self.webpackChunksample_website||[]).push([[2975],{5680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>g});var a=n(6540);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),d=o,g=u["".concat(l,".").concat(d)]||u[d]||m[d]||r;return n?a.createElement(g,i(i({ref:t},c),{},{components:n})):a.createElement(g,i({ref:t},c))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5303:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=n(8168),o=(n(6540),n(5680));const r={title:"Usage with PM2",sidebar_position:4,slug:"/pm2/"},i=void 0,s={unversionedId:"categories/Advanced/usage-with-pm2",id:"categories/Advanced/usage-with-pm2",title:"Usage with PM2",description:"PM2 is a production process manager for Node.js applications with a built-in load balancer. It allows you to keep applications alive forever, to reload them without downtime and to facilitate common system admin tasks.",source:"@site/docs/categories/06-Advanced/usage-with-pm2.md",sourceDirName:"categories/06-Advanced",slug:"/pm2/",permalink:"/docs/v4/pm2/",draft:!1,editUrl:"https://github.com/socketio/nhonvo.github.io/edit/main/docs/categories/06-Advanced/usage-with-pm2.md",tags:[],version:"current",lastUpdatedAt:1631857589,formattedLastUpdatedAt:"Sep 17, 2021",sidebarPosition:4,frontMatter:{title:"Usage with PM2",sidebar_position:4,slug:"/pm2/"},sidebar:"sidebar",previous:{title:"Admin UI",permalink:"/docs/v4/admin-ui/"},next:{title:"Load testing",permalink:"/docs/v4/load-testing/"}},l={},p=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"How it works",id:"how-it-works",level:2}],c={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,o.yg)(u,(0,a.A)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"PM2 is a production process manager for Node.js applications with a built-in load balancer. It allows you to keep applications alive forever, to reload them without downtime and to facilitate common system admin tasks."),(0,o.yg)("p",null,"You can find its documentation here: ",(0,o.yg)("a",{parentName:"p",href:"https://pm2.keymetrics.io/docs/usage/pm2-doc-single-page/"},"https://pm2.keymetrics.io/docs/usage/pm2-doc-single-page/")),(0,o.yg)("p",null,"To scale a Socket.IO server with PM2, there are three solutions:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"disable HTTP long-polling on the client-side")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},'const socket = io({\n  transports: ["websocket"]\n});\n')),(0,o.yg)("p",null,"Though in that case, there will be no fallback to HTTP long-polling if the WebSocket connection cannot be established."),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},"use a distinct port for each worker, and a load-balancer like nginx in front of them")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},"use ",(0,o.yg)("inlineCode",{parentName:"p"},"@socket.io/pm2")))),(0,o.yg)("h2",{id:"installation"},"Installation"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"npm install -g @socket.io/pm2\n")),(0,o.yg)("p",null,"If ",(0,o.yg)("inlineCode",{parentName:"p"},"pm2")," is already installed, you will have to remove it first:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"npm remove -g pm2\n")),(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"@socket.io/pm2")," can be used as a drop-in replacement for ",(0,o.yg)("inlineCode",{parentName:"p"},"pm2"),", and supports all the commands of the class ",(0,o.yg)("inlineCode",{parentName:"p"},"pm2")," utility."),(0,o.yg)("p",null,"The only difference comes from ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/socketio/pm2/commit/8c29a7feb6cbde3c8ef9eb072fee284686f1553f"},"this commit"),"."),(0,o.yg)("h2",{id:"usage"},"Usage"),(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"worker.js")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},'const { createServer } = require("http");\nconst { Server } = require("socket.io");\nconst { createAdapter } = require("@socket.io/cluster-adapter");\nconst { setupWorker } = require("@socket.io/sticky");\n\nconst httpServer = createServer();\nconst io = new Server(httpServer);\n\nio.adapter(createAdapter());\n\nsetupWorker(io);\n\nio.on("connection", (socket) => {\n  console.log(`connect ${socket.id}`);\n});\n')),(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"ecosystem.config.js")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},'module.exports = {\n  apps : [{\n    script    : "worker.js",\n    instances : "max",\n    exec_mode : "cluster"\n  }]\n}\n')),(0,o.yg)("p",null,"And then run ",(0,o.yg)("inlineCode",{parentName:"p"},"pm2 start ecosystem.config.js")," (or ",(0,o.yg)("inlineCode",{parentName:"p"},"pm2 start worker.js -i 0"),"). That's it! You can now reach the Socket.IO cluster on port 8080."),(0,o.yg)("h2",{id:"how-it-works"},"How it works"),(0,o.yg)("p",null,"When ",(0,o.yg)("a",{parentName:"p",href:"/docs/v4/using-multiple-nodes/"},"scaling to multiple nodes"),", there are two things to do:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"enable sticky sessions, so that the HTTP requests of a Socket.IO session are routed to the same worker"),(0,o.yg)("li",{parentName:"ul"},"use a custom adapter, so that the packets are broadcast to all clients, even if they are connected to another worker")),(0,o.yg)("p",null,"In order to achieve this, ",(0,o.yg)("inlineCode",{parentName:"p"},"@socket.io/pm2")," includes two additional packages:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://github.com/socketio/socket.io-sticky"},(0,o.yg)("inlineCode",{parentName:"a"},"@socket.io/sticky"))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://github.com/socketio/socket.io-cluster-adapter"},(0,o.yg)("inlineCode",{parentName:"a"},"@socket.io/cluster-adapter")))),(0,o.yg)("p",null,"The only difference with ",(0,o.yg)("inlineCode",{parentName:"p"},"pm2")," comes from ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/socketio/pm2/commit/8c29a7feb6cbde3c8ef9eb072fee284686f1553f"},"this commit"),":"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"the God process now creates its own HTTP server and routes the HTTP requests to the right worker"),(0,o.yg)("li",{parentName:"ul"},"the God process also relays the packets between the workers, so that ",(0,o.yg)("inlineCode",{parentName:"li"},"io.emit()")," correctly reaches all clients")),(0,o.yg)("p",null,"Please note that if you have several hosts each running a PM2 cluster, you will have to use another adapter, like the ",(0,o.yg)("a",{parentName:"p",href:"/docs/v4/redis-adapter/"},"Redis adapter"),"."),(0,o.yg)("p",null,"The source code of the fork can be found ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/socketio/pm2"},"here"),". We will try to closely follow the releases of the ",(0,o.yg)("inlineCode",{parentName:"p"},"pm2")," package."))}m.isMDXComponent=!0}}]);