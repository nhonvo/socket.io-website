"use strict";(self.webpackChunksample_website=self.webpackChunksample_website||[]).push([[9815],{5680:(e,t,a)=>{a.d(t,{xA:()=>c,yg:()=>g});var n=a(6540);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),m=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=m(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=m(a),u=r,g=p["".concat(s,".").concat(u)]||p[u]||d[u]||o;return a?n.createElement(g,i(i({ref:t},c),{},{components:a})):n.createElement(g,i({ref:t},c))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:r,i[1]=l;for(var m=2;m<o;m++)i[m]=a[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},8001:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>g,frontMatter:()=>l,metadata:()=>m,toc:()=>p});var n=a(8168),r=(a(6540),a(5680)),o=a(1653),i=a(6025);const l={title:"Adapter",sidebar_label:"Introduction",sidebar_position:1,slug:"/adapter/"},s=void 0,m={unversionedId:"categories/Adapters/adapter",id:"categories/Adapters/adapter",title:"Adapter",description:"An Adapter is a server-side component which is responsible for broadcasting events to all or a subset of clients.",source:"@site/docs/categories/05-Adapters/adapter.md",sourceDirName:"categories/05-Adapters",slug:"/adapter/",permalink:"/docs/v4/adapter/",draft:!1,editUrl:"https://github.com/socketio/socket.io-website/edit/main/docs/categories/05-Adapters/adapter.md",tags:[],version:"current",lastUpdatedAt:1711707371,formattedLastUpdatedAt:"Mar 29, 2024",sidebarPosition:1,frontMatter:{title:"Adapter",sidebar_label:"Introduction",sidebar_position:1,slug:"/adapter/"},sidebar:"sidebar",previous:{title:"Rooms",permalink:"/docs/v4/rooms/"},next:{title:"Redis adapter",permalink:"/docs/v4/redis-adapter/"}},c={},p=[{value:"API",id:"api",level:2},{value:"Emitter",id:"emitter",level:2},{value:"Emitter cheatsheet",id:"emitter-cheatsheet",level:2}],d={toc:p},u="wrapper";function g(e){let{components:t,...a}=e;return(0,r.yg)(u,(0,n.A)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"An Adapter is a server-side component which is responsible for broadcasting events to all or a subset of clients."),(0,r.yg)("p",null,"When scaling to multiple Socket.IO servers, you will need to replace the default in-memory adapter by another implementation, so the events are properly routed to all clients."),(0,r.yg)("p",null,"Here is the list of adapters that are maintained by our team:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"the ",(0,r.yg)("a",{parentName:"li",href:"/docs/v4/redis-adapter/"},"Redis adapter")),(0,r.yg)("li",{parentName:"ul"},"the ",(0,r.yg)("a",{parentName:"li",href:"/docs/v4/redis-streams-adapter/"},"Redis Streams adapter")),(0,r.yg)("li",{parentName:"ul"},"the ",(0,r.yg)("a",{parentName:"li",href:"/docs/v4/mongo-adapter/"},"MongoDB adapter")),(0,r.yg)("li",{parentName:"ul"},"the ",(0,r.yg)("a",{parentName:"li",href:"/docs/v4/postgres-adapter/"},"Postgres adapter")),(0,r.yg)("li",{parentName:"ul"},"the ",(0,r.yg)("a",{parentName:"li",href:"/docs/v4/cluster-adapter/"},"Cluster adapter")),(0,r.yg)("li",{parentName:"ul"},"the ",(0,r.yg)("a",{parentName:"li",href:"/docs/v4/gcp-pubsub-adapter/"},"Google Cloud Pub/Sub adapter")),(0,r.yg)("li",{parentName:"ul"},"the ",(0,r.yg)("a",{parentName:"li",href:"/docs/v4/aws-sqs-adapter/"},"AWS SQS adapter")),(0,r.yg)("li",{parentName:"ul"},"the ",(0,r.yg)("a",{parentName:"li",href:"/docs/v4/azure-service-bus-adapter/"},"Azure Service Bus adapter"))),(0,r.yg)("p",null,"There are also several other options which are maintained by the (awesome!) community:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/sensibill/socket.io-amqp"},"AMQP")," (e.g. RabbitMQ)"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/MickL/socket.io-nats-adapter"},"NATS")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/distrue/socket.io-nats-adapter"},"NATS"))),(0,r.yg)("p",null,"Please note that enabling sticky sessions is still needed when using multiple Socket.IO servers and HTTP long-polling. More information ",(0,r.yg)("a",{parentName:"p",href:"/docs/v4/using-multiple-nodes/#why-is-sticky-session-required"},"here"),"."),(0,r.yg)("h2",{id:"api"},"API"),(0,r.yg)("p",null,"You can have access to the adapter instance with:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'// main namespace\nconst mainAdapter = io.of("/").adapter; // WARNING! io.adapter() will not work\n// custom namespace\nconst adminAdapter = io.of("/admin").adapter;\n')),(0,r.yg)("p",null,"Starting with ",(0,r.yg)("inlineCode",{parentName:"p"},"socket.io@3.1.0"),", each Adapter instance emits the following events:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"create-room")," (argument: room)"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"delete-room")," (argument: room)"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"join-room")," (argument: room, id)"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"leave-room")," (argument: room, id)")),(0,r.yg)("p",null,"Example:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'io.of("/").adapter.on("create-room", (room) => {\n  console.log(`room ${room} was created`);\n});\n\nio.of("/").adapter.on("join-room", (room, id) => {\n  console.log(`socket ${id} has joined room ${room}`);\n});\n')),(0,r.yg)("h2",{id:"emitter"},"Emitter"),(0,r.yg)("p",null,"Most adapter implementations come with their associated emitter package, which allows communicating to the group of Socket.IO servers from another Node.js process."),(0,r.yg)(o.A,{alt:"Emitter diagram",sources:{light:(0,i.A)("/images/emitter.png"),dark:(0,i.A)("/images/emitter-dark.png")},mdxType:"ThemedImage"}),(0,r.yg)("p",null,"This may be useful for example in a microservice setup, where all clients connect to the microservice M1, while the microservice M2 uses the emitter to broadcast packets (uni-directional communication)."),(0,r.yg)("h2",{id:"emitter-cheatsheet"},"Emitter cheatsheet"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'// to all clients\nemitter.emit(/* ... */);\n\n// to all clients in "room1"\nemitter.to("room1").emit(/* ... */);\n\n// to all clients in "room1" except those in "room2"\nemitter.to("room1").except("room2").emit(/* ... */);\n\nconst adminEmitter = emitter.of("/admin");\n\n// to all clients in the "admin" namespace\nadminEmitter.emit(/* ... */);\n\n// to all clients in the "admin" namespace and in the "room1" room\nadminEmitter.to("room1").emit(/* ... */);\n')),(0,r.yg)("p",null,"The emitter also supports the utility methods that were added in ",(0,r.yg)("inlineCode",{parentName:"p"},"socket.io@4.0.0"),":"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"socketsJoin()"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'// make all Socket instances join the "room1" room\nemitter.socketsJoin("room1");\n\n// make all Socket instances of the "admin" namespace in the "room1" room join the "room2" room\nemitter.of("/admin").in("room1").socketsJoin("room2");\n')),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"socketsLeave()"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'// make all Socket instances leave the "room1" room\nemitter.socketsLeave("room1");\n\n// make all Socket instances in the "room1" room leave the "room2" and "room3" rooms\nemitter.in("room1").socketsLeave(["room2", "room3"]);\n\n// make all Socket instances in the "room1" room of the "admin" namespace leave the "room2" room\nemitter.of("/admin").in("room1").socketsLeave("room2");\n')),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"disconnectSockets()"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'// make all Socket instances disconnect\nemitter.disconnectSockets();\n\n// make all Socket instances in the "room1" room disconnect (and discard the low-level connection)\nemitter.in("room1").disconnectSockets(true);\n\n// make all Socket instances in the "room1" room of the "admin" namespace disconnect\nemitter.of("/admin").in("room1").disconnectSockets();\n\n// this also works with a single socket ID\nemitter.of("/admin").in(theSocketId).disconnectSockets();\n')),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"serverSideEmit()"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'// emit an event to all the Socket.IO servers of the cluster\nemitter.serverSideEmit("hello", "world");\n\n// Socket.IO server (server-side)\nio.on("hello", (arg) => {\n  console.log(arg); // prints "world"\n});\n')))}g.isMDXComponent=!0}}]);