"use strict";(self.webpackChunksample_website=self.webpackChunksample_website||[]).push([[2605],{5680:(e,n,t)=>{t.d(n,{xA:()=>m,yg:()=>u});var o=t(6540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=o.createContext({}),c=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=c(e.components);return o.createElement(l.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},g=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=c(t),g=a,u=p["".concat(l,".").concat(g)]||p[g]||d[g]||r;return t?o.createElement(u,i(i({ref:n},m),{},{components:t})):o.createElement(u,i({ref:n},m))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,i=new Array(r);i[0]=g;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<r;c++)i[c]=t[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}g.displayName="MDXCreateElement"},9606:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>c,toc:()=>p});var o=t(8168),a=(t(6540),t(5680)),r=t(1653),i=t(6025);const s={title:"Rooms",sidebar_position:4,slug:"/rooms/"},l=void 0,c={unversionedId:"categories/Events/rooms",id:"categories/Events/rooms",title:"Rooms",description:"A room is an arbitrary channel that sockets can join and leave. It can be used to broadcast events to a subset of clients:",source:"@site/docs/categories/04-Events/rooms.md",sourceDirName:"categories/04-Events",slug:"/rooms/",permalink:"/docs/v4/rooms/",draft:!1,editUrl:"https://github.com/socketio/socket.io-website/edit/main/docs/categories/04-Events/rooms.md",tags:[],version:"current",lastUpdatedAt:1708417365,formattedLastUpdatedAt:"Feb 20, 2024",sidebarPosition:4,frontMatter:{title:"Rooms",sidebar_position:4,slug:"/rooms/"},sidebar:"sidebar",previous:{title:"Broadcasting events",permalink:"/docs/v4/broadcasting-events/"},next:{title:"Introduction",permalink:"/docs/v4/adapter/"}},m={},p=[{value:"Joining and leaving",id:"joining-and-leaving",level:2},{value:"Sample use cases",id:"sample-use-cases",level:2},{value:"Disconnection",id:"disconnection",level:2},{value:"With multiple Socket.IO servers",id:"with-multiple-socketio-servers",level:2},{value:"Implementation details",id:"implementation-details",level:2},{value:"Room events",id:"room-events",level:2}],d={toc:p},g="wrapper";function u(e){let{components:n,...t}=e;return(0,a.yg)(g,(0,o.A)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"A ",(0,a.yg)("em",{parentName:"p"},"room")," is an arbitrary channel that sockets can ",(0,a.yg)("inlineCode",{parentName:"p"},"join")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"leave"),". It can be used to broadcast events to a subset of clients:"),(0,a.yg)(r.A,{alt:"Broadcasting to all clients in a room",sources:{light:(0,i.A)("/images/rooms.png"),dark:(0,i.A)("/images/rooms-dark.png")},mdxType:"ThemedImage"}),(0,a.yg)("admonition",{type:"info"},(0,a.yg)("p",{parentName:"admonition"},"Please note that rooms are a ",(0,a.yg)("strong",{parentName:"p"},"server-only")," concept (i.e. the client does not have access to the list of rooms it has joined).")),(0,a.yg)("h2",{id:"joining-and-leaving"},"Joining and leaving"),(0,a.yg)("p",null,"You can call ",(0,a.yg)("inlineCode",{parentName:"p"},"join")," to subscribe the socket to a given channel:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},'io.on("connection", (socket) => {\n  socket.join("some room");\n});\n')),(0,a.yg)("p",null,"And then simply use ",(0,a.yg)("inlineCode",{parentName:"p"},"to")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"in")," (they are the same) when broadcasting or emitting:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},'io.to("some room").emit("some event");\n')),(0,a.yg)("p",null,"Or exclude a room:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},'io.except("some room").emit("some event");\n')),(0,a.yg)("p",null,"You can also emit to several rooms at the same time:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},'io.to("room1").to("room2").to("room3").emit("some event");\n')),(0,a.yg)("p",null,"In that case, a ",(0,a.yg)("a",{href:"https://en.wikipedia.org/wiki/Union_(set_theory)"},"union")," is performed: every socket that is at least in one of the rooms will get the event ",(0,a.yg)("strong",{parentName:"p"},"once")," (even if the socket is in two or more rooms)."),(0,a.yg)("p",null,"You can also broadcast to a room from a given socket:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},'io.on("connection", (socket) => {\n  socket.to("some room").emit("some event");\n});\n')),(0,a.yg)("p",null,"In that case, every socket in the room ",(0,a.yg)("strong",{parentName:"p"},"excluding")," the sender will get the event."),(0,a.yg)(r.A,{alt:"Broadcasting to all clients in a room excepting the sender",sources:{light:(0,i.A)("/images/rooms2.png"),dark:(0,i.A)("/images/rooms2-dark.png")},mdxType:"ThemedImage"}),(0,a.yg)("p",null,"To leave a channel you call ",(0,a.yg)("inlineCode",{parentName:"p"},"leave")," in the same fashion as ",(0,a.yg)("inlineCode",{parentName:"p"},"join"),"."),(0,a.yg)("h2",{id:"sample-use-cases"},"Sample use cases"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"broadcast data to each device / tab of a given user")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},'function computeUserIdFromHeaders(headers) {\n  // to be implemented\n}\n\nio.on("connection", async (socket) => {\n  const userId = await computeUserIdFromHeaders(socket.handshake.headers);\n\n  socket.join(userId);\n\n  // and then later\n  io.to(userId).emit("hi");\n});\n')),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"send notifications about a given entity")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},'io.on("connection", async (socket) => {\n  const projects = await fetchProjects(socket);\n\n  projects.forEach(project => socket.join("project:" + project.id));\n\n  // and then later\n  io.to("project:4321").emit("project updated");\n});\n')),(0,a.yg)("h2",{id:"disconnection"},"Disconnection"),(0,a.yg)("p",null,"Upon disconnection, sockets ",(0,a.yg)("inlineCode",{parentName:"p"},"leave")," all the channels they were part of automatically, and no special teardown is needed on your part."),(0,a.yg)("p",null,"You can fetch the rooms the Socket was in by listening to the ",(0,a.yg)("inlineCode",{parentName:"p"},"disconnecting")," event:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},'io.on("connection", socket => {\n  socket.on("disconnecting", () => {\n    console.log(socket.rooms); // the Set contains at least the socket ID\n  });\n\n  socket.on("disconnect", () => {\n    // socket.rooms.size === 0\n  });\n});\n')),(0,a.yg)("h2",{id:"with-multiple-socketio-servers"},"With multiple Socket.IO servers"),(0,a.yg)("p",null,"Like ",(0,a.yg)("a",{parentName:"p",href:"/docs/v4/broadcasting-events/#with-multiple-socketio-servers"},"global broadcasting"),", broadcasting to rooms also works with multiple Socket.IO servers."),(0,a.yg)("p",null,"You just need to replace the default ",(0,a.yg)("a",{parentName:"p",href:"/docs/v4/glossary/#adapter"},"Adapter")," by the Redis Adapter. More information about it ",(0,a.yg)("a",{parentName:"p",href:"/docs/v4/redis-adapter/"},"here"),"."),(0,a.yg)(r.A,{alt:"Broadcasting to all clients in a room with Redis",sources:{light:(0,i.A)("/images/rooms-redis.png"),dark:(0,i.A)("/images/rooms-redis-dark.png")},mdxType:"ThemedImage"}),(0,a.yg)("h2",{id:"implementation-details"},"Implementation details"),(0,a.yg)("p",null,'The "room" feature is implemented by what we call an Adapter. This Adapter is a server-side component which is responsible for:'),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"storing the relationships between the Socket instances and the rooms"),(0,a.yg)("li",{parentName:"ul"},"broadcasting events to all (or a subset of) clients")),(0,a.yg)("p",null,"You can find the code of the default in-memory adapter ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/socketio/socket.io-adapter"},"here"),"."),(0,a.yg)("p",null,"Basically, it consists in two ",(0,a.yg)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map"},"ES6 Maps"),":"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"sids"),": ",(0,a.yg)("inlineCode",{parentName:"li"},"Map<SocketId, Set<Room>>")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"rooms"),": ",(0,a.yg)("inlineCode",{parentName:"li"},"Map<Room, Set<SocketId>>"))),(0,a.yg)("p",null,"Calling ",(0,a.yg)("inlineCode",{parentName:"p"},'socket.join("the-room")')," will result in:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"in the ",(0,a.yg)("inlineCode",{parentName:"li"},"sids"),' Map, adding "the-room" to the Set identified by the socket ID'),(0,a.yg)("li",{parentName:"ul"},"in the ",(0,a.yg)("inlineCode",{parentName:"li"},"rooms"),' Map, adding the socket ID in the Set identified by the string "the-room"')),(0,a.yg)("p",null,"Those two maps are then used when broadcasting:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"a broadcast to all sockets (",(0,a.yg)("inlineCode",{parentName:"li"},"io.emit()"),") loops through the ",(0,a.yg)("inlineCode",{parentName:"li"},"sids")," Map, and send the packet to all sockets"),(0,a.yg)("li",{parentName:"ul"},"a broadcast to a given room (",(0,a.yg)("inlineCode",{parentName:"li"},'io.to("room21").emit()'),") loops through the Set in the ",(0,a.yg)("inlineCode",{parentName:"li"},"rooms")," Map, and sends the packet to all matching sockets")),(0,a.yg)("p",null,"You can access those objects with:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},'// main namespace\nconst rooms = io.of("/").adapter.rooms;\nconst sids = io.of("/").adapter.sids;\n\n// custom namespace\nconst rooms = io.of("/my-namespace").adapter.rooms;\nconst sids = io.of("/my-namespace").adapter.sids;\n')),(0,a.yg)("p",null,"Notes:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"those objects are not meant to be directly modified, you should always use ",(0,a.yg)("a",{parentName:"li",href:"/docs/v4/server-api/#socketjoinroom"},(0,a.yg)("inlineCode",{parentName:"a"},"socket.join(...)"))," and ",(0,a.yg)("a",{parentName:"li",href:"/docs/v4/server-api/#socketleaveroom"},(0,a.yg)("inlineCode",{parentName:"a"},"socket.leave(...)"))," instead."),(0,a.yg)("li",{parentName:"ul"},"in a ",(0,a.yg)("a",{parentName:"li",href:"/docs/v4/using-multiple-nodes/"},"multi-server")," setup, the ",(0,a.yg)("inlineCode",{parentName:"li"},"rooms")," and ",(0,a.yg)("inlineCode",{parentName:"li"},"sids"),' objects are not shared between the Socket.IO servers (a room may only "exist" on one server and not on another).')),(0,a.yg)("h2",{id:"room-events"},"Room events"),(0,a.yg)("p",null,"Starting with ",(0,a.yg)("inlineCode",{parentName:"p"},"socket.io@3.1.0"),", the underlying Adapter will emit the following events:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"create-room")," (argument: room)"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"delete-room")," (argument: room)"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"join-room")," (argument: room, id)"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"leave-room")," (argument: room, id)")),(0,a.yg)("p",null,"Example:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},'io.of("/").adapter.on("create-room", (room) => {\n  console.log(`room ${room} was created`);\n});\n\nio.of("/").adapter.on("join-room", (room, id) => {\n  console.log(`socket ${id} has joined room ${room}`);\n});\n')))}u.isMDXComponent=!0}}]);