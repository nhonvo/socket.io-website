"use strict";(self.webpackChunksample_website=self.webpackChunksample_website||[]).push([[8166],{5680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>m});var a=n(6540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},g="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),g=p(n),h=r,m=g["".concat(l,".").concat(h)]||g[h]||u[h]||o;return n?a.createElement(m,i(i({ref:t},c),{},{components:n})):a.createElement(m,i({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[g]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},6528:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=n(8168),r=(n(6540),n(5680));const o={title:"Socket.IO P2P",slug:"/socket-io-p2p/",authors:[{name:"Tom Cartwright",title:"Maintainer of the Socket.IO P2P project",url:"https://twitter.com/tomcartwrightuk",image_url:"https://github.com/tomcartwrightuk.png"}]},i=void 0,s={permalink:"/blog/socket-io-p2p/",editUrl:"https://github.com/socketio/nhonvo.github.io/edit/main/blog/2015-07-14-p2p.md",source:"@site/blog/2015-07-14-p2p.md",title:"Socket.IO P2P",description:"Today were very happy to introduce Socket.IO P2P, the easiest way to establish a bidirectional events channel between two peers with a server fallback to provide maximum reliability.",date:"2015-07-14T00:00:00.000Z",formattedDate:"July 14, 2015",tags:[],readingTime:3.04,hasTruncateMarker:!0,authors:[{name:"Tom Cartwright",title:"Maintainer of the Socket.IO P2P project",url:"https://twitter.com/tomcartwrightuk",image_url:"https://github.com/tomcartwrightuk.png",imageURL:"https://github.com/tomcartwrightuk.png"}],frontMatter:{title:"Socket.IO P2P",slug:"/socket-io-p2p/",authors:[{name:"Tom Cartwright",title:"Maintainer of the Socket.IO P2P project",url:"https://twitter.com/tomcartwrightuk",image_url:"https://github.com/tomcartwrightuk.png",imageURL:"https://github.com/tomcartwrightuk.png"}]},prevItem:{title:"Socket.IO 1.3.6",permalink:"/blog/socket-io-1-3-6/"},nextItem:{title:"Socket.IO C++",permalink:"/blog/socket-io-cpp/"}},l={authorsImageUrls:[void 0]},p=[{value:"Usage",id:"usage",level:2},{value:"The Chat example",id:"the-chat-example",level:2}],c={toc:p},g="wrapper";function u(e){let{components:t,...n}=e;return(0,r.yg)(g,(0,a.A)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"Today were very happy to introduce Socket.IO P2P, the easiest way to establish ",(0,r.yg)("strong",{parentName:"p"},"a bidirectional events channel between two peers")," with a server fallback to provide maximum reliability."),(0,r.yg)("p",null,"Lets look at the API and build a little chat application. Or check out ",(0,r.yg)("a",{href:"https://github.com/socketio/socket.io-p2p"},"the repository")," directly!"),(0,r.yg)("p",{style:{textAlign:"center",padding:"20px 0"}},(0,r.yg)("img",{src:"https://cldup.com/95U80xyuHq.svg"})),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Socket.IO ",(0,r.yg)("span",{style:{color:"#F04"}},"P2P"))," provides an ",(0,r.yg)("strong",{parentName:"p"},"easy and reliable")," way to setup a ",(0,r.yg)("a",{href:"http://www.webrtc.org/"},"WebRTC")," connection between peers and communicate using the ",(0,r.yg)("a",{href:"https://github.com/socketio/socket.io-protocol"},"socket.io-protocol"),"."),(0,r.yg)("p",null,"Socket.IO is used to transport ",(0,r.yg)("a",{href:"http://www.html5rocks.com/en/tutorials/webrtc/infrastructure/#what-is-signaling"},"signaling data")," and as a ",(0,r.yg)("em",null,"fallback")," for clients where the WebRTC ",(0,r.yg)("inlineCode",{parentName:"p"},"PeerConnection")," is not supported. Adding a simple piece of middleware to your socket.io setup enables this \u2013 no need to hand roll your own signaling exchange or set up, deploy and scale new servers."),(0,r.yg)("h2",{id:"usage"},"Usage"),(0,r.yg)("p",null,"It only takes a few lines of code to set up the server and client."),(0,r.yg)("p",null,"Server:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"var io = require('socket.io')(server);\nvar p2p = require('socket.io-p2p-server').Server;\nio.use(p2p);\n")),(0,r.yg)("p",null,"Client:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"var P2P = require('socket.io-p2p');\nvar io = require('socket.io-client');\nvar socket = io();\nvar p2p = new P2P(socket);\np2p.on('peer-msg', function (data) {\n  console.log('From a peer %s', data);\n});\n")),(0,r.yg)("p",null,"There are various options for the advanced user. Once signaling data has been exchanged an ",(0,r.yg)("inlineCode",{parentName:"p"},"upgrade")," event is triggered and an optional callback is called."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"var opts = { numClients: 10 }; // connect up to 10 clients at a time\nvar p2p = new P2P(socket, opts, function(){\n  console.log('We all speak WebRTC now');\n});\n")),(0,r.yg)("h2",{id:"the-chat-example"},"The Chat example"),(0,r.yg)("p",null,"We will build a simple chat application, as our tradition dictates, but with P2P capabilities! In this application:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Clients can send text messages to each other. Messages display in a timeline"),(0,r.yg)("li",{parentName:"ul"},"Clients connect to each other over socket.io and initially send messages via the server"),(0,r.yg)("li",{parentName:"ul"},"Clients can choose to ",(0,r.yg)("strong",{parentName:"li"},"go private")," \u2013 switching the transport to WebRTC"),(0,r.yg)("li",{parentName:"ul"},"All clients connected to the server can connect via WebRTC up to a maximum of 10 clients")),(0,r.yg)("p",null,"All code from this example is included in the ",(0,r.yg)("a",{href:"https://github.com/socketio/socket.io-p2p/tree/master/examples/chat"},"main repository"),"."),(0,r.yg)("p",null,"We first setup the client with ",(0,r.yg)("inlineCode",{parentName:"p"},"autoUpgrade")," set to false so that clients can upgrade the connection themselves. Set ",(0,r.yg)("inlineCode",{parentName:"p"},"numClients")," to ",(0,r.yg)("inlineCode",{parentName:"p"},"10")," to allow up to 10 clients to connect with each other."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"var opts = {autoUpgrade: false, numClients: 10};\nvar p2psocket = new P2P(socket, opts)\n")),(0,r.yg)("p",null,"Setup the event listeners:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"p2psocket.on('peer-msg', function(data) {\n  // append message to list\n});\n\np2psocket.on('go-private', function () {\n  p2psocket.upgrade(); // upgrade to peerConnection\n});\n")),(0,r.yg)("p",null,"In this example, we want any clients connecting to the server to exchange signaling data with each other. We can use the server component as a simple middleware. Clients will connect on the root namespace."),(0,r.yg)("p",null,"If we wanted clients to exchange signalling data in rooms, rather than on a whole namespace, we could use the server module upon connection ",(0,r.yg)("a",{href:"https://github.com/tomcartwrightuk/p2p-snake/blob/master/server.js"},"like this"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"var server = require('http').createServer();\nvar p2pserver = require('socket.io-p2p-server').Server\nvar io = require('socket.io')(server);\nserver.listen(3030)\nio.use(p2pserver);\n")),(0,r.yg)("p",null,"We then setup listeners to pass messages between clients and to broadcast the ",(0,r.yg)("inlineCode",{parentName:"p"},"go-private")," event."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"io.on('connection', function(socket) {\n  socket.on('peer-msg', function(data) {\n    console.log('Message from peer: %s', data);\n    socket.broadcast.emit('peer-msg', data);\n  })\n\n  socket.on('go-private', function(data) {\n    socket.broadcast.emit('go-private', data);\n  });\n});\n")),(0,r.yg)("p",null,"Thats all you need: add a little markup we are off! Heres the demo application in action:"),(0,r.yg)("a",{href:"/images/P2PChatExampleRedo2.gif"},(0,r.yg)("img",{src:"/images/P2PChatExampleRedo2.gif",alt:"P2PChatExampleRedo2",width:"854",height:"317",className:"alignnone size-full wp-image-921"})),(0,r.yg)("p",null,"Thanks to Guillermo Rauch (",(0,r.yg)("a",{href:"https://twitter.com/rauchg"},"@rauchg"),") for the advice, testing and patience, Harrison Harnisch (",(0,r.yg)("a",{href:"https://github.com/hharnisc"},"@hharnisc"),") for bug fixes and to Feross Aboukhadijeh (",(0,r.yg)("a",{href:"https://github.com/feross"},"@feross"),") for providing the underlying WebRTC abstraction ",(0,r.yg)("a",{href:"https://github.com/feross/simple-peer"},"simple-peer"),"."),(0,r.yg)("p",null,"Pull requests, issues, comments and general rantings are all welcome over at the GitHub ",(0,r.yg)("a",{href:"https://github.com/socketio/socket.io-p2p"},"repo"),"."))}u.isMDXComponent=!0}}]);