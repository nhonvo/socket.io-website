"use strict";(self.webpackChunksample_website=self.webpackChunksample_website||[]).push([[5894],{6042:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/npm-package-provenance/","metadata":{"permalink":"/blog/npm-package-provenance/","editUrl":"https://github.com/socketio/nhonvo.github.io/edit/main/blog/2024-07-25-npm-provenance-statements.md","source":"@site/blog/2024-07-25-npm-provenance-statements.md","title":"npm package provenance","description":"Hello everyone!","date":"2024-07-25T00:00:00.000Z","formattedDate":"July 25, 2024","tags":[],"readingTime":1.915,"hasTruncateMarker":true,"authors":[{"name":"Damien Arrachequesne","title":"Maintainer of Socket.IO","url":"https://github.com/darrachequesne","imageURL":"https://github.com/darrachequesne.png","key":"darrachequesne"}],"frontMatter":{"title":"npm package provenance","slug":"/npm-package-provenance/","authors":["darrachequesne"]},"nextItem":{"title":"Socket.IO monorepo","permalink":"/blog/monorepo/"}},"content":"Hello everyone!\\r\\n\\r\\nWe are happy to announce that Socket.IO packages will now be published with a provenance statement.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n:::tip\\r\\n\\r\\nPackage provenance is a npm feature which was introduced last year to increase trust in the npm supply chain.\\r\\n\\r\\nThe idea is that the package is published and signed from a trusted CI/CD platform (such as GitHub Actions), so the code that ends up in the registry cannot be tampered with.\\r\\n\\r\\nMore info: https://github.blog/security/supply-chain-security/introducing-npm-package-provenance/\\r\\n\\r\\n:::\\r\\n\\r\\nStarting today, new Socket.IO versions will be published directly from GitHub Actions and no longer from a maintainer machine.\\r\\n\\r\\nThe publication workflow can be found here: [`publish.yml`](https://github.com/socketio/socket.io/blob/main/.github/workflows/publish.yml)\\r\\n\\r\\n## Notes\\r\\n\\r\\nThere are a few notable differences from the [reference workflow](https://docs.npmjs.com/generating-provenance-statements):\\r\\n\\r\\n### Workflow trigger\\r\\n\\r\\nThe workflow is triggered when pushing a tag to GitHub:\\r\\n\\r\\n```yml\\r\\non:\\r\\n  push:\\r\\n    tags:\\r\\n      - \'**@*\'\\r\\n```\\r\\n\\r\\nThe expected format is `<package>@<version>`, for example:\\r\\n\\r\\n- `socket.io@1.2.3`\\r\\n- `@socket.io/redis-adapter@3.4.5` (hence the `**` to match the `/` char)\\r\\n\\r\\nThe `<package>` part is then used to select the right workspace (since we are using [a monorepo](/blog/monorepo/)):\\r\\n\\r\\n```yml\\r\\njobs:\\r\\n  publish:\\r\\n    steps:\\r\\n      # [...]\\r\\n\\r\\n      - name: Publish package\\r\\n        run: npm publish --workspace=${GITHUB_REF_NAME%@*} --provenance --access public\\r\\n        env:\\r\\n          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\\r\\n```\\r\\n\\r\\nReference: https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions\\r\\n\\r\\n### Compilation step\\r\\n\\r\\nA TypeScript compilation step is necessary, since some packages depend on the types of other packages:\\r\\n\\r\\n```yml\\r\\njobs:\\r\\n  publish:\\r\\n    steps:\\r\\n      # [...]\\r\\n\\r\\n      - name: Compile each package\\r\\n        run: npm run compile --workspaces --if-present\\r\\n\\r\\n      - name: Publish package\\r\\n      # [...]\\r\\n```\\r\\n\\r\\n## First verified version\\r\\n\\r\\nThe latest version of the `engine.io-parser` package has been released this way.\\r\\n\\r\\nOn the [npmjs.com](https://www.npmjs.com/package/engine.io-parser) website, you can find:\\r\\n\\r\\n- the details of the build, at the bottom of the page:\\r\\n\\r\\n![Provenance details on www.npmjs.com](/images/blog/npm-package-provenance/provenance-details.png)\\r\\n\\r\\n- a checked badge, in the \\"Versions\\" tab\\r\\n\\r\\n![Provenance badge on www.npmjs.com](/images/blog/npm-package-provenance/provenance-badge.png)\\r\\n\\r\\nYou can also verify the attestations of your dependencies:\\r\\n\\r\\n```bash\\r\\n$ npm i socket.io\\r\\n\\r\\nadded 22 packages, and audited 23 packages in 853ms\\r\\n\\r\\nfound 0 vulnerabilities\\r\\n\\r\\n$ npm audit signatures\\r\\n\\r\\naudited 22 packages in 1s\\r\\n\\r\\n22 packages have verified registry signatures\\r\\n\\r\\n1 package has a verified attestation # <-- it\'s a good start!\\r\\n```\\r\\n\\r\\n## Conclusion\\r\\n\\r\\nThis is a big step forward in increasing trust in the JS ecosystem, congratulations to the npm team!\\r\\n\\r\\nSome big names have already joined the club:\\r\\n\\r\\n- [axios](https://www.npmjs.com/package/axios)\\r\\n- [next](https://www.npmjs.com/package/next)\\r\\n- [vite](https://www.npmjs.com/package/vite)\\r\\n\\r\\nThat\'s all folks, thanks for reading!"},{"id":"/monorepo/","metadata":{"permalink":"/blog/monorepo/","editUrl":"https://github.com/socketio/nhonvo.github.io/edit/main/blog/2024-07-12-monorepo.md","source":"@site/blog/2024-07-12-monorepo.md","title":"Socket.IO monorepo","description":"Hello everyone!","date":"2024-07-12T00:00:00.000Z","formattedDate":"July 12, 2024","tags":[],"readingTime":2.42,"hasTruncateMarker":true,"authors":[{"name":"Damien Arrachequesne","title":"Maintainer of Socket.IO","url":"https://github.com/darrachequesne","imageURL":"https://github.com/darrachequesne.png","key":"darrachequesne"}],"frontMatter":{"title":"Socket.IO monorepo","slug":"/monorepo/","authors":["darrachequesne"]},"prevItem":{"title":"npm package provenance","permalink":"/blog/npm-package-provenance/"},"nextItem":{"title":"Three new adapters","permalink":"/blog/three-new-adapters/"}},"content":"Hello everyone!\\r\\n\\r\\nWe are happy to announce that the Socket.IO codebase has been merged into a monorepo.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n:::note\\r\\n\\r\\nA monorepo is a single repository containing multiple distinct projects, with well-defined relationships.\\r\\n\\r\\nMore info [here](https://monorepo.tools)\\r\\n\\r\\n:::\\r\\n\\r\\n## Modular architecture\\r\\n\\r\\nAs part of the work towards [v1.0](/blog/introducing-socket-io-1-0/) ten years ago (!), the Socket.IO codebase was split into several packages, each with its own responsibility:\\r\\n\\r\\n![Diagram of the package inter-dependencies](/images/blog/monorepo/packages.png)\\r\\n\\r\\nAt the time, tools like [`lerna`](https://lerna.js.org/) or [pnpm workspaces](https://pnpm.io/workspaces) that make it easier to develop and publish multiple JavaScript packages from the same repository did not exist yet, so the codebase was split into multiple GitHub repositories:\\r\\n\\r\\n- https://github.com/socketio/socket.io\\r\\n- https://github.com/socketio/socket.io-client\\r\\n- https://github.com/socketio/socket.io-parser\\r\\n- ...\\r\\n\\r\\nHowever, this structure has several downsides:\\r\\n\\r\\n- it\'s harder for newcomers to dig into the codebase and understand what\'s going on under the hood\\r\\n- a change that affects multiple repositories is more difficult to test\\r\\n- mundane tasks like configuring CI or updating development dependencies must be replicated across all repositories\\r\\n\\r\\nThat\'s why we have made the decision to merge all repositories into [a single one](https://github.com/socketio/socket.io). The source codes for the different packages are now located in the `packages/` directory:\\r\\n\\r\\n```\\r\\npackages/\\r\\n\u251c\u2500\u2500 engine.io\\r\\n\u251c\u2500\u2500 engine.io-client\\r\\n\u251c\u2500\u2500 engine.io-parser\\r\\n\u251c\u2500\u2500 socket.io\\r\\n\u251c\u2500\u2500 socket.io-adapter\\r\\n\u251c\u2500\u2500 socket.io-client\\r\\n\u2514\u2500\u2500 socket.io-parser\\r\\n```\\r\\n\\r\\n## Workspaces\\r\\n\\r\\nTo manage the packages, we use [npm workspaces](https://docs.npmjs.com/cli/v10/using-npm/workspaces) which were introduced in npm v7 (bundled with Node.js v15). The `package.json` file at the root of the repository lists all packages and their development dependencies:\\r\\n\\r\\n```json title=\\"package.json\\"\\r\\n{\\r\\n  \\"private\\": true,\\r\\n  \\"workspaces\\": [\\r\\n    \\"packages/engine.io-parser\\",\\r\\n    \\"packages/engine.io\\",\\r\\n    \\"packages/engine.io-client\\",\\r\\n    \\"packages/socket.io-adapter\\",\\r\\n    \\"packages/socket.io-parser\\",\\r\\n    \\"packages/socket.io-client\\",\\r\\n    \\"packages/socket.io\\"\\r\\n  ],\\r\\n  \\"devDependencies\\": {\\r\\n    // [...]\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\nAfter cloning the repository, running `npm install` will fetch all necessary dependencies and create the links between the packages:\\r\\n\\r\\n```bash\\r\\n$ npm ls\\r\\nsocket.io@ /git/socket.io\\r\\n\u2514\u2500\u252c socket.io@4.7.5 -> ./packages/socket.io\\r\\n  \u251c\u2500\u2500 accepts@1.3.8\\r\\n  \u251c\u2500\u2500 base64id@2.0.0\\r\\n  \u251c\u2500\u2500 cors@2.8.5\\r\\n  \u251c\u2500\u2500 debug@4.3.5\\r\\n# highlight-next-line\\r\\n  \u251c\u2500\u2500 engine.io@6.6.0 -> ./packages/engine.io\\r\\n# highlight-next-line\\r\\n  \u251c\u2500\u252c socket.io-adapter@2.5.5 -> ./packages/socket.io-adapter\\r\\n  \u2502 \u251c\u2500\u2500 debug@4.3.5 deduped\\r\\n  \u2502 \u2514\u2500\u2500 ws@8.17.1 overridden\\r\\n# highlight-next-line\\r\\n  \u2514\u2500\u252c socket.io-parser@4.2.4 -> ./packages/socket.io-parser\\r\\n    \u251c\u2500\u2500 @socket.io/component-emitter@3.1.2 -> ./packages/socket.io-component-emitter\\r\\n    \u2514\u2500\u2500 debug@4.3.5 deduped\\r\\n```\\r\\n\\r\\nAnd finally, running `npm test --workspaces` (or `npm test -ws`) will run the tests on all workspaces, ensuring that any change is properly tested over the whole codebase.\\r\\n\\r\\n:::tip\\r\\n\\r\\nOur [contributing guide](https://github.com/socketio/socket.io/blob/main/CONTRIBUTING.md) has been updated accordingly.\\r\\n\\r\\n:::\\r\\n\\r\\n## Git history\\r\\n\\r\\nObviously, losing 10 years of git history from the other repositories was not an option. The repositories have thus been merged with the `--allow-unrelated-histories` option, in order to include their history in the monorepo:\\r\\n\\r\\n![Schema of the preserved git history](/images/blog/monorepo/git-history.png)\\r\\n\\r\\nReference: https://git-scm.com/docs/git-merge#Documentation/git-merge.txt---allow-unrelated-histories\\r\\n\\r\\n## GitHub issues\\r\\n\\r\\nSimilarly, it was not conceivable to lose the list of open GitHub issues across all repositories, since it is our most valuable source of user feedback, so they have been moved to the main repository: https://github.com/socketio/socket.io/issues\\r\\n\\r\\nHopefully, this change should make it easier for anyone to contribute to the project in the future.\\r\\n\\r\\nThat\'s all folks, thanks for reading!"},{"id":"/three-new-adapters/","metadata":{"permalink":"/blog/three-new-adapters/","editUrl":"https://github.com/socketio/nhonvo.github.io/edit/main/blog/2024-03-29-new-adapters.md","source":"@site/blog/2024-03-29-new-adapters.md","title":"Three new adapters","description":"Hello everyone!","date":"2024-03-29T00:00:00.000Z","formattedDate":"March 29, 2024","tags":[],"readingTime":0.17,"hasTruncateMarker":false,"authors":[{"name":"Damien Arrachequesne","title":"Maintainer of Socket.IO","url":"https://github.com/darrachequesne","imageURL":"https://github.com/darrachequesne.png","key":"darrachequesne"}],"frontMatter":{"title":"Three new adapters","slug":"/three-new-adapters/","authors":["darrachequesne"]},"prevItem":{"title":"Socket.IO monorepo","permalink":"/blog/monorepo/"},"nextItem":{"title":"Chat platform","permalink":"/blog/chat-platform/"}},"content":"Hello everyone!\\r\\n\\r\\nI\'m happy to announce that we provide 3 new official adapters:\\r\\n\\r\\n- the [Google Cloud Pub/Sub adapter](/docs/v4/gcp-pubsub-adapter/)\\r\\n- the [AWS SQS adapter](/docs/v4/aws-sqs-adapter/)\\r\\n- the [Azure Service Bus adapter](/docs/v4/azure-service-bus-adapter/)\\r\\n\\r\\nAny feedback is welcome!"},{"id":"/chat-platform/","metadata":{"permalink":"/blog/chat-platform/","editUrl":"https://github.com/socketio/nhonvo.github.io/edit/main/blog/2024-01-12-chat-platform.md","source":"@site/blog/2024-01-12-chat-platform.md","title":"Chat platform","description":"Hello everyone!","date":"2024-01-12T00:00:00.000Z","formattedDate":"January 12, 2024","tags":[],"readingTime":1.065,"hasTruncateMarker":true,"authors":[{"name":"Damien Arrachequesne","title":"Maintainer of Socket.IO","url":"https://github.com/darrachequesne","imageURL":"https://github.com/darrachequesne.png","key":"darrachequesne"}],"frontMatter":{"title":"Chat platform","slug":"/chat-platform/","authors":["darrachequesne"]},"prevItem":{"title":"Three new adapters","permalink":"/blog/three-new-adapters/"},"nextItem":{"title":"Socket.IO on Azure","permalink":"/blog/socket-io-on-azure-preview/"}},"content":"Hello everyone!\\r\\n\\r\\nA new sample project is available: the **Chat platform**.\\r\\n\\r\\nThe source code can be found [here](https://github.com/socketio/socket.io-chat-platform).\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n:::note for newcomers\\r\\n\\r\\nSocket.IO is a library that enables low-latency, bidirectional and event-based communication between a client and a server.\\r\\n\\r\\nTo achieve this, it automatically selects the best available low-level transport between [WebTransport](https://developer.mozilla.org/en-US/docs/Web/API/WebTransport_API), [WebSocket](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API) and HTTP long-polling, based on the capabilities of the client platform and the network.\\r\\n\\r\\n:::\\r\\n\\r\\n## Goal\\r\\n\\r\\nThe goal of this project is to provide a full-blown project based on Socket.IO with:\\r\\n\\r\\n- authentication/user registration\\r\\n- public and private messaging\\r\\n- proper reconnection management\\r\\n- presence management\\r\\n\\r\\nThe source code is provided with a permissive MIT license, so that you can use it/extend it to your will.\\r\\n\\r\\n## How to use\\r\\n\\r\\nCheck out the code [here](https://github.com/socketio/socket.io-chat-platform) and follow the instructions in the README.\\r\\n\\r\\n## Features\\r\\n\\r\\n### Channel-based messages\\r\\n\\r\\n![Screenshot of a public channel](/images/channel_based_messages.png)\\r\\n\\r\\n### Private messages\\r\\n\\r\\n![Screenshot of a private channel](/images/private_messages.png)\\r\\n\\r\\n## Tools\\r\\n\\r\\n### Server\\r\\n\\r\\nThe server is written in plain JavaScript, with the [`express`](https://expressjs.com/), `express-session` and [`passport`](https://www.passportjs.org/) packages. The database is [PostgreSQL](https://www.postgresql.org/).\\r\\n\\r\\n### Client\\r\\n\\r\\nThe client is a [Vue.js](https://vuejs.org/) single-page application, with the [`vue-router`](https://router.vuejs.org/) and [`pinia`](https://pinia.vuejs.org/) packages. It uses [Bootstrap v5](https://getbootstrap.com/) for the styles.\\r\\n\\r\\n## Roadmap\\r\\n\\r\\n- React client ([link](https://github.com/socketio/socket.io-chat-platform/issues/1))\\r\\n- MongoDB server ([link](https://github.com/socketio/socket.io-chat-platform/issues/2))\\r\\n\\r\\nAny additional suggestion is welcome!"},{"id":"/socket-io-on-azure-preview/","metadata":{"permalink":"/blog/socket-io-on-azure-preview/","editUrl":"https://github.com/socketio/nhonvo.github.io/edit/main/blog/2023-08-23-socketio-on-azure.md","source":"@site/blog/2023-08-23-socketio-on-azure.md","title":"Socket.IO on Azure","description":"- Overview of Socket.IO support on Azure","date":"2023-08-23T00:00:00.000Z","formattedDate":"August 23, 2023","tags":[],"readingTime":2.625,"hasTruncateMarker":true,"authors":[{"name":"Kevin Guo","title":"Product Manager at Microsoft | Support for Socket.IO on Azure","url":"https://github.com/kevinguo-ed","imageURL":"https://github.com/kevinguo-ed.png","key":"kevinguo-ed"}],"frontMatter":{"title":"Socket.IO on Azure","slug":"/socket-io-on-azure-preview/","authors":["kevinguo-ed"]},"prevItem":{"title":"Chat platform","permalink":"/blog/chat-platform/"},"nextItem":{"title":"Redis Streams adapter","permalink":"/blog/socket-io-redis-streams-adapter/"}},"content":"- [Overview of Socket.IO support on Azure](https://learn.microsoft.com/azure/azure-web-pubsub/socketio-overview)\\r\\n- [Quickstarts of hosting a Socket.IO app on Azure](https://learn.microsoft.com/azure/azure-web-pubsub/socketio-quickstart)\\r\\n\\r\\nHello developers, \\r\\n\\r\\nSince we put up an invitation to participate in a user study, we collected **hundreds of responses** and had the chance to speak in depth with several Socket.IO users. Thank you for your interest in the user study and helping us understand your experience. \\r\\n\\r\\nIn this post, I am going to share with you some notable learnings from the study. It\u2019s our hope that such sharing can shed light on how we can build a stronger community as Socket.IO users, contributors, and cloud providers. \\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n## Socket.IO is used in a wide range of app scenarios \\r\\nWe were pleasantly surprised by the variety of applications built using Socket.IO. Although a fair number of users reported building chat apps using Socket.IO, many shared that they use Socket.IO for identity management to limit the number of active browser tabs, for robotics to control the movement of mobile robots, for multi-player mobile games and for collaborative apps where users can track work items in real-time.\\r\\n\\r\\n## Overwhelmingly, users enjoy the \u201cintuitive APIs\u201d\\r\\nUsers seem to have exhausted the synonyms for \u201cintuitive\u201d in their responses. Once users have gone over the initial learning curve, it doesn\u2019t take long before they can get productive with Socket.IO\u2019s APIs, which are described as \u201csimple\u201d, \u201ceasy\u201d and \u201cplain\u201d. Plains APIs are definitely a praise in this case.\\r\\n\\r\\n## Some users seem to have doubts about Socket.IO\u2019s viability for large projects\\r\\nUsers new to Socket.IO seem to have the impression that Socket.IO is for small-scale and toy projects and it would be necessary to find alternatives when an app needs to scale. I am happy to report that impression doesn\u2019t reflect the reality; a few Socket.IO users shared that their apps handled 10s of thousand concurrent connections well, powered by running multiple Socket.IO instances behind a load balancer.  \\r\\n\\r\\n## Scaling out a Socket.IO is where developers report the most pain\\r\\nScaling out a Socket.IO app requires a multi-server setup. Essentially, client connections are spread across several Socket.IO server instances. To emit an event to clients connected with different server instances, there needs to be a component to coordinate the message passing. While simple in broad-stroke description, implementation is not particularly straight-forward or familiar to most users. Deploying and maintaining a separate adapter component add additional complexity to the task. \\r\\n\\r\\nThis is an area where we studied the most and thought we could bring the most value to developers. I am happy to share with you that with the input from the open-source community, we brought support for Socket.IO on Azure. With this support, Azure hosts and manages client connections; in other words, developers don\u2019t need an \u201cadapter\u201d component. \\r\\n\\r\\nWhat\u2019s more important is that server and client apps continue using the **same and familiar Socket.IO APIs**. With only a few lines of code, you can get any socket.io apps running locally to Azure. You can learn more about the support and try it out for free by following the links below.\\r\\n\\r\\n- [Overview of Socket.IO support on Azure](https://learn.microsoft.com/azure/azure-web-pubsub/socketio-overview)\\r\\n- [Quickstarts of hosting a Socket.IO app on Azure](https://learn.microsoft.com/azure/azure-web-pubsub/socketio-quickstart)"},{"id":"/socket-io-redis-streams-adapter/","metadata":{"permalink":"/blog/socket-io-redis-streams-adapter/","editUrl":"https://github.com/socketio/nhonvo.github.io/edit/main/blog/2023-04-07-redis-streams-adapter.md","source":"@site/blog/2023-04-07-redis-streams-adapter.md","title":"Redis Streams adapter","description":"Hello everyone!","date":"2023-04-07T00:00:00.000Z","formattedDate":"April 7, 2023","tags":[],"readingTime":0.55,"hasTruncateMarker":true,"authors":[{"name":"Damien Arrachequesne","title":"Maintainer of Socket.IO","url":"https://github.com/darrachequesne","imageURL":"https://github.com/darrachequesne.png","key":"darrachequesne"}],"frontMatter":{"title":"Redis Streams adapter","slug":"/socket-io-redis-streams-adapter/","authors":["darrachequesne"]},"prevItem":{"title":"Socket.IO on Azure","permalink":"/blog/socket-io-on-azure-preview/"},"nextItem":{"title":"Socket.IO server for Deno","permalink":"/blog/socket-io-deno/"}},"content":"Hello everyone!\\r\\n\\r\\nThere is a new official adapter for Socket.IO: the [Redis Streams adapter](/docs/v4/redis-streams-adapter/).\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n:::note\\r\\n\\r\\nAn Adapter is a server-side component which is responsible for forwarding packets within a cluster of Socket.IO servers.\\r\\n\\r\\nMore information [here](/docs/v4/adapter/).\\r\\n\\r\\n:::\\r\\n\\r\\nThe adapter will use a [Redis stream](https://redis.io/docs/data-types/streams/) to forward packets between the Socket.IO servers.\\r\\n\\r\\nThe main difference with the existing Redis adapter (which use the [Redis Pub/Sub mechanism](https://redis.io/docs/manual/pubsub/)) is that this adapter will properly handle any temporary disconnection to the Redis server and resume the stream without losing any packets.\\r\\n\\r\\nSee also:\\r\\n\\r\\n- [Installation steps](/docs/v4/redis-streams-adapter/#installation)\\r\\n- [Source code](https://github.com/socketio/socket.io-redis-streams-adapter)\\r\\n\\r\\nIf you have any feedback, feel free to open an issue in the repository."},{"id":"/socket-io-deno/","metadata":{"permalink":"/blog/socket-io-deno/","editUrl":"https://github.com/socketio/nhonvo.github.io/edit/main/blog/2022-09-13-deno.md","source":"@site/blog/2022-09-13-deno.md","title":"Socket.IO server for Deno","description":"Hello everyone!","date":"2022-09-13T00:00:00.000Z","formattedDate":"September 13, 2022","tags":[],"readingTime":0.61,"hasTruncateMarker":false,"authors":[{"name":"Damien Arrachequesne","title":"Maintainer of Socket.IO","url":"https://github.com/darrachequesne","imageURL":"https://github.com/darrachequesne.png","key":"darrachequesne"}],"frontMatter":{"title":"Socket.IO server for Deno","slug":"/socket-io-deno/","authors":"darrachequesne"},"prevItem":{"title":"Redis Streams adapter","permalink":"/blog/socket-io-redis-streams-adapter/"},"nextItem":{"title":"Socket.IO 4.5.0","permalink":"/blog/socket-io-4-5-0/"}},"content":"Hello everyone!\\r\\n\\r\\nI\'m happy to announce that Socket.IO is now compatible with [Deno](https://deno.land/), which is a runtime for JavaScript and TypeScript written in Rust.\\r\\n\\r\\nUsage:\\r\\n\\r\\n```ts\\r\\nimport { serve } from \\"https://deno.land/std@0.150.0/http/server.ts\\";\\r\\nimport { Server } from \\"https://deno.land/x/socket_io@0.1.1/mod.ts\\";\\r\\n\\r\\nconst io = new Server();\\r\\n\\r\\nio.on(\\"connection\\", (socket) => {\\r\\n  console.log(`socket ${socket.id} connected`);\\r\\n\\r\\n  socket.emit(\\"hello\\", \\"world\\");\\r\\n\\r\\n  socket.on(\\"disconnect\\", (reason) => {\\r\\n    console.log(`socket ${socket.id} disconnected due to ${reason}`);\\r\\n  });\\r\\n});\\r\\n\\r\\nawait serve(io.handler(), {\\r\\n  port: 3000,\\r\\n});\\r\\n```\\r\\n\\r\\nAnd then run with:\\r\\n\\r\\n```\\r\\n$ deno run --allow-net index.ts\\r\\n```\\r\\n\\r\\nThe API is very similar to the one exposed by the Node.js implementation.\\r\\n\\r\\nNext steps:\\r\\n\\r\\n- client implementation\\r\\n- compatibility with the Node.js ecosystem (msgpack parser, adapters, admin UI, ...)\\r\\n\\r\\nFeedback is welcome!\\r\\n\\r\\n- Source code: https://github.com/socketio/socket.io-deno\\r\\n- Module: https://deno.land/x/socket_io"},{"id":"/socket-io-4-5-0/","metadata":{"permalink":"/blog/socket-io-4-5-0/","editUrl":"https://github.com/socketio/nhonvo.github.io/edit/main/blog/2022-04-23-4.5.0.md","source":"@site/blog/2022-04-23-4.5.0.md","title":"Socket.IO 4.5.0","description":"Hello everyone!","date":"2022-04-23T00:00:00.000Z","formattedDate":"April 23, 2022","tags":[],"readingTime":1.69,"hasTruncateMarker":true,"authors":[{"name":"Damien Arrachequesne","title":"Maintainer of Socket.IO","url":"https://github.com/darrachequesne","imageURL":"https://github.com/darrachequesne.png","key":"darrachequesne"}],"frontMatter":{"title":"Socket.IO 4.5.0","slug":"/socket-io-4-5-0/","authors":"darrachequesne"},"prevItem":{"title":"Socket.IO server for Deno","permalink":"/blog/socket-io-deno/"},"nextItem":{"title":"Socket.IO 4.4.0","permalink":"/blog/socket-io-4-4-0/"}},"content":"Hello everyone!\\r\\n\\r\\nWe have just published a new minor version of Socket.IO: `4.5.0`\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nHere are the new features in this release:\\r\\n\\r\\n## Catch-all listeners for outgoing packets\\r\\n\\r\\nThis is similar to [`onAny()`](/docs/v4/server-api/#socketonanycallback), but for outgoing packets.\\r\\n\\r\\nSyntax:\\r\\n\\r\\n```js\\r\\nsocket.onAnyOutgoing((event, ...args) => {\\r\\n  console.log(event);\\r\\n});\\r\\n```\\r\\n\\r\\nThis feature can be used on both sides, and will also work when [broadcasting events](/docs/v4/broadcasting-events/):\\r\\n\\r\\n```js\\r\\nio.on(\\"connection\\", (socket) => {\\r\\n  socket.onAnyOutgoing((event, ...args) => {\\r\\n    console.log(event); // prints \\"some event\\"\\r\\n  });\\r\\n\\r\\n  io.emit(\\"some event\\");\\r\\n});\\r\\n```\\r\\n\\r\\n## Multiple acknowledgements when broadcasting\\r\\n\\r\\nYou can now broadcast an event to multiple clients and expect an acknowledgement:\\r\\n\\r\\n```js\\r\\nio.timeout(10000).emit(\\"some-event\\", (err, responses) => {\\r\\n  if (err) {\\r\\n    // some clients did not acknowledge the event in the given delay\\r\\n  } else {\\r\\n    console.log(responses); // one response per client\\r\\n  }\\r\\n});\\r\\n```\\r\\n\\r\\n## Limit the number of packets sent in HTTP long-polling mode\\r\\n\\r\\nThe server will now include the value of the [`maxHttpBufferSize`](/docs/v4/server-options/#maxhttpbuffersize) in the handshake, so the clients will now be able to decide how many packets they have to send to stay under this value.\\r\\n\\r\\nHere is what the handshake will now look like:\\r\\n\\r\\n```\\r\\n0{\\"sid\\":\\"lv_VI97HAXpY6yYWAAAC\\",\\"upgrades\\":[\\"websocket\\"],\\"pingInterval\\":25000,\\"pingTimeout\\":5000,\\"maxPayload\\":1000000}\\r\\n```\\r\\n\\r\\nMore information [here](https://github.com/socketio/socket.io-client/issues/1531).\\r\\n\\r\\n## Disconnection details\\r\\n\\r\\nThe \\"disconnect\\" event on the client side will now include additional details to help debugging if anything has gone wrong.\\r\\n\\r\\nExample when [sticky session is not enabled](/docs/v4/using-multiple-nodes/#why-is-sticky-session-required):\\r\\n\\r\\n```js\\r\\nsocket.on(\\"disconnect\\", (reason, details) => {\\r\\n  console.log(details.context.status); // 400\\r\\n  console.log(details.context.responseText); // \'{\\"code\\":1,\\"message\\":\\"Session ID unknown\\"}\'\\r\\n});\\r\\n```\\r\\n\\r\\nThis release also includes some bug fixes, please see the complete diff below.\\r\\n\\r\\n## Links\\r\\n\\r\\n- Server: [GitHub release](https://github.com/socketio/socket.io/releases/tag/4.5.0) / [Diff](https://github.com/socketio/socket.io/compare/4.4.1...4.5.0) / [npm](https://www.npmjs.com/package/socket.io/v/4.5.0)\\r\\n- Client: [GitHub release](https://github.com/socketio/socket.io-client/releases/tag/4.5.0) / [Diff](https://github.com/socketio/socket.io-client/compare/4.4.1...4.5.0) / [npm](https://www.npmjs.com/package/socket.io-client/v/4.5.0)\\r\\n\\r\\nSize of the bundles:\\r\\n\\r\\n|                          | min                           | min+gzip                      |\\r\\n|--------------------------|-------------------------------|-------------------------------|\\r\\n| socket.io.min.js         | 42.6 KB (+ 2.2 KB :arrow_up:) | 13.6 KB (+ 0.5 KB :arrow_up:) |\\r\\n| socket.io.msgpack.min.js | 47.7 KB (+ 2.1 KB :arrow_up:) | 14.6 KB (+ 0.4 KB :arrow_up:) |\\r\\n| socket.io.esm.min.js     | 34.5 KB (+ 1.4 KB :arrow_up:) | 11.5 KB (+ 0.2 KB :arrow_up:) |\\r\\n\\r\\nThat\'s all for this release, thanks for reading!"},{"id":"/socket-io-4-4-0/","metadata":{"permalink":"/blog/socket-io-4-4-0/","editUrl":"https://github.com/socketio/nhonvo.github.io/edit/main/blog/2021-11-18-4.4.0.md","source":"@site/blog/2021-11-18-4.4.0.md","title":"Socket.IO 4.4.0","description":"Hello everyone!","date":"2021-11-18T00:00:00.000Z","formattedDate":"November 18, 2021","tags":[],"readingTime":1.635,"hasTruncateMarker":true,"authors":[{"name":"Damien Arrachequesne","title":"Maintainer of Socket.IO","url":"https://github.com/darrachequesne","imageURL":"https://github.com/darrachequesne.png","key":"darrachequesne"}],"frontMatter":{"title":"Socket.IO 4.4.0","slug":"/socket-io-4-4-0/","authors":"darrachequesne"},"prevItem":{"title":"Socket.IO 4.5.0","permalink":"/blog/socket-io-4-5-0/"},"nextItem":{"title":"Socket.IO 4.3.0","permalink":"/blog/socket-io-4-3-0/"}},"content":"Hello everyone!\\r\\n\\r\\nWe have just published a new minor version of Socket.IO: `4.4.0`\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nAfter a big focus on the client in the [latest release](./2021-10-15-4.3.0.md), this release is more oriented towards the server.\\r\\n\\r\\n## Support for \xb5WebSockets.js\\r\\n\\r\\nWhy should one choose between performance and reliability? Starting with `socket.io@4.4.0`, you can now use the HTTP/WebSocket server provided by the [`\xb5WebSockets.js`](https://github.com/uNetworking/uWebSockets.js) package:\\r\\n\\r\\n```js\\r\\nconst { App } = require(\\"uWebSockets.js\\");\\r\\nconst { Server } = require(\\"socket.io\\");\\r\\n\\r\\nconst app = new App();\\r\\nconst io = new Server();\\r\\n\\r\\nio.attachApp(app);\\r\\n\\r\\nio.on(\\"connection\\", (socket) => {\\r\\n  // ...\\r\\n});\\r\\n\\r\\napp.listen(3000, (token) => {\\r\\n  if (!token) {\\r\\n    console.warn(\\"port already in use\\");\\r\\n  }\\r\\n});\\r\\n```\\r\\n\\r\\nIt acts as a replacement for both the default Node.js HTTP server and the WebSocket server provided by the [`ws`](https://github.com/websockets/ws) package, and should improve the memory footprint and the latency of your application. Benchmarks coming soon!\\r\\n\\r\\n## Emit with timeout\\r\\n\\r\\nThere is a new `socket.timeout()` method available on both sides:\\r\\n\\r\\n```js\\r\\nsocket.timeout(5000).emit(\\"my-event\\", (err) => {\\r\\n  if (err) {\\r\\n    // the other side did not acknowledge the event in the given delay\\r\\n  }\\r\\n});\\r\\n```\\r\\n\\r\\n## `socket.data` can now be typed\\r\\n\\r\\nFor TypeScript users, the `socket.data` can now be typed:\\r\\n\\r\\n```ts\\r\\ninterface SocketData {\\r\\n  name: string;\\r\\n  age: number;\\r\\n}\\r\\n\\r\\nconst io = new Server<ClientToServerEvents, ServerToClientEvents, InterServerEvents, SocketData>();\\r\\n\\r\\nio.on(\\"connection\\", (socket) => {\\r\\n  socket.data.name = \\"john\\";\\r\\n  socket.data.age = 42;\\r\\n});\\r\\n```\\r\\n\\r\\nThis release also includes some bug fixes, please see the complete diff below.\\r\\n\\r\\n## Links\\r\\n\\r\\n- Server: [GitHub release](https://github.com/socketio/socket.io/releases/tag/4.4.0) / [Diff](https://github.com/socketio/socket.io/compare/4.3.2...4.4.0) / [npm](https://www.npmjs.com/package/socket.io/v/4.4.0)\\r\\n- Client: [GitHub release](https://github.com/socketio/socket.io-client/releases/tag/4.4.0) / [Diff](https://github.com/socketio/socket.io-client/compare/4.3.2...4.4.0) / [npm](https://www.npmjs.com/package/socket.io-client/v/4.4.0)\\r\\n\\r\\nSize of the bundles:\\r\\n\\r\\n| | min | min+gzip |\\r\\n| --- | --- | --- |\\r\\n| socket.io.min.js | 40.4 KB (+ 0.4 KB :arrow_up:) | 13.1 KB (+ 0.1 KB :arrow_up:) |\\r\\n| socket.io.msgpack.min.js | 45.6 KB (+ 0.4 KB :arrow_up:) | 14.2 KB (-) |\\r\\n| socket.io.esm.min.js | 33.1 KB (+ 0.3 KB :arrow_up:) | 11.3 KB (+ 0.2 KB :arrow_up:) |\\r\\n\\r\\nThat\'s all for this release, thanks for reading!"},{"id":"/socket-io-4-3-0/","metadata":{"permalink":"/blog/socket-io-4-3-0/","editUrl":"https://github.com/socketio/nhonvo.github.io/edit/main/blog/2021-10-15-4.3.0.md","source":"@site/blog/2021-10-15-4.3.0.md","title":"Socket.IO 4.3.0","description":"Hello everyone!","date":"2021-10-15T00:00:00.000Z","formattedDate":"October 15, 2021","tags":[],"readingTime":0.815,"hasTruncateMarker":true,"authors":[{"name":"Damien Arrachequesne","title":"Maintainer of Socket.IO","url":"https://github.com/darrachequesne","imageURL":"https://github.com/darrachequesne.png","key":"darrachequesne"}],"frontMatter":{"title":"Socket.IO 4.3.0","slug":"/socket-io-4-3-0/","authors":"darrachequesne"},"prevItem":{"title":"Socket.IO 4.4.0","permalink":"/blog/socket-io-4-4-0/"},"nextItem":{"title":"Monthly update #5","permalink":"/blog/monthly-update-5/"}},"content":"Hello everyone!\\r\\n\\r\\nWe have just published a new minor version of Socket.IO: `4.3.0`\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nAn ESM bundle is now provided:\\r\\n\\r\\n```html\\r\\n<script type=\\"module\\">\\r\\n  import { io } from \\"https://cdn.socket.io/4.3.0/socket.io.esm.min.js\\";\\r\\n\\r\\n  const socket = io();\\r\\n\\r\\n  socket.emit(\\"hello\\", \\"world\\");\\r\\n<\/script>\\r\\n```\\r\\n\\r\\nThe bundle size has been [greatly reduced](https://bundlephobia.com/package/socket.io-client@4.3.0), thanks to:\\r\\n\\r\\n- the migration to [rollup](https://rollupjs.org)\\r\\n- the cleanup of some unused code\\r\\n- the removal of debug calls from the bundle (explanation [here](https://github.com/socketio/engine.io-client/commit/00d7e7d7ee85b4cfa6f9f547203cc692083ac61c))\\r\\n\\r\\nAnd finally, the Socket.IO client is now compatible with [Vite](https://vitejs.dev/) ([#1492](https://github.com/socketio/socket.io-client/issues/1492)).\\r\\n\\r\\n### Links\\r\\n\\r\\n- Server: [Release notes](https://github.com/socketio/socket.io/releases/tag/4.3.0) / [Diff](https://github.com/socketio/socket.io/compare/4.2.0...4.3.0)\\r\\n- Client: [Release notes](https://github.com/socketio/socket.io-client/releases/tag/4.3.0) / [Diff](https://github.com/socketio/socket.io-client/compare/4.2.0...4.3.0)\\r\\n- `ws` version: `~8.2.3` ([diff](https://github.com/websockets/ws/compare/7.4.2...8.2.3))\\r\\n\\r\\nSize of the bundles:\\r\\n\\r\\n| | min | min+gzip |\\r\\n| --- | --- | --- |\\r\\n| socket.io.min.js | 39.9 KB (-24.6 KB :arrow_down:) | 12.9 KB (-3.1 KB :arrow_down:) |\\r\\n| socket.io.msgpack.min.js | 45.1 KB (-25.6 KB :arrow_down:) | 14 KB (-2.6 KB :arrow_down:) |\\r\\n| socket.io.esm.min.js | 32.7 KB | 11.1 KB |\\r\\n\\r\\nThat\'s all for this release, thanks for reading!"},{"id":"/monthly-update-5/","metadata":{"permalink":"/blog/monthly-update-5/","editUrl":"https://github.com/socketio/nhonvo.github.io/edit/main/blog/2021-07-08-monthly-update-5.md","source":"@site/blog/2021-07-08-monthly-update-5.md","title":"Monthly update #5","description":"Hi everyone!","date":"2021-07-08T00:00:00.000Z","formattedDate":"July 8, 2021","tags":[],"readingTime":1.32,"hasTruncateMarker":true,"authors":[{"name":"Damien Arrachequesne","title":"Maintainer of Socket.IO","url":"https://github.com/darrachequesne","imageURL":"https://github.com/darrachequesne.png","key":"darrachequesne"}],"frontMatter":{"title":"Monthly update #5","slug":"/monthly-update-5/","authors":"darrachequesne"},"prevItem":{"title":"Socket.IO 4.3.0","permalink":"/blog/socket-io-4-3-0/"},"nextItem":{"title":"Socket.IO 4.1.0","permalink":"/blog/socket-io-4-1-0/"}},"content":"Hi everyone!\\r\\n\\r\\nHere\'s the #5 edition of our Monthly update.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nSo, what\'s new in the Socket.IO ecosystem?\\r\\n\\r\\n- [A new API for inter-server communication](#a-new-api-for-inter-server-communication)\\r\\n- [New official adapters](#new-official-adapters)\\r\\n- [Additional documentation](#additional-documentation)\\r\\n- [Version updates](#version-updates)\\r\\n- [What\'s next](#whats-next)\\r\\n\\r\\n## A new API for inter-server communication\\r\\n\\r\\nThis feature had been requested for quite some time, it is now implemented in release 4.1.0. It allows to broadcast events between your Socket.IO servers.\\r\\n\\r\\nThe syntax is very similar to the existing one, except it\'s for server-to-server communication:\\r\\n\\r\\n```js\\r\\nio.serverSideEmit(\\"hello\\", \\"world\\");\\r\\n```\\r\\n\\r\\nAnd on the receiving side:\\r\\n\\r\\n```js\\r\\nio.on(\\"hello\\", (arg1) => {\\r\\n  console.log(arg1); // prints \\"world\\"\\r\\n});\\r\\n```\\r\\n\\r\\nAcknowledgements are supported too:\\r\\n\\r\\n```js\\r\\n// server A\\r\\nio.serverSideEmit(\\"ping\\", (err, responses) => {\\r\\n  console.log(responses[0]); // prints \\"pong\\"\\r\\n});\\r\\n\\r\\n// server B\\r\\nio.on(\\"ping\\", (cb) => {\\r\\n  cb(\\"pong\\");\\r\\n});\\r\\n```\\r\\n\\r\\nYou can find the complete release notes [here](/blog/socket-io-4-1-0/).\\r\\n\\r\\n## New official adapters\\r\\n\\r\\nHistorically, the Redis adapter was the only official adapter when scaling to multiple nodes.\\r\\n\\r\\nThere are now three additional official adapters:\\r\\n\\r\\n- the [MongoDB adapter](/docs/v4/mongo-adapter/)\\r\\n- the [Postgres adapter](/docs/v4/postgres-adapter/)\\r\\n- the [cluster adapter](/docs/v4/cluster-adapter/)\\r\\n\\r\\nNote: the first two were inspired from existing adapters maintained by the community and were updated to support Socket.IO v3.\\r\\n\\r\\nAll of them supports the [utility methods](/docs/v4/server-instance/#utility-methods) that were added in v4, including the `serverSideEmit()` method described above.\\r\\n\\r\\n## Additional documentation\\r\\n\\r\\n- usage with bundlers like webpack for the [client](/docs/v4/client-with-bundlers/) and the [server](/docs/v4/server-with-bundlers/)\\r\\n- [usage with PM2](/docs/v4/pm2/)\\r\\n\\r\\n## Version updates\\r\\n\\r\\n- [socket.io@4.1.2](https://github.com/socketio/socket.io/releases/tag/4.1.2)\\r\\n- [socket.io-client@4.1.2](https://github.com/socketio/socket.io-client/releases/tag/4.1.2)\\r\\n\\r\\n## What\'s next\\r\\n\\r\\n- a continuous focus on the documentation (additional code examples, extended guide, ...)\\r\\n- additional tooling around Socket.IO\\r\\n\\r\\nHappy coding!"},{"id":"/socket-io-4-1-0/","metadata":{"permalink":"/blog/socket-io-4-1-0/","editUrl":"https://github.com/socketio/nhonvo.github.io/edit/main/blog/2021-05-14-4.1.0.md","source":"@site/blog/2021-05-14-4.1.0.md","title":"Socket.IO 4.1.0","description":"Hello everyone!","date":"2021-05-14T00:00:00.000Z","formattedDate":"May 14, 2021","tags":[],"readingTime":3.675,"hasTruncateMarker":true,"authors":[{"name":"Damien Arrachequesne","title":"Maintainer of Socket.IO","url":"https://github.com/darrachequesne","imageURL":"https://github.com/darrachequesne.png","key":"darrachequesne"}],"frontMatter":{"title":"Socket.IO 4.1.0","slug":"/socket-io-4-1-0/","authors":"darrachequesne"},"prevItem":{"title":"Monthly update #5","permalink":"/blog/monthly-update-5/"},"nextItem":{"title":"Monthly update #4","permalink":"/blog/monthly-update-4/"}},"content":"Hello everyone!\\r\\n\\r\\nWe have just published a new minor version of Socket.IO: [4.1.0](https://github.com/socketio/socket.io/releases/tag/4.1.0)\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n## New features\\r\\n\\r\\n- [Add support for inter-server communication](#add-support-for-inter-server-communication)\\r\\n- [Emit an event when a namespace is created](#emit-an-event-when-a-namespace-is-created)\\r\\n- [Add a way to customize the response headers](#add-a-way-to-customize-the-response-headers)\\r\\n- [Add a way to get access to the reason of a connection error](#add-a-way-to-get-access-to-the-reason-of-a-connection-error)\\r\\n- [Add a way to ignore the `beforeunload` event](#add-a-way-to-ignore-the-beforeunload-event)\\r\\n\\r\\n### Add support for inter-server communication\\r\\n\\r\\nThis feature might be useful in a multi-server setup: you can now broadcast events between your Socket.IO servers.\\r\\n\\r\\nSyntax:\\r\\n\\r\\n```js\\r\\nio.serverSideEmit(\\"hello\\", \\"world\\");\\r\\n```\\r\\n\\r\\nAnd on the receiving side:\\r\\n\\r\\n```js\\r\\nio.on(\\"hello\\", (arg1) => {\\r\\n  console.log(arg1); // prints \\"world\\"\\r\\n});\\r\\n```\\r\\n\\r\\nAcknowledgements are supported too:\\r\\n\\r\\n```js\\r\\n// server A\\r\\nio.serverSideEmit(\\"ping\\", (err, responses) => {\\r\\n  console.log(responses[0]); // prints \\"pong\\"\\r\\n});\\r\\n\\r\\n// server B\\r\\nio.on(\\"ping\\", (cb) => {\\r\\n  cb(\\"pong\\");\\r\\n});\\r\\n```\\r\\n\\r\\nA few notes:\\r\\n\\r\\n- the events are specific to each [namespace](/docs/v4/namespaces/)\\r\\n\\r\\n```js\\r\\n// server A\\r\\nio.of(\\"/custom\\").serverSideEmit(\\"sync\\");\\r\\n\\r\\n// server B\\r\\nio.of(\\"/custom\\").on(\\"sync\\", () => {\\r\\n  // ...\\r\\n});\\r\\n```\\r\\n\\r\\n- the `connection`, `connect` and `new_namespace` (see [below](#emit-an-event-when-a-namespace-is-created)) strings are reserved and cannot be used in your application.\\r\\n\\r\\n- you can send any number of arguments, but binary structures are currently not supported (the array of arguments will be `JSON.stringify`-ed)\\r\\n\\r\\nExample:\\r\\n\\r\\n```js\\r\\nio.serverSideEmit(\\"hello\\", \\"world\\", 1, \\"2\\", { 3: \\"4\\" });\\r\\n```\\r\\n\\r\\nThe [Redis adapter](https://github.com/socketio/socket.io-redis-adapter) and its [associated emitter](https://github.com/socketio/socket.io-redis-emitter) have been updated to support this new functionality.\\r\\n\\r\\n### Emit an event when a namespace is created\\r\\n\\r\\nThe `new_namespace` event will be emitted by the Server instance when a new namespace is created:\\r\\n\\r\\n```js\\r\\nio.on(\\"new_namespace\\", (namespace) => {\\r\\n  // ...\\r\\n});\\r\\n```\\r\\n\\r\\nThis can be useful for example:\\r\\n\\r\\n- to attach a shared middleware to each namespace\\r\\n\\r\\n```js\\r\\nio.on(\\"new_namespace\\", (namespace) => {\\r\\n  namespace.use(myMiddleware);\\r\\n});\\r\\n```\\r\\n\\r\\n- to track the [dynamically created](/docs/v4/namespaces/#Dynamic-namespaces) namespaces\\r\\n\\r\\n```js\\r\\nio.of(/\\\\/nsp-\\\\w+/);\\r\\n\\r\\nio.on(\\"new_namespace\\", (namespace) => {\\r\\n  console.log(namespace.name);\\r\\n});\\r\\n```\\r\\n\\r\\n### Add a way to customize the response headers\\r\\n\\r\\nThe underlying Engine.IO server, which manages the low-level connection (HTTP long-polling and/or WebSocket), will now emit two additional events:\\r\\n\\r\\n- `initial_headers`\\r\\n- `headers`\\r\\n\\r\\nLike the name suggests, the `initial_headers` event will be emitted only for the first HTTP request of the session, while the `headers` event will be emitted for each HTTP request (including the WebSocket upgrade).\\r\\n\\r\\nExample:\\r\\n\\r\\n```js\\r\\nio.engine.on(\\"initial_headers\\", (headers, req) => {\\r\\n  headers[\\"test\\"] = \\"123\\";\\r\\n  headers[\\"set-cookie\\"] = \\"mycookie=456\\";\\r\\n});\\r\\n\\r\\nio.engine.on(\\"headers\\", (headers, req) => {\\r\\n  headers[\\"test\\"] = \\"789\\";\\r\\n});\\r\\n```\\r\\n\\r\\nNote: it was previously possible to achieve this by listening to the \\"request\\" event, but this should be easier with those new events:\\r\\n\\r\\n```js\\r\\nconst httpServer = require(\\"http\\").createServer();\\r\\nconst { Server } = require(\\"socket.io\\");\\r\\nconst io = new Server(httpServer);\\r\\n\\r\\nhttpServer.prependListener(\\"request\\", (req, res) => {\\r\\n  res.setHeader(\\"test\\", \\"789\\");\\r\\n});\\r\\n```\\r\\n\\r\\n### Add a way to get access to the reason of a connection error\\r\\n\\r\\nThe underlying Engine.IO server will also emit a new event: `connection_error`.\\r\\n\\r\\nSyntax:\\r\\n\\r\\n```js\\r\\nio.engine.on(\\"connection_error\\", (err) => {\\r\\n  console.log(err.req);\\t     // the request object\\r\\n  console.log(err.code);     // the error code, for example 1\\r\\n  console.log(err.message);  // the error message, for example \\"Session ID unknown\\"\\r\\n  console.log(err.context);  // some additional error context\\r\\n});\\r\\n```\\r\\n\\r\\nHere is the list of possible error codes:\\r\\n\\r\\n| Code | Message |\\r\\n|:----:|:-------:|\\r\\n| 0 | \\"Transport unknown\\"\\r\\n| 1 | \\"Session ID unknown\\"\\r\\n| 2 | \\"Bad handshake method\\"\\r\\n| 3 | \\"Bad request\\"\\r\\n| 4 | \\"Forbidden\\"\\r\\n| 5 | \\"Unsupported protocol version\\"\\r\\n\\r\\n### Add a way to ignore the `beforeunload` event\\r\\n\\r\\nA few months ago, a user [reported](https://github.com/socketio/socket.io/issues/3639) a weird behavior when reloading a page: on Firefox, the Socket instance would emit a `disconnect` event, but not on Chrome or Safari.\\r\\n\\r\\nWe have published a fix for this issue in `socket.io-client@3.1.1`, by silently closing the connection when receiving a [`beforeunload`](https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event) event from the browser.\\r\\n\\r\\nUnfortunately, this fix had unintended consequences: if you relied on the `beforeunload` event to prompt the user for confirmation (\\"your last modifications are not saved yet, do you really want to leave?\\"), the Socket.IO connection would now be closed, even if the user decided to stay on the page.\\r\\n\\r\\nThat\'s why we have added the `closeOnBeforeunload` option, to give you total control over this behavior:\\r\\n\\r\\n```js\\r\\nconst socket = io(\\"/\\", {\\r\\n  closeOnBeforeunload: false // defaults to true\\r\\n})\\r\\n```\\r\\n\\r\\n- `closeOnBeforeunload: true` (the default value) will make all browsers behave the same (no `disconnect` event when reloading the page)\\r\\n- `closeOnBeforeunload: false` will ignore the `beforeunload` event, but you will get a `disconnect` event on Firefox\\r\\n\\r\\nThat\'s all for this release, thanks for reading!"},{"id":"/monthly-update-4/","metadata":{"permalink":"/blog/monthly-update-4/","editUrl":"https://github.com/socketio/nhonvo.github.io/edit/main/blog/2021-05-06-monthly-update-4.md","source":"@site/blog/2021-05-06-monthly-update-4.md","title":"Monthly update #4","description":"Hi everyone!","date":"2021-05-06T00:00:00.000Z","formattedDate":"May 6, 2021","tags":[],"readingTime":1.225,"hasTruncateMarker":true,"authors":[{"name":"Damien Arrachequesne","title":"Maintainer of Socket.IO","url":"https://github.com/darrachequesne","imageURL":"https://github.com/darrachequesne.png","key":"darrachequesne"}],"frontMatter":{"title":"Monthly update #4","slug":"/monthly-update-4/","authors":"darrachequesne"},"prevItem":{"title":"Socket.IO 4.1.0","permalink":"/blog/socket-io-4-1-0/"},"nextItem":{"title":"Socket.IO Admin UI","permalink":"/blog/admin-ui-first-release/"}},"content":"Hi everyone!\\r\\n\\r\\nHere\'s the #4 edition of our Monthly update.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nSo, what\'s new in the Socket.IO ecosystem?\\r\\n\\r\\n- [A new Admin UI](#a-new-admin-ui)\\r\\n- [A new guide](#a-new-guide)\\r\\n- [Version updates](#version-updates)\\r\\n- [What\'s next](#whats-next)\\r\\n\\r\\n## A new Admin UI\\r\\n\\r\\nFollowing our focus on tooling, we have published a first release of the Socket.IO Admin UI:\\r\\n\\r\\n![admin UI screenshot](/images/admin-ui-dashboard.png)\\r\\n\\r\\nThis Admin UI is meant to give you an overview of your Socket.IO deployment.\\r\\n\\r\\nHere is the list of the current features:\\r\\n\\r\\n- overview of the servers and the clients that are currently connected\\r\\n- details of each socket instance (active transport, handshake, rooms, ...)\\r\\n- details of each room\\r\\n- administrative operations (join, leave, disconnect)\\r\\n\\r\\nAnd the features which will be added in the near future:\\r\\n\\r\\n- overview of the number of packets/bytes sent and received per second\\r\\n- emitting an event to all clients, a room or a particular Socket instance\\r\\n\\r\\nThe installation steps can be found [here](/docs/v4/admin-ui/).\\r\\n\\r\\nThe source code can be found here: https://github.com/socketio/socket.io-admin-ui/\\r\\n\\r\\nIf you have any feedback / suggestions, do not hesitate!\\r\\n\\r\\nPlease note that the Admin UI does support a cluster of several Socket.IO servers too.\\r\\n\\r\\n## A new guide\\r\\n\\r\\nWe have added a new guide ([here](/get-started/basic-crud-application/)), using Socket.IO to create a basic CRUD application.\\r\\n\\r\\n![Video of the application in action](/images/basic-crud-app.gif)\\r\\n\\r\\n## Version updates\\r\\n\\r\\n- [socket.io@4.0.2](https://github.com/socketio/socket.io/releases/tag/4.0.2)\\r\\n- [socket.io-client@4.0.2](https://github.com/socketio/socket.io-client/releases/tag/4.0.2)\\r\\n\\r\\n## What\'s next\\r\\n\\r\\n- a continuous focus on the documentation (additional code examples, extended guide, ...)\\r\\n- additional tooling around Socket.IO\\r\\n\\r\\nHappy coding!"},{"id":"/admin-ui-first-release/","metadata":{"permalink":"/blog/admin-ui-first-release/","editUrl":"https://github.com/socketio/nhonvo.github.io/edit/main/blog/2021-04-16-admin-ui.md","source":"@site/blog/2021-04-16-admin-ui.md","title":"Socket.IO Admin UI","description":"Hi everyone!","date":"2021-04-16T00:00:00.000Z","formattedDate":"April 16, 2021","tags":[],"readingTime":0.39,"hasTruncateMarker":true,"authors":[{"name":"Damien Arrachequesne","title":"Maintainer of Socket.IO","url":"https://github.com/darrachequesne","imageURL":"https://github.com/darrachequesne.png","key":"darrachequesne"}],"frontMatter":{"title":"Socket.IO Admin UI","slug":"/admin-ui-first-release/","authors":"darrachequesne"},"prevItem":{"title":"Monthly update #4","permalink":"/blog/monthly-update-4/"},"nextItem":{"title":"Monthly update #3","permalink":"/blog/monthly-update-3/"}},"content":"Hi everyone!\\r\\n\\r\\nWe have published a first release of the Socket.IO Admin UI:\\r\\n\\r\\n![admin UI screenshot](/images/admin-ui-dashboard.png)\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nCurrent features:\\r\\n\\r\\n- overview of the servers and the clients that are currently connected\\r\\n- details of each socket instance (active transport, handshake, rooms, ...)\\r\\n- details of each room\\r\\n- administrative operations (join, leave, disconnect)\\r\\n\\r\\nThe installation steps can be found [here](/docs/v4/admin-ui/).\\r\\n\\r\\nThe source code can be found here: https://github.com/socketio/socket.io-admin-ui/\\r\\n\\r\\nIf you have any feedback / suggestions, do not hesitate!"},{"id":"/monthly-update-3/","metadata":{"permalink":"/blog/monthly-update-3/","editUrl":"https://github.com/socketio/nhonvo.github.io/edit/main/blog/2021-04-07-monthly-update-3.md","source":"@site/blog/2021-04-07-monthly-update-3.md","title":"Monthly update #3","description":"Hi everyone!","date":"2021-04-07T00:00:00.000Z","formattedDate":"April 7, 2021","tags":[],"readingTime":2.28,"hasTruncateMarker":true,"authors":[{"name":"Damien Arrachequesne","title":"Maintainer of Socket.IO","url":"https://github.com/darrachequesne","imageURL":"https://github.com/darrachequesne.png","key":"darrachequesne"}],"frontMatter":{"title":"Monthly update #3","slug":"/monthly-update-3/","authors":"darrachequesne"},"prevItem":{"title":"Socket.IO Admin UI","permalink":"/blog/admin-ui-first-release/"},"nextItem":{"title":"Socket.IO 4.0.0","permalink":"/blog/socket-io-4-release/"}},"content":"Hi everyone!\\r\\n\\r\\nHere\'s the #3 edition of our Monthly update.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nSo, what\'s new in the Socket.IO ecosystem?\\r\\n\\r\\n- [Socket.IO v4](#socketio-v4)\\r\\n- [Redis Adapter v6.1.0 and Redis Emitter v4.0.0](#redis-adapter-v610-and-redis-emitter-v400)\\r\\n- [Documentation](#documentation)\\r\\n- [New versions](#new-versions)\\r\\n- [What\'s next](#whats-next)\\r\\n\\r\\n## Socket.IO v4\\r\\n\\r\\nWait, already v4?\\r\\n\\r\\nYes, but the upgrade should be a lot easier than from v2 to v3, since the two breaking changes only impact the API on the server side.\\r\\n\\r\\nThe most important breaking change is related to broadcasting: calling `to()` or any other broadcast modifier will now return an immutable object.\\r\\n\\r\\nPreviously, the modifiers were saved on the `io` instance directly, which could lead to surprising behaviors:\\r\\n\\r\\n```js\\r\\nio.to(\\"room1\\");\\r\\n// and then later\\r\\nio.to(\\"room2\\").emit(/* ... */); // also sent to room1\\r\\n```\\r\\n\\r\\nYou were also not able to reuse the operator:\\r\\n\\r\\n```js\\r\\nconst operator = io.to(\\"room1\\");\\r\\n\\r\\noperator.emit(/* ... */); // to room1 (assuming synchronous call)\\r\\noperator.emit(/* ... */); // to all clients\\r\\n```\\r\\n\\r\\nEven more surprising, with asynchronous code:\\r\\n\\r\\n```js\\r\\nio.to(\\"room3\\").emit(\\"details\\", await fetchDetails()); // unspecified behavior: maybe in room3, maybe to all clients\\r\\n```\\r\\n\\r\\nStarting with v4.0.0, you can now use `io.to()` safely:\\r\\n\\r\\n```js\\r\\nconst operator = io.to(\\"room1\\").except(\\"room2\\");\\r\\n\\r\\noperator.emit(/* ... */);\\r\\noperator.emit(/* ... */);\\r\\n```\\r\\n\\r\\nThis release also brings some interesting new features, like the `fetchSockets()` method.\\r\\n\\r\\nPlease check the migration guide [here](/docs/v4/migrating-from-3-x-to-4-0/).\\r\\n\\r\\n## Redis Adapter v6.1.0 and Redis Emitter v4.0.0\\r\\n\\r\\nThe Redis adapter (for broadcasting packets with multiple Socket.IO servers) and the Redis emitter (for broadcasting packets from another Node.js process) have been updated in order to support the [new features](/docs/v4/migrating-from-3-x-to-4-0/#new-features) of the v4 release.\\r\\n\\r\\nFor example, the `socketsJoin` method will work across Socket.IO servers:\\r\\n\\r\\n```js\\r\\n// make all Socket instances join the \\"room1\\" room\\r\\nio.socketsJoin(\\"room1\\");\\r\\n\\r\\n// make all Socket instances in the \\"room1\\" room join the \\"room2\\" and \\"room3\\" rooms\\r\\nio.in(\\"room1\\").socketsJoin([\\"room2\\", \\"room3\\"]);\\r\\n\\r\\n// make all Socket instances in the \\"room1\\" room of the \\"admin\\" namespace join the \\"room2\\" room\\r\\nio.of(\\"/admin\\").in(\\"room1\\").socketsJoin(\\"room2\\");\\r\\n```\\r\\n\\r\\nMore information can be found [here](/docs/v4/server-instance/#utility-methods).\\r\\n\\r\\n## Documentation\\r\\n\\r\\nThe documentation continues to be improved.\\r\\n\\r\\nA new example project has been added in the \\"Get started\\" section, with middlewares and rooms: [Private messaging](/get-started/private-messaging-part-1/)\\r\\n\\r\\nAs usual, if you find a typo or think that some details are missing, please open an issue here: https://github.com/socketio/socket.io-website\\r\\n\\r\\n## New versions\\r\\n\\r\\n- [socket.io@4.0.1](https://github.com/socketio/socket.io/releases/tag/4.0.1) ([release notes](/blog/socket-io-3-release/))\\r\\n  - [engine.io-parser@4.0.2](https://github.com/socketio/engine.io-parser/releases/tag/4.0.2) (included in `socket.io{% raw %}@{% endraw %}4.0.1`)\\r\\n  - [engine.io@5.0.0](https://github.com/socketio/engine.io/releases/tag/5.0.0) (included in `socket.io{% raw %}@{% endraw %}4.0.1`)\\r\\n  - [socket.io-parser@4.0.4](https://github.com/socketio/socket.io-parser/releases/tag/4.0.4) (included in `socket.io{% raw %}@{% endraw %}4.0.1`)\\r\\n\\r\\n- [socket.io-client@4.0.1](https://github.com/socketio/socket.io-client/releases/tag/4.0.1)\\r\\n  - [engine.io-parser@4.0.2](https://github.com/socketio/engine.io-parser/releases/tag/4.0.2) (included in `socket.io-client{% raw %}@{% endraw %}4.0.1`)\\r\\n  - [engine.io-client@5.0.1](https://github.com/socketio/engine.io-client/releases/tag/5.0.1) (included in `socket.io-client{% raw %}@{% endraw %}4.0.1`)\\r\\n  - [socket.io-parser@4.0.4](https://github.com/socketio/socket.io-parser/releases/tag/4.0.4) (included in `socket.io-client{% raw %}@{% endraw %}4.0.1`)\\r\\n\\r\\n- [socket.io-redis@6.1.0](https://github.com/socketio/socket.io-redis/releases/tag/6.1.0)\\r\\n- [@socket.io/redis-emitter@4.0.0](https://github.com/socketio/socket.io-redis-emitter/releases/tag/4.0.0)\\r\\n\\r\\n## What\'s next\\r\\n\\r\\n- a continuous focus on the documentation (additional code examples, extended guide, ...)\\r\\n- additional tooling around Socket.IO\\r\\n\\r\\nStay safe!"},{"id":"/socket-io-4-release/","metadata":{"permalink":"/blog/socket-io-4-release/","editUrl":"https://github.com/socketio/nhonvo.github.io/edit/main/blog/2021-03-10-4.0.0.md","source":"@site/blog/2021-03-10-4.0.0.md","title":"Socket.IO 4.0.0","description":"Hello everyone!","date":"2021-03-10T00:00:00.000Z","formattedDate":"March 10, 2021","tags":[],"readingTime":0.92,"hasTruncateMarker":true,"authors":[{"name":"Damien Arrachequesne","title":"Maintainer of Socket.IO","url":"https://github.com/darrachequesne","imageURL":"https://github.com/darrachequesne.png","key":"darrachequesne"}],"frontMatter":{"title":"Socket.IO 4.0.0","slug":"/socket-io-4-release/","authors":"darrachequesne"},"prevItem":{"title":"Monthly update #3","permalink":"/blog/monthly-update-3/"},"nextItem":{"title":"Socket.IO 3.1.0","permalink":"/blog/socket-io-3-1-0/"}},"content":"Hello everyone!\\r\\n\\r\\nWe just published a new major version of Socket.IO: [4.0.0](https://github.com/socketio/socket.io/releases/tag/4.0.0)\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nPlease see the associated [migration guide](/docs/v4/migrating-from-3-x-to-4-0/).\\r\\n\\r\\n**TL;DR:** this major bump is due to a few breaking changes at the API level.\\r\\n\\r\\nApart from this, the Socket.IO protocol was not updated, so a v3 client **will** be able to reach a v4 server and vice-versa. Besides, the compatibility mode ([`allowEIO3: true`](/docs/v4/server-options/#alloweio3)) is still available between a Socket.IO v2 client and a Socket.IO v4 server.\\r\\n\\r\\n### Bug Fixes (server)\\r\\n\\r\\n* make io.to(...) immutable ([ac9e8ca](https://github.com/socketio/socket.io/commit/ac9e8ca6c71e00d4af45ee03f590fe56f3951186))\\r\\n* set default protocol version to 3 ([#616](https://github.com/socketio/engine.io/issues/616)) ([868d891](https://github.com/socketio/engine.io/commit/868d89111de0ab5bd0e147ecaff7983afbf5d087)) (Engine.IO)\\r\\n\\r\\n### Bug Fixes (client)\\r\\n\\r\\n* **bundle:** restore support for JS modules ([43613d1](https://github.com/socketio/socket.io-client/commit/43613d1b2c3c04e89d572750656012f54d44467c))\\r\\n\\r\\n### Features (server)\\r\\n\\r\\n* add some utility methods ([b25495c](https://github.com/socketio/socket.io/commit/b25495c069031674da08e19aed68922c7c7a0e28))\\r\\n* add support for typed events ([#3822](https://github.com/socketio/socket.io/issues/3822)) ([0107510](https://github.com/socketio/socket.io/commit/0107510ba8a0f148c78029d8be8919b350feb633))\\r\\n* allow to exclude specific rooms when broadcasting ([#3789](https://github.com/socketio/socket.io/issues/3789)) ([7de2e87](https://github.com/socketio/socket.io/commit/7de2e87e888d849eb2dfc5e362af4c9e86044701))\\r\\n* allow to pass an array to io.to(...) ([085d1de](https://github.com/socketio/socket.io/commit/085d1de9df909651de8b313cc6f9f253374b702e))\\r\\n* increase the default value of pingTimeout ([5a7fa13](https://github.com/socketio/engine.io/commit/5a7fa132c442bc1e7eefa1cf38168ee951575ded)) (Engine.IO)\\r\\n* remove dynamic require() with wsEngine ([edb7343](https://github.com/socketio/engine.io/commit/edb734316f143bf0f1bbc344e966d18e2676b934)) (Engine.IO)\\r\\n\\r\\n### Features (client)\\r\\n\\r\\n* add autoUnref option ([6abfa1f](https://github.com/socketio/socket.io-client/commit/6abfa1fa4c7fea0d69c69b254d2e1ca18f19c4bc))\\r\\n* add support for typed events ([5902365](https://github.com/socketio/socket.io-client/commit/59023657a02cf78f90522e0d7797749707ed5ed2))\\r\\n* listen to the \\"offline\\" event ([c361bc6](https://github.com/socketio/engine.io-client/commit/c361bc691f510b96f8909c5e6c62a4635d50275c)) (Engine.IO client)"},{"id":"/socket-io-3-1-0/","metadata":{"permalink":"/blog/socket-io-3-1-0/","editUrl":"https://github.com/socketio/nhonvo.github.io/edit/main/blog/2021-01-15-3.1.0.md","source":"@site/blog/2021-01-15-3.1.0.md","title":"Socket.IO 3.1.0","description":"Hello everyone!","date":"2021-01-15T00:00:00.000Z","formattedDate":"January 15, 2021","tags":[],"readingTime":1.42,"hasTruncateMarker":true,"authors":[{"name":"Damien Arrachequesne","title":"Maintainer of Socket.IO","url":"https://github.com/darrachequesne","imageURL":"https://github.com/darrachequesne.png","key":"darrachequesne"}],"frontMatter":{"title":"Socket.IO 3.1.0","slug":"/socket-io-3-1-0/","authors":"darrachequesne"},"prevItem":{"title":"Socket.IO 4.0.0","permalink":"/blog/socket-io-4-release/"},"nextItem":{"title":"Socket.IO 2.4.0","permalink":"/blog/socket-io-2-4-0/"}},"content":"Hello everyone!\\r\\n\\r\\nWe just published a new version of Socket.IO: [3.1.0](https://github.com/socketio/socket.io/releases/tag/3.1.0)\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nIn order to ease the migration to Socket.IO v3, the v3 server is now able to communicate with v2 clients:\\r\\n\\r\\n```js\\r\\nconst io = require(\\"socket.io\\")({\\r\\n  allowEIO3: true // false by default\\r\\n});\\r\\n```\\r\\n\\r\\nThis should make the migration easier for existing deployments:\\r\\n\\r\\n- first, update the servers with `allowEIO3` set to `true`\\r\\n\\r\\n```js\\r\\nconst io = require(\\"socket.io\\")({\\r\\n  allowEIO3: true // false by default\\r\\n});\\r\\n```\\r\\n\\r\\nNote: If you are using the Redis adapter to [broadcast packets between nodes](/docs/v3/broadcasting-events/#With-multiple-Socket-IO-servers), you must use `socket.io-redis@5` with `socket.io@2` and `socket.io-redis@6` with `socket.io@3`. Please note that both versions are compatible, so you can update each server one by one (no big bang is needed).\\r\\n\\r\\n- then, update the clients\\r\\n\\r\\nThis step may actually take some time, as some clients may still have a v2 client in cache.\\r\\n\\r\\nYou can check the version of the connection with:\\r\\n\\r\\n```js\\r\\nio.on(\\"connection\\", (socket) => {\\r\\n  const version = socket.conn.protocol; // either 3 or 4\\r\\n});\\r\\n```\\r\\n\\r\\nThis matches the value of the `EIO` query parameter in the HTTP requests.\\r\\n\\r\\n- and finally, once every client was updated, set `allowEIO3` to `false` (which is the default value)\\r\\n\\r\\n```js\\r\\nconst io = require(\\"socket.io\\")({\\r\\n  allowEIO3: false\\r\\n});\\r\\n```\\r\\n\\r\\nWith `allowEIO3` set to `false`, v2 clients will now receive an HTTP 400 error (`Unsupported protocol version`) when connecting.\\r\\n\\r\\nThe [migration guide](/docs/v3/migrating-from-2-x-to-3-0/) was updated accordingly.\\r\\n\\r\\n### Features\\r\\n\\r\\n* confirm a weak but matching ETag ([#3485](https://github.com/socketio/socket.io/issues/3485)) ([161091d](https://github.com/socketio/socket.io/commit/161091dd4c9e1b1610ac3d45d964195e63d92b94))\\r\\n* **esm:** export the Namespace and Socket class ([#3699](https://github.com/socketio/socket.io/issues/3699)) ([233650c](https://github.com/socketio/socket.io/commit/233650c22209708b5fccc4349c38d2fa1b465d8f))\\r\\n* add support for Socket.IO v2 clients ([9925746](https://github.com/socketio/socket.io/commit/9925746c8ee3a6522bd640b5d586c83f04f2f1ba))\\r\\n* add room events ([155fa63](https://github.com/socketio/socket.io-adapter/commit/155fa6333a504036e99a33667dc0397f6aede25e))\\r\\n\\r\\n\\r\\n### Bug Fixes\\r\\n\\r\\n* **typings:** make Manager#opts public ([#1437](https://github.com/socketio/socket.io-client/issues/1437)) ([fe97243](https://github.com/socketio/socket.io-client/commit/fe97243fab02cd80fc1116e8f4aeca02951dac75))\\r\\n* allow integers as event names ([1c220dd](https://github.com/socketio/socket.io-parser/commit/1c220ddbf45ea4b44bc8dbf6f9ae245f672ba1b9))"},{"id":"/socket-io-2-4-0/","metadata":{"permalink":"/blog/socket-io-2-4-0/","editUrl":"https://github.com/socketio/nhonvo.github.io/edit/main/blog/2021-01-05-2.4.0.md","source":"@site/blog/2021-01-05-2.4.0.md","title":"Socket.IO 2.4.0","description":"Happy New Year everyone!","date":"2021-01-05T00:00:00.000Z","formattedDate":"January 5, 2021","tags":[],"readingTime":1.195,"hasTruncateMarker":true,"authors":[{"name":"Damien Arrachequesne","title":"Maintainer of Socket.IO","url":"https://github.com/darrachequesne","imageURL":"https://github.com/darrachequesne.png","key":"darrachequesne"}],"frontMatter":{"title":"Socket.IO 2.4.0","slug":"/socket-io-2-4-0/","authors":"darrachequesne"},"prevItem":{"title":"Socket.IO 3.1.0","permalink":"/blog/socket-io-3-1-0/"},"nextItem":{"title":"Monthly update #2","permalink":"/blog/monthly-update-2/"}},"content":"Happy New Year everyone!\\r\\n\\r\\nWe just published a new minor version in the 2.x branch!\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nPlease note that this release contains a breaking change regarding [Cross-Origin Resource Sharing](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) (CORS).\\r\\n\\r\\n**UPDATE**: this change was reverted in [2.4.1](https://github.com/socketio/socket.io/releases/tag/2.4.1), because it did not follow semantic versioning and broke some deployments (discussed [here](https://github.com/socketio/socket.io/discussions/3741)). Please make sure you are properly [securing your application](/docs/v2/handling-cors), and [upgrade](/docs/v3/migrating-from-2-x-to-3-0/) to Socket.IO v3 as soon as possible.\\r\\n\\r\\nPreviously, CORS was enabled by default, which meant that a Socket.IO server sent the necessary CORS headers (`Access-Control-Allow-xxx`) to **any** domain. This will not be the case anymore, and you now have to explicitly enable it.\\r\\n\\r\\nPlease note that you are not impacted if:\\r\\n\\r\\n- you are using Socket.IO v2 and the `origins` option to restrict the list of allowed domains\\r\\n- you are using Socket.IO v3 (disabled by default)\\r\\n\\r\\nThis change also removes the support for \'*\' matchers and protocol-less URL:\\r\\n\\r\\n```\\r\\nio.origins(\'https://example.com:443\'); => io.origins([\'https://example.com\']);\\r\\nio.origins(\'localhost:3000\');          => io.origins([\'http://localhost:3000\']);\\r\\nio.origins(\'http://localhost:*\');      => io.origins([\'http://localhost:3000\']);\\r\\nio.origins(\'*:3000\');                  => io.origins([\'http://localhost:3000\']);\\r\\n```\\r\\n\\r\\nTo restore the previous behavior (please use with caution):\\r\\n\\r\\n```js\\r\\nio.origins((_, callback) => {\\r\\n  callback(null, true);\\r\\n});\\r\\n```\\r\\n\\r\\nA big thanks to [@ni8walk3r](https://github.com/ni8walk3r) for the detailed security report.\\r\\n\\r\\nSee also:\\r\\n\\r\\n- https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\\r\\n- https://socket.io/docs/v2/handling-cors/\\r\\n\\r\\n### Features\\r\\n\\r\\n* add support for all cookie options ([19cc582](https://github.com/socketio/engine.io/commit/19cc58264a06dca47ed401fbaca32dcdb80a903b))\\r\\n* disable perMessageDeflate by default ([5ad2736](https://github.com/socketio/engine.io/commit/5ad273601eb66c7b318542f87026837bf9dddd21))\\r\\n\\r\\n### Bug Fixes\\r\\n\\r\\n* **security:** do not allow all origins by default ([f78a575](https://github.com/socketio/socket.io/commit/f78a575f66ab693c3ea96ea88429ddb1a44c86c7))\\r\\n* properly overwrite the query sent in the handshake ([d33a619](https://github.com/socketio/socket.io/commit/d33a619905a4905c153d4fec337c74da5b533a9e))\\r\\n\\r\\n\\r\\nStay safe!"},{"id":"/monthly-update-2/","metadata":{"permalink":"/blog/monthly-update-2/","editUrl":"https://github.com/socketio/nhonvo.github.io/edit/main/blog/2020-11-23-monthly-update.md","source":"@site/blog/2020-11-23-monthly-update.md","title":"Monthly update #2","description":"Hi everyone!","date":"2020-11-23T00:00:00.000Z","formattedDate":"November 23, 2020","tags":[],"readingTime":1.65,"hasTruncateMarker":true,"authors":[{"name":"Damien Arrachequesne","title":"Maintainer of Socket.IO","url":"https://github.com/darrachequesne","imageURL":"https://github.com/darrachequesne.png","key":"darrachequesne"}],"frontMatter":{"title":"Monthly update #2","slug":"/monthly-update-2/","authors":"darrachequesne"},"prevItem":{"title":"Socket.IO 2.4.0","permalink":"/blog/socket-io-2-4-0/"},"nextItem":{"title":"Redis Adapter v6.0.0","permalink":"/blog/socket-io-redis-adapter-6-release/"}},"content":"Hi everyone!\\r\\n\\r\\nHere\'s the #2 edition of our Monthly update. This is a new experiment, we will try to stick to this frequency in order to keep you updated of the work in progress and the directions the project is taking.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nSo, what\'s new in the Socket.IO ecosystem?\\r\\n\\r\\n## Socket.IO v3\\r\\n\\r\\nAs announced in the [previous](/blog/monthly-update-2/) monthly update, Socket.IO v3 has been released a few days ago.\\r\\n\\r\\nThis major version bump is mandated by several necessary changes in the Engine.IO protocol. You can find more information about these changes in the [Engine.IO v4 release notes](/blog/engine-io-4-release/).\\r\\n\\r\\nYou can find the release notes [here](/blog/socket-io-3-release/) and the migration guide [here](/docs/v3/migrating-from-2-x-to-3-0/).\\r\\n\\r\\nLet\'s discuss about this release here: https://github.com/socketio/socket.io/discussions/3674\\r\\n\\r\\n## Redis Adapter v6\\r\\n\\r\\nFollowing the [release of Socket.IO v3.0.0](/blog/socket-io-3-release/), the Redis Adapter was updated and a new release is out: [6.0.0](https://github.com/socketio/socket.io-redis/releases/tag/6.0.0)\\r\\n\\r\\nYou can find the release notes [here](/blog/socket-io-redis-adapter-6-release/).\\r\\n\\r\\n## Documentation\\r\\n\\r\\nThe documentation has always been a weak point of the project, leading to a lot of issues opened on GitHub and questions on StackOverflow.\\r\\n\\r\\nNow that v3 is out, we will focus on this. The following pages have already been created:\\r\\n\\r\\n- [Emitting events](/docs/v3/emitting-events/)\\r\\n- [Broadcasting events](/docs/v3/broadcasting-events/)\\r\\n- [The Socket instance / server-side](/docs/v3/server-socket-instance/)\\r\\n- [Middlewares](/docs/v3/middlewares/)\\r\\n- [Handling CORS](/docs/v3/handling-cors/)\\r\\n\\r\\nIf you find a typo, please open an issue here: https://github.com/socketio/socket.io-website\\r\\n\\r\\n## Minor bumps\\r\\n\\r\\n- [socket.io@3.0.3](https://github.com/socketio/socket.io/releases/tag/3.0.3) ([release notes](/blog/socket-io-3-release/))\\r\\n  - [engine.io-parser@4.0.1](https://github.com/socketio/engine.io-parser/releases/tag/4.0.1) (included in `socket.io{% raw %}@{% endraw %}3.0.3`)\\r\\n  - [engine.io@4.0.4](https://github.com/socketio/engine.io/releases/tag/4.0.4) (included in `socket.io{% raw %}@{% endraw %}3.0.3`)\\r\\n  - [socket.io-parser@4.0.1](https://github.com/socketio/socket.io-parser/releases/tag/4.0.1) (included in `socket.io{% raw %}@{% endraw %}3.0.3`)\\r\\n\\r\\n- [socket.io-client@3.0.3](https://github.com/socketio/socket.io-client/releases/tag/3.0.3)\\r\\n  - [engine.io-parser@4.0.1](https://github.com/socketio/engine.io-parser/releases/tag/4.0.1) (included in `socket.io-client{% raw %}@{% endraw %}3.0.3`)\\r\\n  - [engine.io-client@4.0.4](https://github.com/socketio/engine.io-client/releases/tag/4.0.4) (included in `socket.io-client{% raw %}@{% endraw %}3.0.3`)\\r\\n  - [socket.io-parser@4.0.1](https://github.com/socketio/socket.io-parser/releases/tag/4.0.1) (included in `socket.io-client{% raw %}@{% endraw %}3.0.3`)\\r\\n\\r\\n- [socket.io-redis@6.0.1](https://github.com/socketio/socket.io-redis/releases/tag/6.0.1)\\r\\n\\r\\n- [socket.io-msgpack-parser@3.0.1](https://github.com/socketio/socket.io-msgpack-parser/releases/tag/3.0.1)\\r\\n\\r\\nMore information about how to use those custom parsers can be found [here](https://github.com/socketio/socket.io/tree/master/examples/custom-parsers).\\r\\n\\r\\n## What\'s next\\r\\n\\r\\n- the client implementations in other languages will be updated as well\\r\\n\\r\\n- a big focus on the documentation (additional code examples, extended guide, ...)\\r\\n\\r\\n- additional tooling around Socket.IO\\r\\n\\r\\nStay safe!"},{"id":"/socket-io-redis-adapter-6-release/","metadata":{"permalink":"/blog/socket-io-redis-adapter-6-release/","editUrl":"https://github.com/socketio/nhonvo.github.io/edit/main/blog/2020-11-12-socket-io-redis-6.md","source":"@site/blog/2020-11-12-socket-io-redis-6.md","title":"Redis Adapter v6.0.0","description":"Following the release of Socket.IO v3.0.0, the Redis Adapter was updated and a new release is out: 6.0.0","date":"2020-11-12T00:00:00.000Z","formattedDate":"November 12, 2020","tags":[],"readingTime":1.14,"hasTruncateMarker":true,"authors":[{"name":"Damien Arrachequesne","title":"Maintainer of Socket.IO","url":"https://github.com/darrachequesne","imageURL":"https://github.com/darrachequesne.png","key":"darrachequesne"}],"frontMatter":{"title":"Redis Adapter v6.0.0","slug":"/socket-io-redis-adapter-6-release/","authors":"darrachequesne"},"prevItem":{"title":"Monthly update #2","permalink":"/blog/monthly-update-2/"},"nextItem":{"title":"Socket.IO 3 Release","permalink":"/blog/socket-io-3-release/"}},"content":"Following the [release of Socket.IO v3.0.0](/blog/socket-io-3-release/), the Redis Adapter was updated and a new release is out: [6.0.0](https://github.com/socketio/socket.io-redis/releases/tag/6.0.0)\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nFor reference, the Redis Adapter is used when broadcasting packets across a set of Socket.IO servers. It relies on Redis [Pub/Sub mechanism](https://redis.io/topics/pubsub).\\r\\n\\r\\nMore information about how it works: https://github.com/socketio/socket.io-redis/#how-does-it-work-under-the-hood\\r\\n\\r\\nThe release notes can be found here: https://github.com/socketio/socket.io-redis/releases/tag/6.0.0\\r\\n\\r\\nPlease note that the new release is not compatible with Socket.IO v2, and previous versions are not compatible with Socket.IO v3 ([compatibility table](https://github.com/socketio/socket.io-redis/#compatibility-table)).\\r\\n\\r\\n## Notable changes\\r\\n\\r\\n### All the requests (for inter-node communication) now return a Promise instead of accepting a callback\\r\\n\\r\\nThe Redis Adapter exposes additional methods for managing sockets and rooms in a multi-node setup:\\r\\n\\r\\n- `RedisAdapter.sockets()`: returns the list of Socket IDs\\r\\n- `RedisAdapter.allRooms()`: returns the list of all rooms.\\r\\n- `RedisAdapter.remoteJoin(id, room)`: make the socket join the room\\r\\n- `RedisAdapter.remoteLeave(id, room)`: make the socket leave the room\\r\\n- `RedisAdapter.remoteDisconnect(id, close)`: disconnect the socket with the given id\\r\\n\\r\\nThose methods used to accept a callback argument, they will now return a Promise.\\r\\n\\r\\nBefore:\\r\\n\\r\\n```js\\r\\nio.of(\'/\').adapter.allRooms((err, rooms) => {\\r\\n  console.log(rooms); // an array containing all rooms (across all nodes)\\r\\n});\\r\\n```\\r\\n\\r\\nAfter:\\r\\n\\r\\n```js\\r\\nconst rooms = await io.of(\'/\').adapter.allRooms();\\r\\nconsole.log(rooms); // a Set containing all rooms (across all nodes)\\r\\n```\\r\\n\\r\\n### customHook and customRequest methods were removed\\r\\n\\r\\nThose methods will be replaced by a more intuitive API in a future iteration."},{"id":"/socket-io-3-release/","metadata":{"permalink":"/blog/socket-io-3-release/","editUrl":"https://github.com/socketio/nhonvo.github.io/edit/main/blog/2020-11-05-socket-io-3.md","source":"@site/blog/2020-11-05-socket-io-3.md","title":"Socket.IO 3 Release","description":"We are happy to announce the release of Socket.IO v3!","date":"2020-11-05T00:00:00.000Z","formattedDate":"November 5, 2020","tags":[],"readingTime":2.085,"hasTruncateMarker":true,"authors":[{"name":"Damien Arrachequesne","title":"Maintainer of Socket.IO","url":"https://github.com/darrachequesne","imageURL":"https://github.com/darrachequesne.png","key":"darrachequesne"}],"frontMatter":{"title":"Socket.IO 3 Release","slug":"/socket-io-3-release/","authors":"darrachequesne"},"prevItem":{"title":"Redis Adapter v6.0.0","permalink":"/blog/socket-io-redis-adapter-6-release/"},"nextItem":{"title":"Monthly update #1","permalink":"/blog/monthly-update-1/"}},"content":"We are happy to announce the release of Socket.IO v3!\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n## Migration guide\\r\\n\\r\\nThis release contains a few non backward compatible changes.\\r\\n\\r\\nWe have published a dedicated [migration guide](/docs/v4/migrating-from-2-x-to-3-0/) with all necessary details.\\r\\n\\r\\n\\r\\n## Why Socket.IO in 2020?\\r\\n\\r\\nThat\'s an excellent question actually. Depending on your use case, it might make sense to use plain WebSocket directly:\\r\\n\\r\\n- client: [MDN](https://developer.mozilla.org/en-US/docs/Web/API/WebSocket), [Can I use?](https://caniuse.com/websockets)\\r\\n- server: [ws](https://github.com/websockets/ws) or [eiows](https://github.com/mmdevries/eiows) in the Node.JS ecosystem\\r\\n\\r\\nWhat Socket.IO brings:\\r\\n\\r\\n- a fallback to HTTP long-polling, in case the WebSocket connection cannot be established\\r\\n\\r\\nTo be honest, this feature was awesome 10 years ago, when most browsers didn\'t support WebSocket, but this is not the case anymore. That\'s still a great safety net though.\\r\\n\\r\\n- auto-reconnection\\r\\n\\r\\nUsing plain WebSocket, you can take a look at [robust-websocket](https://github.com/appuri/robust-websocket).\\r\\n\\r\\n- a classic request-response API: acknowledgements\\r\\n\\r\\n```js\\r\\n// on one side\\r\\nsocket.emit(\\"updateitem\\", \\"1\\", { name: \\"updated\\" }, (response) => {\\r\\n  console.log(response.status); // ok\\r\\n});\\r\\n// on the other\\r\\nsocket.on(\\"updateitem\\", (arg1, arg2, callback) => {\\r\\n  console.log(arg1); // 1\\r\\n  console.log(arg2); // { name: \\"updated\\" }\\r\\n  callback({\\r\\n    status: \\"ok\\"\\r\\n  });\\r\\n});\\r\\n```\\r\\n\\r\\n- a way to broadcast data to a given set of clients: [Rooms](/docs/v4/rooms/)\\r\\n\\r\\n```js\\r\\n// server-side\\r\\nio.on(\\"connection\\", (socket) => {\\r\\n  socket.join(\\"room1\\");\\r\\n\\r\\n  io.to(\\"room1\\").emit(\\"hello!\\");\\r\\n});\\r\\n```\\r\\n\\r\\nWhich also works when scaling to several Socket.IO servers (more information [here](/docs/v4/using-multiple-nodes/)).\\r\\n\\r\\n- a way to split your application logic into distinct modules (for more complex applications): [Namespaces](/docs/v4/namespaces/)\\r\\n\\r\\n```js\\r\\n// server-side\\r\\nconst adminNamespace = io.of(\\"/admin\\");\\r\\n\\r\\nadminNamespace.use((socket, next) => {\\r\\n  // ensure the socket is authorized\\r\\n});\\r\\n\\r\\nadminNamespace.on((socket) => {\\r\\n  socket.on(\\"delete project\\", (id) => {\\r\\n    // in all handlers, we are sure that the socket is authorized\\r\\n  });\\r\\n});\\r\\n\\r\\nadminNamespace.emit(\\"hello!\\"); // broadcast to admin only\\r\\n```\\r\\n\\r\\n- an ecosystem of compatible clients in other languages\\r\\n\\r\\n    - Java: https://github.com/socketio/socket.io-client-java\\r\\n    - C++: https://github.com/socketio/socket.io-client-cpp\\r\\n    - Swift: https://github.com/socketio/socket.io-client-swift\\r\\n    - Dart: https://github.com/rikulo/socket.io-client-dart\\r\\n    - Python: https://github.com/miguelgrinberg/python-socketio\\r\\n    - .Net: https://github.com/Quobject/SocketIoClientDotNet\\r\\n\\r\\n\\r\\n\\r\\n## What\'s next\\r\\n\\r\\n- the Redis adapter (used when broadcasting across Socket.IO servers) will be updated in order to be compatible with Socket.IO v3 (update: [done!](/blog/socket-io-redis-adapter-6-release/))\\r\\n\\r\\n- the client implementations in other languages will be updated as well\\r\\n  - Java client: [done!](https://github.com/socketio/socket.io-client-java/releases/tag/socket.io-client-2.0.0)\\r\\n  - C++ client: [done!](https://github.com/socketio/socket.io-client-cpp/releases/tag/3.0.0)\\r\\n  - Swift: [done!](https://github.com/socketio/socket.io-client-swift/releases/tag/v16.0.0)\\r\\n\\r\\n- a big focus on the documentation (additional code examples, extended guide, ...)\\r\\n\\r\\n- additional tooling around Socket.IO\\r\\n\\r\\n\\r\\n## Let\'s discuss!\\r\\n\\r\\nThe project is now part of the beta of Github Discussions. Depending on the feedback of the community, it might replace the Slack channel in the future.\\r\\n\\r\\nIf you have any question about the release, let\'s discuss [here](https://github.com/socketio/socket.io/discussions/3674).\\r\\n\\r\\n\\r\\n\\r\\nStay safe!"},{"id":"/monthly-update-1/","metadata":{"permalink":"/blog/monthly-update-1/","editUrl":"https://github.com/socketio/nhonvo.github.io/edit/main/blog/2020-10-03-monthly-update.md","source":"@site/blog/2020-10-03-monthly-update.md","title":"Monthly update #1","description":"Hi everyone!","date":"2020-10-03T00:00:00.000Z","formattedDate":"October 3, 2020","tags":[],"readingTime":2.12,"hasTruncateMarker":true,"authors":[{"name":"Damien Arrachequesne","title":"Maintainer of Socket.IO","url":"https://github.com/darrachequesne","imageURL":"https://github.com/darrachequesne.png","key":"darrachequesne"}],"frontMatter":{"title":"Monthly update #1","slug":"/monthly-update-1/","authors":"darrachequesne"},"prevItem":{"title":"Socket.IO 3 Release","permalink":"/blog/socket-io-3-release/"},"nextItem":{"title":"Socket.IO client 2.3.1","permalink":"/blog/socket-io-2-3-1/"}},"content":"Hi everyone!\\r\\n\\r\\nHere\'s the #1 edition of our Monthly update. This is a new experiment, we will try to stick to this frequency in order to keep you updated of the work that is in progress and the directions the project is taking.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nSo, what\'s new in the Socket.IO ecosystem?\\r\\n\\r\\n## Socket.IO v3 (WIP)\\r\\n\\r\\nThe work on Socket.IO v3 has started (let\'s be honest and not say resumed).\\r\\n\\r\\nThis major version bump is mandated by several necessary changes in the Engine.IO protocol. You can find more information about these changes in the [Engine.IO v4 release notes](/blog/engine-io-4-release/).\\r\\n\\r\\nIt mostly impacts the way packets are encoded when sent over the wire (in the request/response body in case of HTTP long-polling, or in the WebSocket frames), so the public API of Socket.IO should not be impacted that much.\\r\\n\\r\\nWe will also take advantage of this new version to migrate the codebase to Typescript, so the typings which are currently hosted in the [DefinitelyTyped](https://github.com/DefinitelyTyped/DefinitelyTyped) will now always be in sync with the actual code.\\r\\n\\r\\nYou can follow the progress [here](https://github.com/socketio/socket.io/projects/2).\\r\\n\\r\\nIf you have any feedback/feature that you would like to see included, please comment [here](https://github.com/socketio/socket.io/issues/3250).\\r\\n\\r\\n## Engine.IO v4\\r\\n\\r\\nAs part of the work towards Socket v3, Engine.IO v4 has been released.\\r\\n\\r\\nThe list of breaking changes can be found in the [release notes](/blog/engine-io-4-release/).\\r\\n\\r\\n## Protocol documentation\\r\\n\\r\\nThe documentation of the [Engine.IO](https://github.com/socketio/engine.io-protocol) and the [Socket.IO](https://github.com/socketio/socket.io-protocol) protocols has been edited with additional details/examples.\\r\\n\\r\\nThis should help greatly when implementing a client in another programming language.\\r\\n\\r\\nIf you find that something is not clear/is missing, please open an issue in the repository.\\r\\n\\r\\nFor reference, here\'s the current list of clients in other languages:\\r\\n\\r\\n- Java: https://github.com/socketio/socket.io-client-java\\r\\n- C++: https://github.com/socketio/socket.io-client-cpp\\r\\n- Swift: https://github.com/socketio/socket.io-client-swift\\r\\n- Dart: https://github.com/rikulo/socket.io-client-dart\\r\\n- Python: https://github.com/miguelgrinberg/python-socketio\\r\\n- .Net: https://github.com/Quobject/SocketIoClientDotNet\\r\\n\\r\\n\\r\\n## GitHub discussions\\r\\n\\r\\nThe project is now part of the beta of Github Discussions. Depending on the feedback of the community, it might replace the Slack channel in the future.\\r\\n\\r\\nSo, let\'s [discuss](https://github.com/socketio/socket.io/discussions)!\\r\\n\\r\\n## Minor bumps\\r\\n\\r\\n- [socket.io-client@2.3.1](https://github.com/socketio/socket.io-client/releases/tag/2.3.1) ([release notes](/blog/socket-io-2-3-1/))\\r\\n  - [engine.io-parser@2.2.1](https://github.com/socketio/engine.io-parser/releases/tag/2.2.1) (included in `socket.io-client{% raw %}@{% endraw %}2.3.1`)\\r\\n  - [engine.io-client@3.4.4](https://github.com/socketio/engine.io-client/releases/tag/3.4.4) (included in `socket.io-client{% raw %}@{% endraw %}2.3.1`)\\r\\n  - [socket.io-parser@3.3.1](https://github.com/socketio/socket.io-parser/releases/tag/3.3.1) (included in `socket.io-client{% raw %}@{% endraw %}2.3.1`)\\r\\n\\r\\n- [socket.io-json-parser@2.1.1](https://github.com/darrachequesne/socket.io-json-parser/releases/tag/2.1.1)\\r\\n- [socket.io-msgpack-parser@2.2.1](https://github.com/socketio/socket.io-msgpack-parser/releases/tag/2.2.1)\\r\\n\\r\\nMore information about how to use those custom parsers can be found [here](https://github.com/socketio/socket.io/tree/master/examples/custom-parsers).\\r\\n\\r\\n## Going forward\\r\\n\\r\\nAs announced at the bottom of the Engine.IO v4 [release notes](/blog/engine-io-4-release/#What\u2019s-next), I ([@darrachequesne](https://github.com/darrachequesne/)) am now dedicated full time to the project since the beginning of September. This wouldn\'t be possible without our [sponsors](https://opencollective.com/socketio/#section-contributors), so again, a big thanks to them!\\r\\n\\r\\n\\r\\nStay safe!"},{"id":"/socket-io-2-3-1/","metadata":{"permalink":"/blog/socket-io-2-3-1/","editUrl":"https://github.com/socketio/nhonvo.github.io/edit/main/blog/2020-10-02-2.3.1.md","source":"@site/blog/2020-10-02-2.3.1.md","title":"Socket.IO client 2.3.1","description":"Hi everyone!","date":"2020-10-02T00:00:00.000Z","formattedDate":"October 2, 2020","tags":[],"readingTime":0.57,"hasTruncateMarker":true,"authors":[{"name":"Damien Arrachequesne","title":"Maintainer of Socket.IO","url":"https://github.com/darrachequesne","imageURL":"https://github.com/darrachequesne.png","key":"darrachequesne"}],"frontMatter":{"title":"Socket.IO client 2.3.1","slug":"/socket-io-2-3-1/","authors":"darrachequesne"},"prevItem":{"title":"Monthly update #1","permalink":"/blog/monthly-update-1/"},"nextItem":{"title":"Engine.IO 4 Release","permalink":"/blog/engine-io-4-release/"}},"content":"Hi everyone!\\r\\n\\r\\nWe have published a minor version of the client: [2.3.1](https://github.com/socketio/socket.io-client/releases/tag/2.3.1)\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nThe `debug` dependency has been reverted to `~3.1.0`, as the newer versions contains ES6 syntax which breaks in IE browsers.\\r\\n\\r\\nPlease note that this only applied to users that bundle the Socket.IO client in their application, with webpack for example, as the \\"official\\" bundles (in the dist/ folder) were already transpiled with babel.\\r\\n\\r\\nFor webpack users, you can also take a look at the [webpack-remove-debug](https://github.com/johngodley/webpack-remove-debug) plugin.\\r\\n\\r\\n### Bug Fixes\\r\\n\\r\\n* fix reconnection after opening socket asynchronously ([#1253](https://github.com/socketio/socket.io-client/issues/1253)) ([050108b](https://github.com/Automattic/socket.io-client/commit/050108b2281effda086b197cf174ee2e8e1aad79))\\r\\n\\r\\n\\r\\nGet the latest client from the CDN:\\r\\n\\r\\n```html\\r\\n<script src=\\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.1/socket.io.slim.js\\"><\/script>\\r\\n```\\r\\n\\r\\nFor an explanation between the different bundles, please see [here](/docs/v2/client-installation/).\\r\\n\\r\\nStay safe!"},{"id":"/engine-io-4-release/","metadata":{"permalink":"/blog/engine-io-4-release/","editUrl":"https://github.com/socketio/nhonvo.github.io/edit/main/blog/2020-09-10-engine-io-4.md","source":"@site/blog/2020-09-10-engine-io-4.md","title":"Engine.IO 4 Release","description":"We are happy to announce the release of Engine.IO v4, the low-level engine that powers Socket.IO.","date":"2020-09-10T00:00:00.000Z","formattedDate":"September 10, 2020","tags":[],"readingTime":4.565,"hasTruncateMarker":true,"authors":[{"name":"Damien Arrachequesne","title":"Maintainer of Socket.IO","url":"https://github.com/darrachequesne","imageURL":"https://github.com/darrachequesne.png","key":"darrachequesne"}],"frontMatter":{"title":"Engine.IO 4 Release","slug":"/engine-io-4-release/","authors":"darrachequesne"},"prevItem":{"title":"Socket.IO client 2.3.1","permalink":"/blog/socket-io-2-3-1/"},"nextItem":{"title":"Socket.IO 2.0.1, 2.0.2 and 2.0.3","permalink":"/blog/socket-io-2-0-1-2-0-2-and-2-0-3/"}},"content":"We are happy to announce the release of Engine.IO v4, the low-level engine that powers Socket.IO.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n## Major breaking changes\\r\\n\\r\\n### Heartbeat mechanism reversal\\r\\n\\r\\nWe have received a lot of reports from users that experience random disconnects due to ping timeout, even though their Internet connection is up and the remote server is reachable. It should be noted that in that case the client reconnects right away, but still it was an annoying issue.\\r\\n\\r\\nAfter analysis, it seems to be caused by delayed timers on the client-side. Those timers are used in the ping-pong mechanism which helps to ensure the connection between the server and the client is still healthy. A delay on the client-side meant the client sent the ping packet too late, and the server considered that the connection was closed.\\r\\n\\r\\nThat\'s why the ping packets will now be sent by the server, and the client will respond with a pong packet.\\r\\n\\r\\n\\r\\n### Packet encoding\\r\\n\\r\\nWe have also changed the way the data is encoded. It previously relied on the string length in Javascript, which meant it was harder to implement clients in other programming languages that do not share the same encoding (more details [here](https://mathiasbynens.be/notes/javascript-encoding)).\\r\\n\\r\\nTechnically speaking, it impacts the way an array of packets is encoded when using XHR polling (WebSocket is not affected, as each packet is sent in its own WebSocket frame).\\r\\n\\r\\n```js\\r\\nsocket.send(\\"\u20ac\u20ac\\");\\r\\nsocket.send(\\"\u0439\\");\\r\\n\\r\\n// v3 encoding output\\r\\n\\"3:4\u20ac\u20ac2:4\u0439\\"\\r\\n\\r\\n// 3\\t\\t\\"4\u20ac\u20ac\\".length (the JS specific part, 6 bytes)\\r\\n// :\\t\\tseparator\\r\\n// 4\\t\\tthe \\"message\\" packet type\\r\\n// \u20ac\u20ac\\t\\tthe content of the first packet\\r\\n// 2\\t\\t\\"4\u0439\\".length (again, the JS specific part)\\r\\n// :\\t\\tseparator\\r\\n// 4\\t\\tthe \\"message\\" packet type\\r\\n// \u0439\\t\\tthe content of the second packet\\r\\n\\r\\n// v4 encoding output\\r\\n\\"4\u20ac\u20ac\\\\x1e4\u0439\\"\\r\\n\\r\\n// 4\\t\\tthe \\"message\\" packet type\\r\\n// \u20ac\u20ac\\t\\tthe content of the first packet\\r\\n// \\\\x1e\\t\\tseparator\\r\\n// 4\\t\\tthe \\"message\\" packet type\\r\\n// \u0439\\t\\tthe content of the second packet\\r\\n```\\r\\n\\r\\nYou can find more details about the updates to the protocol [here](https://github.com/socketio/engine.io-protocol#difference-between-v3-and-v4).\\r\\n\\r\\n## Other changes\\r\\n\\r\\n### CORS handling\\r\\n\\r\\nWe now use the [cors](https://www.npmjs.com/package/cors) package to handle the [CORS](https://en.wikipedia.org/wiki/Cross-origin_resource_sharing) configuration. The `handlePreflightRequest` option was removed:\\r\\n\\r\\n```js\\r\\nconst { Server } = require(\'engine.io\');\\r\\n\\r\\n// before\\r\\nnew Server({\\r\\n  handlePreflightRequest: (req, res) => {\\r\\n    res.writeHead(200, {\\r\\n      \\"Access-Control-Allow-Origin\\": \'https://example.com\',\\r\\n      \\"Access-Control-Allow-Methods\\": \'GET\',\\r\\n      \\"Access-Control-Allow-Headers\\": \'Authorization\',\\r\\n      \\"Access-Control-Allow-Credentials\\": true\\r\\n    });\\r\\n    res.end();\\r\\n  }\\r\\n});\\r\\n\\r\\n// after\\r\\nnew Server({\\r\\n  cors: {\\r\\n    origin: \\"https://example.com\\",\\r\\n    methods: [\\"GET\\"],\\r\\n    allowedHeaders: [\\"Authorization\\"],\\r\\n    credentials: true\\r\\n  }\\r\\n});\\r\\n```\\r\\n\\r\\nPlease see [here](https://github.com/expressjs/cors#configuration-options) for all available options.\\r\\n\\r\\n\\r\\n### No cookie by default\\r\\n\\r\\nIn Engine.IO v3, the `io` cookie was sent by default. This cookie can be used to enable sticky-session, which is required when you have several servers (more information [here](/docs/v4/using-multiple-nodes/)).\\r\\n\\r\\nHowever, this cookie is not needed in some cases (i.e. single server deployment, sticky-session based on IP) so it must now be explicitly enabled:\\r\\n\\r\\n```js\\r\\nconst { Server } = require(\'engine.io\');\\r\\n\\r\\n// before\\r\\nnew Server({\\r\\n  cookieName: \\"io\\",\\r\\n  cookieHttpOnly: false,\\r\\n  cookiePath: \\"/custom\\"\\r\\n});\\r\\n\\r\\n// after\\r\\nnew Server({\\r\\n  cookie: {\\r\\n    name: \\"test\\",\\r\\n    httpOnly: false,\\r\\n    path: \\"/custom\\"\\r\\n  }\\r\\n});\\r\\n```\\r\\n\\r\\nAll other options (domain, maxAge, sameSite, ...) are now supported. Please see [here](https://github.com/jshttp/cookie/) for the complete list of options.\\r\\n\\r\\n\\r\\n### The default value of maxHttpBufferSize was decreased\\r\\n\\r\\nThis option defines how many bytes or characters a message can be, before closing the connection. It was reduced from `100MB` to `1MB`.\\r\\n\\r\\n```js\\r\\nconst { Server } = require(\'engine.io\');\\r\\n\\r\\nnew Server({\\r\\n  maxHttpBufferSize: 1e8 // defaults to 1e6\\r\\n});\\r\\n```\\r\\n\\r\\n\\r\\n### perMessageDeflate is now disabled by default\\r\\n\\r\\nThis option defines whether the WebSocket [permessage-deflate extension](https://tools.ietf.org/html/draft-ietf-hybi-permessage-compression-19) is enabled or not. This feature, while useful in some cases, adds some extra memory overhead for each WebSocket connection, and could result in huge memory usage in production deployments. It is now disabled by default.\\r\\n\\r\\n```js\\r\\nconst { Server } = require(\'engine.io\');\\r\\n\\r\\nnew Server({\\r\\n  perMessageDeflate: true // defaults to false\\r\\n});\\r\\n```\\r\\n\\r\\n\\r\\n### Support for Node.js 8 was dropped\\r\\n\\r\\nWe are dropping support for Node.js 8, which is now [End-of-Life](https://github.com/nodejs/Release). It will not be tested in the CI anymore, so please upgrade as soon as possible!\\r\\n\\r\\n\\r\\n\\r\\n## How to upgrade\\r\\n\\r\\nAs detailed in the [Major breaking changes](#Major-breaking-changes) section, this release contains several backward incompatible changes, and as such v3 clients will not be able to connect to a v4 server (and vice versa).\\r\\n\\r\\nIn order to upgrade a live production environment, you will need to have both a group of v3 servers and v4 servers in parallel, and route the traffic based on either:\\r\\n\\r\\n- the `EIO` query parameter\\r\\n- the path (by using a different `path` for the v4 servers)\\r\\n- or the domain if you use a different domain for the v4 servers\\r\\n\\r\\nSo that it shall be a seamless migration for your end users.\\r\\n\\r\\n\\r\\n## What\'s next\\r\\n\\r\\nThis release will be included in Socket.IO v3 in the near future. We will publish a more detailed roadmap in the next blog post.\\r\\n\\r\\n\\r\\nBesides, I ([@darrachequesne](https://github.com/darrachequesne/)) am glad to announce that I will be dedicated full time to the project for the next months. This is possible thanks to our awesome [sponsors](https://opencollective.com/socketio/#section-contributors).\\r\\n\\r\\nAgain, a big shout out to [Pia Mancini](https://twitter.com/piamancini) and all the team behind the [Open Collective](https://opencollective.com/) platform, which helps making Open Source Software sustainable in the long term.\\r\\n\\r\\n\\r\\n## Let\'s discuss!\\r\\n\\r\\nThe project is now part of the beta of Github Discussions. Depending on the feedback of the community, it might replace the Slack channel in the future.\\r\\n\\r\\nIf you have any question about the release, let\'s discuss about it [here](https://github.com/socketio/socket.io/discussions/3644).\\r\\n\\r\\n\\r\\n\\r\\nStay safe!"},{"id":"/socket-io-2-0-1-2-0-2-and-2-0-3/","metadata":{"permalink":"/blog/socket-io-2-0-1-2-0-2-and-2-0-3/","editUrl":"https://github.com/socketio/nhonvo.github.io/edit/main/blog/2017-06-24-2.0.x.md","source":"@site/blog/2017-06-24-2.0.x.md","title":"Socket.IO 2.0.1, 2.0.2 and 2.0.3","description":"We published three minor releases right after 2.0.0, so please be sure to use the latest version!","date":"2017-06-24T00:00:00.000Z","formattedDate":"June 24, 2017","tags":[],"readingTime":0.34,"hasTruncateMarker":true,"authors":[{"name":"Damien Arrachequesne","title":"Maintainer of Socket.IO","url":"https://github.com/darrachequesne","imageURL":"https://github.com/darrachequesne.png","key":"darrachequesne"}],"frontMatter":{"title":"Socket.IO 2.0.1, 2.0.2 and 2.0.3","slug":"/socket-io-2-0-1-2-0-2-and-2-0-3/","authors":"darrachequesne"},"prevItem":{"title":"Engine.IO 4 Release","permalink":"/blog/engine-io-4-release/"},"nextItem":{"title":"Socket.IO is on Open Collective","permalink":"/blog/socket-io-is-on-open-collective/"}},"content":"We published three minor releases right after `2.0.0`, so please be sure to use the latest version!\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nIncluding:\\r\\n\\r\\n- A fix for a race condition within middleware: [Issue #2935](https://github.com/socketio/socket.io/issues/2935)\\r\\n\\r\\n- A fix for a potential race condition when emitting to a room: [Issue #2962](https://github.com/socketio/socket.io/issues/2962)\\r\\n\\r\\n- A fix for the *query* option in the client: [Issue #1086](https://github.com/socketio/socket.io-client/issues/1086)\\r\\n\\r\\nGet the latest client from the CDN:\\r\\n\\r\\n```html\\r\\n<script src=\\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js\\"><\/script>\\r\\n```"},{"id":"/socket-io-is-on-open-collective/","metadata":{"permalink":"/blog/socket-io-is-on-open-collective/","editUrl":"https://github.com/socketio/nhonvo.github.io/edit/main/blog/2017-05-15-open-collective.md","source":"@site/blog/2017-05-15-open-collective.md","title":"Socket.IO is on Open Collective","description":"Open Collective provides a transparent, sustainable, and secure way for people to support and sponsor open source projects. We are joining other great projects (you may have heard about MochaJS, GulpJS or webpack, among lots of other awesome projects) in the quest to ensure the project\'s sustainability.","date":"2017-05-15T00:00:00.000Z","formattedDate":"May 15, 2017","tags":[],"readingTime":1.435,"hasTruncateMarker":true,"authors":[{"name":"Damien Arrachequesne","title":"Maintainer of Socket.IO","url":"https://github.com/darrachequesne","imageURL":"https://github.com/darrachequesne.png","key":"darrachequesne"}],"frontMatter":{"title":"Socket.IO is on Open Collective","slug":"/socket-io-is-on-open-collective/","authors":"darrachequesne"},"prevItem":{"title":"Socket.IO 2.0.1, 2.0.2 and 2.0.3","permalink":"/blog/socket-io-2-0-1-2-0-2-and-2-0-3/"},"nextItem":{"title":"Socket.IO 2.0.0","permalink":"/blog/socket-io-2-0-0/"}},"content":"<img src=\\"/images/opencollective.png\\"/>\\r\\n\\r\\nOpen Collective provides a transparent, sustainable, and secure way for people to support and sponsor <a href=\\"https://opencollective.com/opensource\\">open source projects</a>. We are joining other great projects (you may have heard about <a href=\\"https://opencollective.com/mochajs\\">MochaJS</a>, <a href=\\"https://opencollective.com/gulpjs\\">GulpJS</a> or <a href=\\"https://opencollective.com/webpack\\">webpack</a>, among <a href=\\"https://opencollective.com/discover\\">lots</a> of other awesome projects) in the quest to ensure the project\'s sustainability.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n## What is an Open Collective?\\r\\n\\r\\nFrom their website:\\r\\n\\r\\n*An Open Collective is a group of people with a shared mission that operates in full transparency.*\\r\\n\\r\\nThat allows both individuals and companies to sponsor our mission at Socket.IO (with potential tax benefits).\\r\\n\\r\\n## What would Socket.IO do with my sponsorship?\\r\\n\\r\\nThat will enable the core contributors to spend more time assuring the maintenance of the project. That includes:\\r\\n\\r\\n- triaging issues and pull requests\\r\\n\\r\\n- answering questions on <a href=\\"https://slackin-socketio.now.sh/\\">Slack</a> and <a href=\\"http://stackoverflow.com/questions/tagged/socket.io\\">Stackoverflow</a> (which have been somewhat neglected recently)\\r\\n\\r\\n- updating the documentation (I think a lot has been done recently, but there is still room for improvement!)\\r\\n\\r\\nPersonally I would like to be able to devote a few days a month to the project (I mean a whole day of work, not a few hours taken here and there, usually late in the evening).\\r\\n\\r\\nThe goals in the near future:\\r\\n\\r\\n- keep the 2.0 version as stable as possible\\r\\n- provide a complete documentation\\r\\n- add more examples, besides the classic chat\\r\\n\\r\\n## How can I help?\\r\\n\\r\\nTo become a sponsor or backer, visit our <a href=\\"https://opencollective.com/socketio\\">open collective page</a> and follow the instructions for becoming a part of our collective. Please also take the time to explore the other awesome collectives that people are supporting.\\r\\n\\r\\nAnd finally, a big thanks to <a href=\\"https://twitter.com/piamancini\\">Pia Mancini</a> and her partners for making this possible."},{"id":"/socket-io-2-0-0/","metadata":{"permalink":"/blog/socket-io-2-0-0/","editUrl":"https://github.com/socketio/nhonvo.github.io/edit/main/blog/2017-05-13-2-0-0.md","source":"@site/blog/2017-05-13-2-0-0.md","title":"Socket.IO 2.0.0","description":"Socket.IO 2.0.0 is finally here!","date":"2017-05-13T00:00:00.000Z","formattedDate":"May 13, 2017","tags":[],"readingTime":0.74,"hasTruncateMarker":true,"authors":[{"name":"Damien Arrachequesne","title":"Maintainer of Socket.IO","url":"https://github.com/darrachequesne","imageURL":"https://github.com/darrachequesne.png","key":"darrachequesne"}],"frontMatter":{"title":"Socket.IO 2.0.0","slug":"/socket-io-2-0-0/","authors":"darrachequesne"},"prevItem":{"title":"Socket.IO is on Open Collective","permalink":"/blog/socket-io-is-on-open-collective/"},"nextItem":{"title":"Socket.IO 1.4.5","permalink":"/blog/socket-io-1-4-5/"}},"content":"Socket.IO 2.0.0 is finally here!\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nThis major release brings several performance improvements:\\r\\n\\r\\n- [uws](https://github.com/uWebSockets/uWebSockets) is now the default Websocket engine. It should bring significant improvement in performance (particularly in terms of memory consumption) ([release note of Engine.IO](https://github.com/socketio/engine.io/releases/tag/2.0.0))\\r\\n\\r\\n- the Engine.IO and Socket.IO handshake packets were merged, reducing the number of roundtrips necessary to establish a connection. ([#2833](https://github.com/socketio/socket.io/pull/2833))\\r\\n\\r\\n- it is now possible to provide a custom parser according to the needs of your application ([#2829](https://github.com/socketio/socket.io/pull/2829)). Please take a look at the [example](https://github.com/socketio/socket.io/tree/master/examples/custom-parsers) for more information.\\r\\n\\r\\nPlease note that this release is not backward-compatible, due to:\\r\\n\\r\\n- a breaking change related to utf-8 encoding in [engine.io-parser](https://github.com/socketio/engine.io-parser/pull/81)\\r\\n\\r\\n- an update to make the socket id on the client match the id on the server-side ([#1058](https://github.com/socketio/socket.io-client/pull/1058))\\r\\n\\r\\nRelated packages were updated accordingly:\\r\\n\\r\\n- socket.io-redis version [5.x](https://github.com/socketio/socket.io-redis/releases/tag/5.0.0)\\r\\n\\r\\n- socket.io-emitter version [3.x](https://github.com/socketio/socket.io-emitter/releases/tag/3.0.0)\\r\\n\\r\\nGet the latest client from the CDN:\\r\\n\\r\\n```html\\r\\n<script src=\\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.1/socket.io.js\\"><\/script>\\r\\n```"},{"id":"/socket-io-1-4-5/","metadata":{"permalink":"/blog/socket-io-1-4-5/","editUrl":"https://github.com/socketio/nhonvo.github.io/edit/main/blog/2016-01-27-1.4.5.md","source":"@site/blog/2016-01-27-1.4.5.md","title":"Socket.IO 1.4.5","description":"We just published some quick fixes!","date":"2016-01-27T00:00:00.000Z","formattedDate":"January 27, 2016","tags":[],"readingTime":0.185,"hasTruncateMarker":true,"authors":[{"name":"Guillermo Rauch","title":"Maintainer of Socket.IO","url":"https://twitter.com/rauchg","imageURL":"https://github.com/rauchg.png","key":"rauchg"}],"frontMatter":{"title":"Socket.IO 1.4.5","slug":"/socket-io-1-4-5/","authors":"rauchg"},"prevItem":{"title":"Socket.IO 2.0.0","permalink":"/blog/socket-io-2-0-0/"},"nextItem":{"title":"Socket.IO 1.4.4","permalink":"/blog/socket-io-1-4-4/"}},"content":"We just published some quick fixes!\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n- Fixed `socket.io-client` usage with [NativeScript](https://www.nativescript.org/).\\r\\n- Fixed graceful close of the attached http `Server` of `socket.io` and `engine.io`.\\r\\n\\r\\nGet the latest client from the CDN:\\r\\n\\r\\n```html\\r\\n<script src=\\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/1.4.5/socket.io.min.js\\"><\/script>\\r\\n```"},{"id":"/socket-io-1-4-4/","metadata":{"permalink":"/blog/socket-io-1-4-4/","editUrl":"https://github.com/socketio/nhonvo.github.io/edit/main/blog/2016-01-11-1.4.4.md","source":"@site/blog/2016-01-11-1.4.4.md","title":"Socket.IO 1.4.4","description":"We just published two fixes for socket.io-client:","date":"2016-01-11T00:00:00.000Z","formattedDate":"January 11, 2016","tags":[],"readingTime":0.295,"hasTruncateMarker":true,"authors":[{"name":"Guillermo Rauch","title":"Maintainer of Socket.IO","url":"https://twitter.com/rauchg","imageURL":"https://github.com/rauchg.png","key":"rauchg"}],"frontMatter":{"title":"Socket.IO 1.4.4","slug":"/socket-io-1-4-4/","authors":"rauchg"},"prevItem":{"title":"Socket.IO 1.4.5","permalink":"/blog/socket-io-1-4-5/"},"nextItem":{"title":"Socket.IO 1.4.1, 1.4.2 and 1.4.3","permalink":"/blog/socket-io-1-4-1-1-4-2-and-1-4-3/"}},"content":"We just published two fixes for `socket.io-client`:\\r\\n\\r\\n- Building with `browserify` or `webpack` is now completely straightforward. No need to `exclude/ignore` or `noParse/externals` the `ws` module.\\r\\n\\r\\n- Improved the JSONP transport when `socket.io-client` or `engine.io-client` are lazily evaluated or the `<script>` tag that included them gets removed.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nGet the latest client from the CDN:\\r\\n\\r\\n```html\\r\\n<script src=\\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/1.4.4/socket.io.min.js\\"><\/script>\\r\\n```"},{"id":"/socket-io-1-4-1-1-4-2-and-1-4-3/","metadata":{"permalink":"/blog/socket-io-1-4-1-1-4-2-and-1-4-3/","editUrl":"https://github.com/socketio/nhonvo.github.io/edit/main/blog/2016-01-08-1.4.x.md","source":"@site/blog/2016-01-08-1.4.x.md","title":"Socket.IO 1.4.1, 1.4.2 and 1.4.3","description":"We published three minor releases right after 1.4.0 addressing build issues in different environments.","date":"2016-01-08T00:00:00.000Z","formattedDate":"January 8, 2016","tags":[],"readingTime":0.24,"hasTruncateMarker":true,"authors":[{"name":"Guillermo Rauch","title":"Maintainer of Socket.IO","url":"https://twitter.com/rauchg","imageURL":"https://github.com/rauchg.png","key":"rauchg"}],"frontMatter":{"title":"Socket.IO 1.4.1, 1.4.2 and 1.4.3","slug":"/socket-io-1-4-1-1-4-2-and-1-4-3/","authors":"rauchg"},"prevItem":{"title":"Socket.IO 1.4.4","permalink":"/blog/socket-io-1-4-4/"},"nextItem":{"title":"Socket.IO 1.4.0","permalink":"/blog/socket-io-1-4-0/"}},"content":"We published three minor releases right after `1.4.0` addressing build issues in different environments.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n- Socket.IO-client now includes the latest version of <a href=\\"https://github.com/socketio/engine.io-client\\">engine.io-client</a>\\r\\n\\r\\n- Fixed an issue that was preventing bundling with <a href=\\"https://webpack.github.io/\\">webpack</a>.\\r\\n\\r\\n- Socket.IO now adds support for <a href=\\"https://www.nativescript.org/\\">NativeScript</a>!\\r\\n\\r\\n```html\\r\\n<script src=\\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/1.4.3/socket.io.min.js\\"><\/script>\\r\\n```"},{"id":"/socket-io-1-4-0/","metadata":{"permalink":"/blog/socket-io-1-4-0/","editUrl":"https://github.com/socketio/nhonvo.github.io/edit/main/blog/2016-01-06-1.4.0.md","source":"@site/blog/2016-01-06-1.4.0.md","title":"Socket.IO 1.4.0","description":"Socket.IO 1.4.0 ship with new features like automatic compression for XHR and WebSockets, lots of bug fixes and significant performance and memory improvements.","date":"2016-01-06T00:00:00.000Z","formattedDate":"January 6, 2016","tags":[],"readingTime":2.975,"hasTruncateMarker":true,"authors":[{"name":"Guillermo Rauch","title":"Maintainer of Socket.IO","url":"https://twitter.com/rauchg","imageURL":"https://github.com/rauchg.png","key":"rauchg"}],"frontMatter":{"title":"Socket.IO 1.4.0","slug":"/socket-io-1-4-0/","authors":"rauchg"},"prevItem":{"title":"Socket.IO 1.4.1, 1.4.2 and 1.4.3","permalink":"/blog/socket-io-1-4-1-1-4-2-and-1-4-3/"},"nextItem":{"title":"Socket.IO 1.3.7","permalink":"/blog/socket-io-1-3-7/"}},"content":"Socket.IO 1.4.0 ship with new features like **automatic compression** for XHR and WebSockets, lots of bug fixes and significant performance and memory improvements.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nCompression is enabled by default, as it\u2019s highly beneficial for most application payloads. The following example shows the savings for a realtime stream of tweets.\\r\\n\\r\\n<div id=\\"tweets-compression-demo\\"></div>\\r\\n\\r\\nThe compression gains will vary by transport. For example, WebSocket defaults to a window size of 32kb when **DEFLATE** compression is enabled. Repeated occurrences of strings within that window will be compressed.\\r\\nThe following demo (inspired by Julia Evans <a href=\\"http://jvns.ca/blog/2013/10/24/day-16-gzip-plus-poetry-equals-awesome/\\">work</a>) will highlight what the LZ77 algorithm de-duplicates from the traffic sent by the Twitter stream that matches <em>javascript</em>.\\r\\n\\r\\n<div id=\\"lz77-compression-demo\\"></div>\\r\\n\\r\\n<p style={{ fontSize: \'10px\', color: \'#999\' }}>How this demo works: we re-implemented a part of <a style={{ color: \'#888\' }} href=\\"https://github.com/socketio/lz77-compression-demo/blob/master/public/lz77-analyzer.js\\">LZ77 in JavaScript</a>. A <a style={{ color: \'#888\' }} href=\\"https://github.com/socketio/lz77-compression-demo/blob/master/public/component.js#L67\\">React component</a> then renders the compressed strings.</p>\\r\\n\\r\\nThe longer the string, the darker the shade of yellow displayed.\\r\\n\\r\\nIn addition to this default behavior, we\u2019ve introduced the capability to perform selective per-message compression, by introducing the `compress` flag when emitting an event.\\r\\n\\r\\n```js\\r\\nsocket.compress(true).emit(\u2018hi\u2019, { some: \u2018data\u2019 });\\r\\n```\\r\\n\\r\\nTo configure the defaults, we\u2019ve introduced the following two options that you can pass to socket.io (and engine.io) when starting the server:\\r\\n\\r\\n- `perMessageDeflate` \u2013 options to customize WebSocket compression (<a href=\\"https://github.com/websockets/ws/blob/master/doc/ws.md#optionspermessagedeflate\\" target=\\"_blank\\">see here</a>) or `true` for defaults (`true`).\\r\\n\\r\\n- `httpCompression` \u2013 options to customize compression for HTTP polling transports or `true` for defaults (`true`)\\r\\n\\r\\nThe memory overhead when compression is enabled is not inexistent, however. Make sure to account for a 300kb~ overhead per connection in terms of memory allocation. <a href=\\"https://www.igvita.com/2013/11/27/configuring-and-optimizing-websocket-compression/\\">Read here</a> about the parameters you can customize to change how much memory is allocated and how aggressively data is compressed.\\r\\n\\r\\n\\r\\nThe following improvements have been made to the **<a href=\\"https://github.com/socketio/socket.io\\">server</a>**:\\r\\n\\r\\n- Assume 443 port when passing `https://` to the `origins` parameter \u2013 Evan Lucas\\r\\n- Improve detection of binary data inside events (in the `has-binary` module) \u2013 Gunther Brunner\\r\\n- Warn about missing `error` event handlers on sockets to prevent silent hard-to-debug situations\\r\\n- Allow a custom function for the `allowRequest` function for origins verification\\r\\n- Fixes for \u201cuse strict\u201d environments \u2013 Naoyuki Kanezawa\\r\\n- Prevent users calling the ack function multiple times \u2013 Kevin Jose Martin\\r\\n- Fixed potential memory leaks with open sockets when upgrade fails \u2013 Naoyuki Kanezawa\\r\\n- Fix lingering requests when a polling error occurs \u2013 Naoyuki Kanezawa\\r\\n- Drastically more memory efficient when keeping track of clients \u2013 Damien Arrachequesne\\r\\n- Drastically more memory efficient when keeping track of rooms \u2013 J\xe9r\xe9my Lal\\r\\n- Trigger callback if the client is already in the given room when `join` is called \u2013 Damien Arrachequesne\\r\\n- Minor parser fixes and performance improvements.\\r\\n\\r\\nThe following improvements have been made to the **<a href=\\"https://github.com/socketio/socket.io-client\\">client</a>**:\\r\\n\\r\\n- Fix for specifying custom ports when connecting\\r\\n- 2 or more connections to the same namespace now create new sockets, instead of reusing a single one.\\r\\n- Added new reserved `ping` and `pong` events when a heartbeat is emitted and received.\\r\\n- Add support for environments that extend Object.prototype \u2013 Damien Arrachequesne\\r\\n- Fixes for \u201cuse strict\u201d environments \u2013 Naoyuki Kanezawa\\r\\n- Added an `extraHeaders` feature for custom headers in HTTP transports (non-WebSocket)\\r\\n- Fix handling of disconnection while in the `opening` state.\\r\\n- Improved error handling for unmatched acknowledgements.\\r\\n- Parser fixes and improvements.\\r\\n\\r\\nWe\'ve also released **<a href=\\"https://github.com/socketio/socket.io-redis\\">socket.io-redis</a>** `0.2.0` with significant performance improvements.\\r\\n\\r\\nSpecial thanks to <em>Damien Arrachequesne</em>, <em>Naoyuki Kanezawa</em> and <em>J\xe9r\xe9my Lal</em> for their amazing and continued contributions that made this release possible."},{"id":"/socket-io-1-3-7/","metadata":{"permalink":"/blog/socket-io-1-3-7/","editUrl":"https://github.com/socketio/nhonvo.github.io/edit/main/blog/2015-09-21-1.3.7.md","source":"@site/blog/2015-09-21-1.3.7.md","title":"Socket.IO 1.3.7","description":"Socket.IO 1.3.7 includes support for io.js and Node.JS 4.0.0.","date":"2015-09-21T00:00:00.000Z","formattedDate":"September 21, 2015","tags":[],"readingTime":0.065,"hasTruncateMarker":false,"authors":[{"name":"Guillermo Rauch","title":"Maintainer of Socket.IO","url":"https://twitter.com/rauchg","imageURL":"https://github.com/rauchg.png","key":"rauchg"}],"frontMatter":{"title":"Socket.IO 1.3.7","slug":"/socket-io-1-3-7/","authors":"rauchg"},"prevItem":{"title":"Socket.IO 1.4.0","permalink":"/blog/socket-io-1-4-0/"},"nextItem":{"title":"Socket.IO 1.3.6","permalink":"/blog/socket-io-1-3-6/"}},"content":"Socket.IO **1.3.7** includes support for io.js and Node.JS 4.0.0.\\r\\n\\r\\n```html\\r\\n<script src=\\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/1.3.7/socket.io.min.js\\"><\/script>\\r\\n```"},{"id":"/socket-io-1-3-6/","metadata":{"permalink":"/blog/socket-io-1-3-6/","editUrl":"https://github.com/socketio/nhonvo.github.io/edit/main/blog/2015-07-15-1.3.6.md","source":"@site/blog/2015-07-15-1.3.6.md","title":"Socket.IO 1.3.6","description":"Socket.IO 1.3.6 addresses a build issue with the ws module on Windows.","date":"2015-07-15T00:00:00.000Z","formattedDate":"July 15, 2015","tags":[],"readingTime":0.08,"hasTruncateMarker":false,"authors":[{"name":"Guillermo Rauch","title":"Maintainer of Socket.IO","url":"https://twitter.com/rauchg","imageURL":"https://github.com/rauchg.png","key":"rauchg"}],"frontMatter":{"title":"Socket.IO 1.3.6","slug":"/socket-io-1-3-6/","authors":"rauchg"},"prevItem":{"title":"Socket.IO 1.3.7","permalink":"/blog/socket-io-1-3-7/"},"nextItem":{"title":"Socket.IO P2P","permalink":"/blog/socket-io-p2p/"}},"content":"Socket.IO **1.3.6** addresses a build issue with the `ws` module on Windows.\\r\\n\\r\\n```html\\r\\n<script src=\\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/1.3.6/socket.io.min.js\\"><\/script>\\r\\n```"},{"id":"/socket-io-p2p/","metadata":{"permalink":"/blog/socket-io-p2p/","editUrl":"https://github.com/socketio/nhonvo.github.io/edit/main/blog/2015-07-14-p2p.md","source":"@site/blog/2015-07-14-p2p.md","title":"Socket.IO P2P","description":"Today were very happy to introduce Socket.IO P2P, the easiest way to establish a bidirectional events channel between two peers with a server fallback to provide maximum reliability.","date":"2015-07-14T00:00:00.000Z","formattedDate":"July 14, 2015","tags":[],"readingTime":3.04,"hasTruncateMarker":true,"authors":[{"name":"Tom Cartwright","title":"Maintainer of the Socket.IO P2P project","url":"https://twitter.com/tomcartwrightuk","image_url":"https://github.com/tomcartwrightuk.png","imageURL":"https://github.com/tomcartwrightuk.png"}],"frontMatter":{"title":"Socket.IO P2P","slug":"/socket-io-p2p/","authors":[{"name":"Tom Cartwright","title":"Maintainer of the Socket.IO P2P project","url":"https://twitter.com/tomcartwrightuk","image_url":"https://github.com/tomcartwrightuk.png","imageURL":"https://github.com/tomcartwrightuk.png"}]},"prevItem":{"title":"Socket.IO 1.3.6","permalink":"/blog/socket-io-1-3-6/"},"nextItem":{"title":"Socket.IO C++","permalink":"/blog/socket-io-cpp/"}},"content":"Today were very happy to introduce Socket.IO P2P, the easiest way to establish **a bidirectional events channel between two peers** with a server fallback to provide maximum reliability.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nLets look at the API and build a little chat application. Or check out <a href=\\"https://github.com/socketio/socket.io-p2p\\">the repository</a> directly!\\r\\n\\r\\n<p style={{ textAlign: \'center\', padding: \'20px 0\' }}>\\r\\n  <img src=\\"https://cldup.com/95U80xyuHq.svg\\"/>\\r\\n</p>\\r\\n\\r\\n\\r\\n**Socket.IO <span style={{ color: \'#F04\' }}>P2P</span>** provides an **easy and reliable** way to setup a <a href=\\"http://www.webrtc.org/\\">WebRTC</a> connection between peers and communicate using the <a href=\\"https://github.com/socketio/socket.io-protocol\\">socket.io-protocol</a>.\\r\\n\\r\\nSocket.IO is used to transport <a href=\\"http://www.html5rocks.com/en/tutorials/webrtc/infrastructure/#what-is-signaling\\">signaling data</a> and as a <em>fallback</em> for clients where the WebRTC `PeerConnection` is not supported. Adding a simple piece of middleware to your socket.io setup enables this \u2013 no need to hand roll your own signaling exchange or set up, deploy and scale new servers.\\r\\n\\r\\n## Usage\\r\\n\\r\\nIt only takes a few lines of code to set up the server and client.\\r\\n\\r\\nServer:\\r\\n\\r\\n```js\\r\\nvar io = require(\'socket.io\')(server);\\r\\nvar p2p = require(\'socket.io-p2p-server\').Server;\\r\\nio.use(p2p);\\r\\n```\\r\\n\\r\\nClient:\\r\\n\\r\\n```js\\r\\nvar P2P = require(\'socket.io-p2p\');\\r\\nvar io = require(\'socket.io-client\');\\r\\nvar socket = io();\\r\\nvar p2p = new P2P(socket);\\r\\np2p.on(\'peer-msg\', function (data) {\\r\\n  console.log(\'From a peer %s\', data);\\r\\n});\\r\\n```\\r\\n\\r\\nThere are various options for the advanced user. Once signaling data has been exchanged an `upgrade` event is triggered and an optional callback is called.\\r\\n\\r\\n```js\\r\\nvar opts = { numClients: 10 }; // connect up to 10 clients at a time\\r\\nvar p2p = new P2P(socket, opts, function(){\\r\\n  console.log(\'We all speak WebRTC now\');\\r\\n});\\r\\n```\\r\\n\\r\\n## The Chat example\\r\\n\\r\\nWe will build a simple chat application, as our tradition dictates, but with P2P capabilities! In this application:\\r\\n\\r\\n- Clients can send text messages to each other. Messages display in a timeline\\r\\n- Clients connect to each other over socket.io and initially send messages via the server\\r\\n- Clients can choose to **go private** \u2013 switching the transport to WebRTC\\r\\n- All clients connected to the server can connect via WebRTC up to a maximum of 10 clients\\r\\n\\r\\nAll code from this example is included in the <a href=\\"https://github.com/socketio/socket.io-p2p/tree/master/examples/chat\\">main repository</a>.\\r\\n\\r\\nWe first setup the client with `autoUpgrade` set to false so that clients can upgrade the connection themselves. Set `numClients` to `10` to allow up to 10 clients to connect with each other.\\r\\n\\r\\n```js\\r\\nvar opts = {autoUpgrade: false, numClients: 10};\\r\\nvar p2psocket = new P2P(socket, opts)\\r\\n```\\r\\n\\r\\nSetup the event listeners:\\r\\n\\r\\n```js\\r\\np2psocket.on(\'peer-msg\', function(data) {\\r\\n  // append message to list\\r\\n});\\r\\n\\r\\np2psocket.on(\'go-private\', function () {\\r\\n  p2psocket.upgrade(); // upgrade to peerConnection\\r\\n});\\r\\n```\\r\\n\\r\\nIn this example, we want any clients connecting to the server to exchange signaling data with each other. We can use the server component as a simple middleware. Clients will connect on the root namespace.\\r\\n\\r\\nIf we wanted clients to exchange signalling data in rooms, rather than on a whole namespace, we could use the server module upon connection <a href=\\"https://github.com/tomcartwrightuk/p2p-snake/blob/master/server.js\\">like this</a>.\\r\\n\\r\\n```js\\r\\nvar server = require(\'http\').createServer();\\r\\nvar p2pserver = require(\'socket.io-p2p-server\').Server\\r\\nvar io = require(\'socket.io\')(server);\\r\\nserver.listen(3030)\\r\\nio.use(p2pserver);\\r\\n```\\r\\n\\r\\nWe then setup listeners to pass messages between clients and to broadcast the `go-private` event.\\r\\n\\r\\n```js\\r\\nio.on(\'connection\', function(socket) {\\r\\n  socket.on(\'peer-msg\', function(data) {\\r\\n    console.log(\'Message from peer: %s\', data);\\r\\n    socket.broadcast.emit(\'peer-msg\', data);\\r\\n  })\\r\\n\\r\\n  socket.on(\'go-private\', function(data) {\\r\\n    socket.broadcast.emit(\'go-private\', data);\\r\\n  });\\r\\n});\\r\\n```\\r\\n\\r\\nThats all you need: add a little markup we are off! Heres the demo application in action:\\r\\n\\r\\n<a href=\\"/images/P2PChatExampleRedo2.gif\\"><img src=\\"/images/P2PChatExampleRedo2.gif\\" alt=\\"P2PChatExampleRedo2\\" width=\\"854\\" height=\\"317\\" className=\\"alignnone size-full wp-image-921\\"/></a>\\r\\n\\r\\nThanks to Guillermo Rauch (<a href=\\"https://twitter.com/rauchg\\">@rauchg</a>) for the advice, testing and patience, Harrison Harnisch (<a href=\\"https://github.com/hharnisc\\">@hharnisc</a>) for bug fixes and to Feross Aboukhadijeh (<a href=\\"https://github.com/feross\\">@feross</a>) for providing the underlying WebRTC abstraction <a href=\\"https://github.com/feross/simple-peer\\">simple-peer</a>.\\r\\n\\r\\nPull requests, issues, comments and general rantings are all welcome over at the GitHub <a href=\\"https://github.com/socketio/socket.io-p2p\\">repo</a>."},{"id":"/socket-io-cpp/","metadata":{"permalink":"/blog/socket-io-cpp/","editUrl":"https://github.com/socketio/nhonvo.github.io/edit/main/blog/2015-04-13-socket-io-cpp.md","source":"@site/blog/2015-04-13-socket-io-cpp.md","title":"Socket.IO C++","description":"I\'m really proud to announce the first release of the Socket.IO C++ Client on GitHub!","date":"2015-04-13T00:00:00.000Z","formattedDate":"April 13, 2015","tags":[],"readingTime":5.98,"hasTruncateMarker":true,"authors":[{"name":"Melo Yao","title":"Maintainer of the C++ client","url":"https://twitter.com/melode111","image_url":"https://github.com/melode11.png","imageURL":"https://github.com/melode11.png"}],"frontMatter":{"title":"Socket.IO C++","slug":"/socket-io-cpp/","authors":[{"name":"Melo Yao","title":"Maintainer of the C++ client","url":"https://twitter.com/melode111","image_url":"https://github.com/melode11.png","imageURL":"https://github.com/melode11.png"}]},"prevItem":{"title":"Socket.IO P2P","permalink":"/blog/socket-io-p2p/"},"nextItem":{"title":"Socket.IO on iOS","permalink":"/blog/socket-io-on-ios/"}},"content":"I\'m really proud to announce the first release of the <a href=\\"https://github.com/socketio/socket.io-client-cpp\\">Socket.IO C++ Client</a> on GitHub!\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nBased on <a href=\\"http://www.boost.org/\\">Boost</a> and <a href=\\"https://github.com/zaphoyd/websocketpp\\">WebSocket++</a>, this full-featured Socket.IO 1.0 client has the fundamental advantage of working on **multiple platforms**. Check out the directory of <a href=\\"https://github.com/socketio/socket.io-client-cpp/tree/master/examples\\">examples</a>. It contains examples of iOS, QT, and CLI chat clients!\\r\\n\\r\\nTo learn how to use this client, I put together a QT chat example that communicates using a <a href=\\"https://github.com/Automattic/socket.io/tree/master/examples/chat\\">Socket.IO Node.JS chat server</a>. Keep reading for step-by-step instructions.\\r\\n\\r\\n<p style={{ \'text-align\': \'center\' }}>\\r\\n<img src=\\"https://cldup.com/98tHyoJJE7.gif\\" />\\r\\n</p>\\r\\n\\r\\n## Introduction\\r\\n\\r\\nIf you\u2019d like to follow along, begin by cloning the <a href=\\"https://github.com/socketio/socket.io-client-cpp\\">socket.io-client-cpp</a> repository using the following:\\r\\n\\r\\n```bash\\r\\ngit clone --recurse-submodules https://github.com/socketio/socket.io-client-cpp.git\\r\\n```\\r\\n\\r\\nThe app includes the following features:\\r\\n\\r\\n- Send messages to all users joining the room.\\r\\n- Receive a notification when users join or leave the room.\\r\\n- Receive notifications when a user starts typing a message.\\r\\n\\r\\nBefore you get started, visit the <a href=\\"http://www.qt.io/download-open-source/#section-2\\">QT community</a> to download and install QT.\\r\\n\\r\\n## Creating a QT GUI Application\\r\\n\\r\\nLaunch the QT Creator.\\r\\n\\r\\nOn the welcome page, select `New Project`, then create a `QT Widget Application.` Name it `SioChatDemo.`\\r\\n\\r\\nThe project structure should look like this:\\r\\n\\r\\n```\\r\\nSioChatDemo\\r\\n    |__ SioChatDemo.pro\\r\\n    |__Headers\\r\\n    |   |__mainwindow.h\\r\\n    |__Sources\\r\\n    |   |__main.cpp\\r\\n    |   |__mainwindow.cpp\\r\\n    |__Forms\\r\\n        |__mainwindow.ui\\r\\n```\\r\\n\\r\\n## Importing an SioClient\\r\\n\\r\\nLets copy the SioClient into the QT project under the subfolder `sioclient.`\\r\\n\\r\\nEdit `SioChatDemo.pro` to configure paths and compile options by simply adding:\\r\\n\\r\\n```bash\\r\\nSOURCES += ./sioclient/src/sio_client.cpp\\r\\n           ./sioclient/src/sio_packet.cpp\\r\\n\\r\\nHEADERS  += ./sioclient/src/sio_client.h\\r\\n            ./sioclient/src/sio_message.h\\r\\n\\r\\nINCLUDEPATH += $$PWD/sioclient/lib/rapidjson/include\\r\\nINCLUDEPATH += $$PWD/sioclient/lib/websocketpp\\r\\n```\\r\\n\\r\\nAdd two additional compile options:\\r\\n\\r\\n```bash\\r\\nCONFIG+=no_keywords\\r\\nCONFIG+=c++11\\r\\n```\\r\\n\\r\\nThe `no_keywords` flag prevents `qmake` from treating some function names as `emit` as the keyword for the signal-slot mechanism.\\r\\n\\r\\nUse `c++11` to ask for C++11 support.\\r\\n\\r\\n## Importing Boost\\r\\n\\r\\nWe now have our boost `headers` and a fat boost `static lib` named `libboost.a`(non-win32) or `boost.lib`(win32).\\r\\n\\r\\nTo import them, we need to edit `SioChatDemo.pro` again by adding a header including the following:\\r\\n\\r\\n```bash\\r\\nINCLUDEPATH += `our boost headers folder`\\r\\n```\\r\\n\\r\\nLinker options:\\r\\n\\r\\n```bash\\r\\nwin32:CONFIG(release, debug|release): LIBS += -L`our Win32 boost static lib folder` -lboost\\r\\nelse:win32:CONFIG(debug, debug|release): LIBS += -L`our Win32 boost static lib folder` -lboost\\r\\nelse:unix: LIBS += -L`our osx boost static lib folder` -lboost\\r\\n```\\r\\n\\r\\n## Create the Main Window UI\\r\\n\\r\\nCreate a simple UI by dragging and dropping a widget from the widget box on the left-hand side.\\r\\n\\r\\n<p style={{ \'text-align\': \'center\' }}>\\r\\n<img src=\\"https://cldup.com/RI98CYpYL5.png\\" />\\r\\n</p>\\r\\n\\r\\nIt contains the following:\\r\\n\\r\\n- A `QLineEdit` at the top to input a nickname: `nickNameEdit`\\r\\n- A `QPushButton` at the top right for login: `loginBtn`\\r\\n- A `QListWidget` in the center for showing messages: `listView`\\r\\n- A `QLineEdit` at the bottom for typing messages: `messageEdit`\\r\\n- A `QPushButton` at the bottom right for sending messages: `sendBtn`\\r\\n\\r\\n## Add Slots in the Main Window\\r\\n\\r\\nThe following slots need to be added in the `mainwindow` class to handle UI events:\\r\\n\\r\\n- Click \u2018Login\u2019 button\\r\\n- Click \u2018Send Message\u2019 button\\r\\n- Text change in message editing (to show typing status)\\r\\n- Return message editing (for sending responses)\\r\\n\\r\\nInsert the following code into the `MainWindow` class in `mainwindow.h`:\\r\\n\\r\\n```cpp\\r\\npublic Q_SLOTS:\\r\\n    void SendBtnClicked();\\r\\n    void TypingChanged();\\r\\n    void LoginClicked();\\r\\n    void OnMessageReturn();\\r\\n```\\r\\n\\r\\n## Connect the UI Event Signal and Slots\\r\\n\\r\\nOpen `mainwindow.ui` in the design mode. Switch to the `signals/slots` mode using `Menu->Edit->Edit Signals/Slots`.\\r\\n\\r\\nClick and hold the widget and drag it to the window (the cursor will become an electrical ground symbol) to open the connection editor.\\r\\n\\r\\nIn the connection editor, edit the main window slots on the right side. Add the slot function names added in `mainwindow.h` before.\\r\\n\\r\\nThen we can connect the event signal to the widget with our own slots. The result should look like this:\\r\\n\\r\\n<p style={{ \'text-align\': \'center\' }}>\\r\\n<img src=\\"https://cldup.com/Vsb-UXG3FC.jpg\\" />\\r\\n</p>\\r\\n\\r\\n## Adding UI Refresh Signals/Slots\\r\\n\\r\\nThe `sio::client` callbacks are not in the UI thread. However, the UI must be updated with those callbacks, so we need a signal for the non-UI thread to request the `slots` functions in the UI thread. To signal that `QListWidgetItem` has been added, insert the following:\\r\\n\\r\\n```cpp\\r\\n// in mainwindow.h\\r\\nQ_SIGNALS:\\r\\n    void RequestAddListItem(QListWidgetItem *item);\\r\\nprivate Q_SLOTS:\\r\\n    void AddListItem(QListWidgetItem *item);\\r\\n```\\r\\n\\r\\n```cpp\\r\\n//In mainwindow.cpp\\r\\nvoid MainWindow::AddListItem(QListWidgetItem* item)\\r\\n{\\r\\n    this->findChild<QListWidget*>(\\"listView\\")->addItem(item);\\r\\n}\\r\\n```\\r\\n\\r\\nThen connect them in the `MainWindow` constructor.\\r\\n\\r\\n```cpp\\r\\nconnect(this,SIGNAL(RequestAddListItem(QListWidgetItem*)),this,SLOT(AddListItem(QListWidgetItem*)));\\r\\n```\\r\\n\\r\\n## Setting up the Socket\\r\\n\\r\\nFor single-window applications, simply let `MainWindow` class hold the `sio::client` object by declaring a `unique_ptr` member of the `sio::client` and several event handling functions in `mainwindow.h`.\\r\\n\\r\\n```cpp\\r\\nprivate:\\r\\n    void OnNewMessage(std::string const& name,message::ptr const& data,bool hasAck,message::ptr &ack_resp);\\r\\n    void OnUserJoined(std::string const& name,message::ptr const& data,bool hasAck,message::ptr &ack_resp);\\r\\n    void OnUserLeft(std::string const& name,message::ptr const& data,bool hasAck,message::ptr &ack_resp);\\r\\n    void OnTyping(std::string const& name,message::ptr const& data,bool hasAck,message::ptr &ack_resp);\\r\\n    void OnStopTyping(std::string const& name,message::ptr const& data,bool hasAck,message::ptr &ack_resp);\\r\\n    void OnLogin(std::string const& name,message::ptr const& data,bool hasAck,message::ptr &ack_resp);\\r\\n    void OnConnected();\\r\\n    void OnClosed(client::close_reason const& reason);\\r\\n    void OnFailed();\\r\\n\\r\\n    std::unique_ptr<client> _io;\\r\\n```\\r\\n\\r\\nInitialize `sio::client` and setup event bindings for the default `socket` in the `MainWindow` constructor.\\r\\n\\r\\nWe also need to handle connectivity and disconnect events.\\r\\n\\r\\nAdd the following to the `MainWindow` constructor:\\r\\n\\r\\n```cpp\\r\\nMainWindow::MainWindow(QWidget *parent) :\\r\\n    QMainWindow(parent),\\r\\n    ui(new Ui::MainWindow),\\r\\n    _io(new client())\\r\\n{\\r\\n    ui->setupUi(this);\\r\\n    using std::placeholders::_1;\\r\\n    using std::placeholders::_2;\\r\\n    using std::placeholders::_3;\\r\\n    using std::placeholders::_4;\\r\\n    socket::ptr sock = _io->socket();\\r\\n    sock->on(\\"new message\\",std::bind(&MainWindow::OnNewMessage,this,_1,_2,_3,_4));\\r\\n    sock->on(\\"user joined\\",std::bind(&MainWindow::OnUserJoined,this,_1,_2,_3,_4));\\r\\n    sock->on(\\"user left\\",std::bind(&MainWindow::OnUserLeft,this,_1,_2,_3,_4));\\r\\n    sock->on(\\"typing\\",std::bind(&MainWindow::OnTyping,this,_1,_2,_3,_4));\\r\\n    sock->on(\\"stop typing\\",std::bind(&MainWindow::OnStopTyping,this,_1,_2,_3,_4));\\r\\n    sock->on(\\"login\\",std::bind(&MainWindow::OnLogin,this,_1,_2,_3,_4));\\r\\n    //default socket opened, also we have \\"set_open_listener\\" for monitoring physical connection opened.\\r\\n    _io->set_socket_open_listener(std::bind(&MainWindow::OnConnected,this,std::placeholders::_1));\\r\\n    //physical connection closed or drop.\\r\\n    _io->set_close_listener(std::bind(&MainWindow::OnClosed,this,_1));\\r\\n    //physical connection fail to establish.\\r\\n    _io->set_fail_listener(std::bind(&MainWindow::OnFailed,this));\\r\\n    connect(this,SIGNAL(RequestAddListItem(QListWidgetItem*)),this,SLOT(AddListItem(QListWidgetItem*)));\\r\\n}\\r\\n```\\r\\n\\r\\n## Managing Connection State\\r\\n\\r\\nWe have several connection listeners for connection events.\\r\\n\\r\\nFirst, we want to send a login message when were connected; we get the default `socket` from the `client` to do that.\\r\\n\\r\\n```cpp\\r\\nvoid MainWindow::OnConnected()\\r\\n{\\r\\n    QByteArray bytes = m_name.toUtf8();\\r\\n    std::string nickName(bytes.data(),bytes.length());\\r\\n    _io->socket()->emit(\\"add user\\", nickName);\\r\\n}\\r\\n```\\r\\n\\r\\nIf the connection closes or fails, we need to restore the UI before we connect.\\r\\n\\r\\n````cpp\\r\\nvoid MainWindow::OnClosed(client::close_reason const& reason)\\r\\n{\\r\\n    //restore UI to pre-login state\\r\\n}\\r\\n\\r\\nvoid MainWindow::OnFailed()\\r\\n{\\r\\n    //restore UI to pre-login state\\r\\n}\\r\\n```\\r\\n\\r\\nIf we exit the `MainWindow`, we need to clear the event bindings and listeners.\\r\\n\\r\\nThe `sio::client` object will be destroyed using `unique_ptr`.\\r\\n\\r\\n```cpp\\r\\nMainWindow::~MainWindow()\\r\\n{\\r\\n    _io->socket()->off_all();\\r\\n    _io->socket()->off_error();\\r\\n    delete ui;\\r\\n}\\r\\n```\\r\\n\\r\\n## Handling Socket.IO Events\\r\\n\\r\\nWe\'ll need to handle socket.io events in our functions they are bound to.\\r\\n\\r\\nFor example, we need to show received messages in the list view.\\r\\n\\r\\n```cpp\\r\\nvoid MainWindow::OnNewMessage(std::string const& name,message::ptr const& data,bool hasAck,message::ptr &ack_resp)\\r\\n{\\r\\n    if(data->get_flag() == message::flag_object)\\r\\n    {\\r\\n        std::string msg = data->get_map()[\\"message\\"]->get_string();\\r\\n        std::string name = data->get_map()[\\"username\\"]->get_string();\\r\\n        QString label = QString::fromUtf8(name.data(),name.length());\\r\\n        label.append(\':\');\\r\\n        label.append(QString::fromUtf8(msg.data(),msg.length()));\\r\\n        QListWidgetItem *item= new QListWidgetItem(label);\\r\\n        //emit RequestAddListItem signal\\r\\n        //so that \'AddListItem\' will be executed in UI thread.\\r\\n        Q_EMIT RequestAddListItem(item);\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n## Wrapping Up: Sending the Message\\r\\n\\r\\nWhen `sendBtn` is clicked, we need to send the text in `messageEdit` to the chatroom.\\r\\n\\r\\nAdd the following code to `SendBtnClicked()`:\\r\\n\\r\\n```cpp\\r\\nvoid MainWindow::SendBtnClicked()\\r\\n{\\r\\n    QLineEdit* messageEdit = this->findChild<QLineEdit*>(\\"messageEdit\\");\\r\\n    QString text = messageEdit->text();\\r\\n    if(text.length()>0)\\r\\n    {\\r\\n        QByteArray bytes = text.toUtf8();\\r\\n        std::string msg(bytes.data(),bytes.length());\\r\\n        _io->socket()->emit(\\"new message\\",msg);//emit new message\\r\\n        text.append(\\":You\\");\\r\\n        QListWidgetItem *item = new QListWidgetItem(text);\\r\\n        item->setTextAlignment(Qt::AlignRight);\\r\\n        Q_EMIT RequestAddListItem(item);\\r\\n        messageEdit->clear();\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n## Further Reading\\r\\n\\r\\nYou can run the <a href=\\"https://github.com/socketio/socket.io-client-cpp/tree/master/examples/QT/SioChatDemo\\">demo project</a> to get a closer look. Before you run it, please follow the <a href=\\"https://github.com/socketio/socket.io-client-cpp#-with-cmake\\">instructions</a> to make the Socket.io client library.\\r\\n\\r\\nDon\'t forget to <a href=\\"https://github.com/socketio/socket.io-client-cpp\\">star the project</a> on GitHub to get updates!"},{"id":"/socket-io-on-ios/","metadata":{"permalink":"/blog/socket-io-on-ios/","editUrl":"https://github.com/socketio/nhonvo.github.io/edit/main/blog/2015-03-09-ios.md","source":"@site/blog/2015-03-09-ios.md","title":"Socket.IO on iOS","description":"We are pleased to announce the immediate availability of the Socket.IO Swift Client! Youll now be able to write code that runs natively on iOS and OSX, while maintaining the simplicity and expressiveness of the JavaScript client!","date":"2015-03-09T00:00:00.000Z","formattedDate":"March 9, 2015","tags":[],"readingTime":7,"hasTruncateMarker":true,"authors":[{"name":"Erik Little","title":"Maintainer of the iOS client","url":"https://twitter.com/nuclearace","image_url":"https://github.com/nuclearace.png","imageURL":"https://github.com/nuclearace.png"}],"frontMatter":{"title":"Socket.IO on iOS","slug":"/socket-io-on-ios/","authors":[{"name":"Erik Little","title":"Maintainer of the iOS client","url":"https://twitter.com/nuclearace","image_url":"https://github.com/nuclearace.png","imageURL":"https://github.com/nuclearace.png"}],"author_link":"https://twitter.com/nukeace"},"prevItem":{"title":"Socket.IO C++","permalink":"/blog/socket-io-cpp/"},"nextItem":{"title":"Socket.IO 1.3.5","permalink":"/blog/socket-io-1-3-5/"}},"content":"<video className=\\"gfyVidIframe\\" id=\\"gfyVid\\" autoPlay=\\"\\" loop=\\"\\" height=\\"574\\" width=\\"323\\"><source id=\\"webmsource\\" src=\\"//fat.gfycat.com/EssentialBlueElectriceel.webm\\" type=\\"video/webm\\" /><source id=\\"mp4source\\" src=\\"//giant.gfycat.com/EssentialBlueElectriceel.mp4\\" type=\\"video/mp4\\" /></video>\\r\\n\\r\\nWe are pleased to announce the immediate availability of the <a href=\\"https://github.com/socketio/socket.io-client-swift\\">Socket.IO Swift Client</a>! Youll now be able to write code that runs natively on **iOS** and **OSX**, while maintaining the simplicity and expressiveness of the JavaScript client!\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n```swift\\r\\nimport Foundation\\r\\nlet socket = SocketIOClient(socketURL: \\"localhost:8880\\")\\r\\nsocket.on(\\"important message\\") {data, ack in\\r\\n    println(\\"Message for you! \\\\(data?[0])\\")\\r\\n    ack?(\\"I got your message, and I\'ll send my response\\")\\r\\n    socket.emit(\\"response\\", \\"Hello!\\")\\r\\n}\\r\\nsocket.connect()\\r\\n```\\r\\n\\r\\nTo show how you can use it in a real project, Ill show you how to create a small Tic Tac Toe app like the one shown above.\\r\\n\\r\\n## Overview\\r\\n\\r\\nIn this tutorial well look at creating a small iOS app that demonstrates socket.io and iOS. If you learn better from looking at code you can look at it <a href=\\"https://github.com/nuclearace/socket.io-client-swift-example\\">here</a>. The point of the tutorial is not to explain developing an iOS app, but to demonstrate how you can incorporate `socket.io-client-swift` into your projects! So it is assumed you have a basic knowledge of XCode.\\r\\nNote: This example uses Swift 1.2. However, 1.2 isnt much different from Swift 1.1, and the library has branches for Swift 1.1 and 1.2. The only difference in this guide is I use 1.2s expanded `if let` construct to avoid nesting.\\r\\nNote 2: While this library is written in, and meant for, Swift applications, it can be used with Objective-C projects, but will require some extra work (youll probably need to create a Swift class that can interface with your Objective-C code, as not all methods in the client will be available to Objective-C i.e emit, onAny). See <a href=\\"https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html#//apple_ref/doc/uid/TP40014216-CH10-XID_87\\">this</a> for more information.\\r\\n\\r\\n## Introduction\\r\\n\\r\\nI designed `socket.io-client-swift` to be as close to `socket.io-client` as I could. So many of the ways you do things in socket.io-client look similar here! This is not a step-by-step tutorial for making a Tic Tac Toe app, only adding the socket.io-client part of it.\\r\\n\\r\\n## Setting up the Project\\r\\n\\r\\nFrom Xcode, create a new project with the layout of single-view iOS application. You can name it whatever you like, Ill be naming mine `TicTacIOiOS`.\\r\\nThe next step is getting the code for `socket.io-client-swift`, you can either use `git` to clone the repo to a directory, or simply download a <a href=\\"https://github.com/socketio/socket.io-client-swift/releases\\">release</a>. Either way you get it, the process of adding it to your project is the same. Simply drag the folder named SwiftIO to the same place you copied SocketRocket! (Again making sure you select copy.)\\r\\nAnd thats it, the hardest part of putting our app together is done! At this point, if you want to test that its setup properly, try building and running the app, it should compile.\\r\\n\\r\\n### Adding Our Code\\r\\n\\r\\nNow, assuming youve created your user interface. Its time to add the code that will interface with our socket.io server!\\r\\nIn our demo application we have one UIViewController subclass, named ViewController. All of our code will be added there. First, we need to add a member named `socket` of type `SocketIOClient` to our ViewController.\\r\\n\\r\\n```swift\\r\\nlet socket = SocketIOClient(socketURL: \\"localhost:8900\\")\\r\\n```\\r\\n\\r\\nNow, in our overridden `viewDidLoad` method we want to add two things, a method call that will add our handlers to our socket, and a call to connect our socket.\\r\\n\\r\\n```swift\\r\\nself.addHandlers()\\r\\nself.socket.connect()\\r\\n```\\r\\n\\r\\n### Handlers\\r\\n\\r\\nNow that we have our method calls, its time to implement the method that adds the handlers!\\r\\n\\r\\n```swift\\r\\nfunc addHandlers() {\\r\\n    // Our socket handlers go here\\r\\n}\\r\\n```\\r\\n\\r\\nSince were about to add the handlers, I think its worth mentioning the syntax I use for closures in Swift. Swift has many different ways of expressing closures, and they can be found <a href=\\"https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Closures.html\\">here</a>. But the form I use for adding handlers is a trailing closure, without explicit type annotations. You can use other closure forms if you wish.\\r\\nIm not going to show you all the handlers in our demo app here, just a few that demonstrate important things youll need to know when working with `socket.io-client-swift`.\\r\\nThe first handler were going to add is one that will be called on any event, since its useful for debugging the API.\\r\\n\\r\\n```swift\\r\\n// Using a shorthand parameter name for closures\\r\\nself.socket.onAny {println(\\"Got event: \\\\($0.event), with items: \\\\($0.items)\\")}\\r\\n```\\r\\n\\r\\nThe next handler that well add is the one that tells the app that the game has started.\\r\\n\\r\\n```swift\\r\\nself.socket.on(\\"startGame\\") {[weak self] data, ack in\\r\\n    self?.handleStart()\\r\\n    return\\r\\n}\\r\\n```\\r\\n\\r\\nNow to explain some things. `[weak self]` is a capture list. It tells the compiler that the reference to self in this closure should not add to the reference count of self. This is so when the socket object goes out of scope, the capture made in the closure doesnt keep it from being deallocated. The first parameter in all `.on` callbacks is an optional NSArray, it will contain all the data received with the event, or nil. The second parameter in the callback is an optional with the type of AckEmitter. AckEmitter is simply a typealias of `(AnyObject...) -&gt; Void`. Well see this used later.\\r\\nThe next handler well add is the one for a win.\\r\\n\\r\\n```swift\\r\\nself.socket.on(\\"win\\") {[weak self] data, ack in\\r\\n    if let name = data?[0] as? String, typeDict = data?[1] as? NSDictionary {\\r\\n        self?.handleWin(name, type: typeDict)\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\nAs mentioned before, this is new syntax for `if let` introduced in Swift 1.2. It simplifies optional unwrapping (pyramid of doom). The important thing to gather from this handler is that you do not need to force unwrap the array to get the object. Also note that a JSON object will be exposed to Swift as an NSDictionary.\\r\\nAnother thing to note is that for almost all your handlers that have data, youll be doing some kind of optional unwrapping and type casting. This is an unfortunate consequence of working with JavaScript.\\r\\nThe final handler that Ill demonstrate here is the one that handles whether the player wants to play again.\\r\\n\\r\\n```swift\\r\\nself.socket.on(\\"gameReset\\") {data, ack in\\r\\n    ack?(false)\\r\\n}\\r\\n```\\r\\n\\r\\nIn this simplified example, we simply send an acknowledgement to the server that we dont ever want to play again. Remember that AckEmitter has a variadic definition, so you can send multiple things at once if you wanted.\\r\\n\\r\\n### Emitting Events\\r\\n\\r\\nThe next thing you\'ll probably want to know is how to send events from the client. Youll be pleased to know that it has a form almost exactly the same as socket.io-client!\\r\\nIn our ViewController we have a method that handles when a user wants to make a move. Without going into the logic of that, well show how we send the data to the server.\\r\\n\\r\\n```swift\\r\\n@IBAction func btnClicked(btn:UIButton) {\\r\\n    let coord:(x:Int, y:Int)\\r\\n\\r\\n    // Long switch statement that determines what coord should be\\r\\n\\r\\n    self.socket.emit(\\"playerMove\\", coord.x, coord.y)\\r\\n}\\r\\n```\\r\\n\\r\\nThats all you need to do for sending data!\\r\\nSome other examples of sending which arent covered in our demo are:\\r\\n\\r\\n### Sending JSON\\r\\n\\r\\nAs mentioned before, JSON in Swift is best represent as a Dictionary. Thankfully for you, you dont need to worry about turning it into something socket.io will understand, thats all done under-the-hood.\\r\\n\\r\\n```swift\\r\\nlet myJSON = [\\r\\n    \\"name\\": \\"bob\\"\\r\\n]\\r\\n\\r\\nsocket.emit(\\"jsonTest\\", myJSON)\\r\\n```\\r\\n\\r\\n### Sending Binary\\r\\n\\r\\nBinary data is also handled by the client, so you dont need to worry about it.\\r\\n\\r\\n```swift\\r\\nlet data = \\"Hello, \\".dataUsingEncoding(NSUTF8StringEncoding, allowLossyConversion: false)!\\r\\nlet data2 = \\"World\\".dataUsingEncoding(NSUTF8StringEncoding, allowLossyConversion: false)!\\r\\n\\r\\nsocket.emit(\\"dataTest\\", data, [\\"world\\": data2])\\r\\n```\\r\\n\\r\\n### Requesting Acks\\r\\n\\r\\nThe client can also request that the server send an ack for an event. This is done by using the `emitWithAck` method which returns an object to which you can add a handler.\\r\\n\\r\\n```swift\\r\\nsocket.emitWithAck(\\"needsAck\\", \\"test\\").onAck {data in\\r\\n    println(\\"got ack with data: (data)\\")\\r\\n}\\r\\n```\\r\\n\\r\\n### A Note About Multitasking in iOS\\r\\n\\r\\nAs you probably know, iOS is very picky about what you can do in the background. As such, dont expect that your socket connection will survive in the background! Youll probably stop receiving events within seconds of the app going into the background. So its better to create a task that will gracefully close the connection when it enters the background (via AppDelegate), and then reconnect the socket when the app comes back into the foreground.\\r\\nIf you want to learn more about the client, check out the <a href=\\"https://github.com/socketio/socket.io-client-swift/blob/master/README.md\\">README</a>! We also invite you to contribute by submitting issues, patches, documentation and examples."},{"id":"/socket-io-1-3-5/","metadata":{"permalink":"/blog/socket-io-1-3-5/","editUrl":"https://github.com/socketio/nhonvo.github.io/edit/main/blog/2015-03-03-1.3.5.md","source":"@site/blog/2015-03-03-1.3.5.md","title":"Socket.IO 1.3.5","description":"Socket.IO 1.3.5 addresses a parser issue. Upgrade recommended. Completely backwards-compatible.","date":"2015-03-03T00:00:00.000Z","formattedDate":"March 3, 2015","tags":[],"readingTime":0.07,"hasTruncateMarker":false,"authors":[{"name":"Guillermo Rauch","title":"Maintainer of Socket.IO","url":"https://twitter.com/rauchg","imageURL":"https://github.com/rauchg.png","key":"rauchg"}],"frontMatter":{"title":"Socket.IO 1.3.5","slug":"/socket-io-1-3-5/","authors":"rauchg"},"prevItem":{"title":"Socket.IO on iOS","permalink":"/blog/socket-io-on-ios/"},"nextItem":{"title":"Socket.IO 1.3.4","permalink":"/blog/socket-io-1-3-4/"}},"content":"Socket.IO **1.3.5** addresses a parser issue. Upgrade recommended. Completely backwards-compatible.\\r\\n\\r\\n```html\\r\\n<script src=\\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/1.3.5/socket.io.min.js\\"><\/script>\\r\\n```"},{"id":"/socket-io-1-3-4/","metadata":{"permalink":"/blog/socket-io-1-3-4/","editUrl":"https://github.com/socketio/nhonvo.github.io/edit/main/blog/2015-02-14-1.3.4.md","source":"@site/blog/2015-02-14-1.3.4.md","title":"Socket.IO 1.3.4","description":"Socket.IO 1.3.4 corrects the 1.3.3 build that included extra unused code.","date":"2015-02-14T00:00:00.000Z","formattedDate":"February 14, 2015","tags":[],"readingTime":0.075,"hasTruncateMarker":false,"authors":[{"name":"Guillermo Rauch","title":"Maintainer of Socket.IO","url":"https://twitter.com/rauchg","imageURL":"https://github.com/rauchg.png","key":"rauchg"}],"frontMatter":{"title":"Socket.IO 1.3.4","slug":"/socket-io-1-3-4/","authors":"rauchg"},"prevItem":{"title":"Socket.IO 1.3.5","permalink":"/blog/socket-io-1-3-5/"},"nextItem":{"title":"Socket.IO 1.3.3","permalink":"/blog/socket-io-1-3-3/"}},"content":"Socket.IO **1.3.4** corrects the `1.3.3` build that included extra unused code.\\r\\n\\r\\n```html\\r\\n<script src=\\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/1.3.4/socket.io.min.js\\"><\/script>\\r\\n```"},{"id":"/socket-io-1-3-3/","metadata":{"permalink":"/blog/socket-io-1-3-3/","editUrl":"https://github.com/socketio/nhonvo.github.io/edit/main/blog/2015-02-04-1.3.3.md","source":"@site/blog/2015-02-04-1.3.3.md","title":"Socket.IO 1.3.3","description":"Socket.IO 1.3.3 is a backwards-compatible recommended upgrade for everyone.","date":"2015-02-04T00:00:00.000Z","formattedDate":"February 4, 2015","tags":[],"readingTime":0.325,"hasTruncateMarker":false,"authors":[{"name":"Guillermo Rauch","title":"Maintainer of Socket.IO","url":"https://twitter.com/rauchg","imageURL":"https://github.com/rauchg.png","key":"rauchg"}],"frontMatter":{"title":"Socket.IO 1.3.3","slug":"/socket-io-1-3-3/","authors":"rauchg"},"prevItem":{"title":"Socket.IO 1.3.4","permalink":"/blog/socket-io-1-3-4/"},"nextItem":{"title":"Native Socket.IO and Android","permalink":"/blog/native-socket-io-and-android/"}},"content":"Socket.IO **1.3.3** is a backwards-compatible **recommended upgrade** for everyone.\\r\\n\\r\\n- It addresses a bug in the parser that could break the decoder with maliciously-crafted binary packets.\\r\\n\\r\\n- We now *warn* about errors in the console if you dont manually specify an `error` event handler for `Socket` objects on the server.\\r\\n\\r\\nAs usual, you can grab the latest client from the CDN!\\r\\n\\r\\n```html\\r\\n<script src=\\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/1.3.3/socket.io.min.js\\"><\/script>\\r\\n```"},{"id":"/native-socket-io-and-android/","metadata":{"permalink":"/blog/native-socket-io-and-android/","editUrl":"https://github.com/socketio/nhonvo.github.io/edit/main/blog/2015-01-20-native-socket-io-and-android.md","source":"@site/blog/2015-01-20-native-socket-io-and-android.md","title":"Native Socket.IO and Android","description":"In this tutorial well learn how to create a chat client that communicates with a Socket.IO Node.JS chat server, with our native Android Client! If you want to jump straight to the code, it\'s on GitHub. Otherwise, read on!","date":"2015-01-20T00:00:00.000Z","formattedDate":"January 20, 2015","tags":[],"readingTime":3.47,"hasTruncateMarker":true,"authors":[{"name":"Naoyuki Kanezawa","title":"Maintainer of Socket.IO","url":"https://twitter.com/nkzawa","image_url":"https://github.com/nkzawa.png","imageURL":"https://github.com/nkzawa.png"}],"frontMatter":{"title":"Native Socket.IO and Android","slug":"/native-socket-io-and-android/","authors":[{"name":"Naoyuki Kanezawa","title":"Maintainer of Socket.IO","url":"https://twitter.com/nkzawa","image_url":"https://github.com/nkzawa.png","imageURL":"https://github.com/nkzawa.png"}]},"prevItem":{"title":"Socket.IO 1.3.3","permalink":"/blog/socket-io-1-3-3/"},"nextItem":{"title":"Introducing Socket.IO 1.0","permalink":"/blog/introducing-socket-io-1-0/"}},"content":"<img class=\\"aligncenter size-full wp-image-626\\" src=\\"/images/androidchat.gif\\" alt=\\"android chat demo\\" width=\\"338\\" height=\\"600\\"/>\\r\\n\\r\\nIn this tutorial well learn how to create a chat client that communicates with a Socket.IO <a href=\\"https://github.com/socketio/socket.io/blob/master/examples/chat/index.js\\">Node.JS chat server</a>, with our <a href=\\"https://github.com/socketio/socket.io-client-java\\">native Android Client</a>! If you want to jump straight to the code, it\'s on <a href=\\"https://github.com/nkzawa/socket.io-android-chat\\">GitHub</a>. Otherwise, read on!\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n## Introduction\\r\\n\\r\\nTo follow along, start by cloning the repository: <a title=\\"socket.io-android-chat\\" href=\\"https://github.com/nkzawa/socket.io-android-chat\\" target=\\"_blank\\">socket.io-android-chat</a>.\\r\\n\\r\\nThe app has the following features:\\r\\n\\r\\n- Sending a message to all users joining to the room.\\r\\n- Notifies when each user joins or leaves.\\r\\n- Notifies when an user start typing a message.\\r\\n\\r\\nSocket.IO provides an event-oriented API that works across all networks, devices and browsers. It\'s incredibly robust (works even behind corporate proxies!) and highly performant, which is very suitable for multiplayer games or realtime communication.\\r\\n\\r\\n## Installing the Dependencies\\r\\n\\r\\nThe first step is to install the Java Socket.IO client with <a href=\\"https://developer.android.com/tools/building/configuring-gradle.html\\" target=\\"_blank\\">Gradle</a>.\\r\\n\\r\\nFor this app, we just add the dependency to `build.gradle`:\\r\\n\\r\\n```gradle\\r\\ndependencies {\\r\\n    implementation (\'io.socket:socket.io-client:2.0.0\') {\\r\\n        exclude group: \'org.json\', module: \'json\'\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\nWe must remember adding the internet permission to `AndroidManifest.xml`.\\r\\n\\r\\n```xml\\r\\n\x3c!-- app/AndroidManifest.xml --\x3e\\r\\n<manifest xmlns:android=\\"http://schemas.android.com/apk/res/android\\">\\r\\n    <uses-permission android:name=\\"android.permission.INTERNET\\" />\\r\\n    ...\\r\\n</manifest>\\r\\n```\\r\\n\\r\\nNow we can use Socket.IO on Android!\\r\\n\\r\\n## Using socket in Activity and Fragment\\r\\n\\r\\nFirst, we have to initialize a new instance of Socket.IO as follows:\\r\\n\\r\\n```java\\r\\nimport io.socket.client.IO;\\r\\nimport io.socket.client.Socket;\\r\\n\\r\\nprivate Socket mSocket;\\r\\n{\\r\\n    try {\\r\\n        mSocket = IO.socket(\\"http://chat.socket.io\\");\\r\\n    } catch (URISyntaxException e) {}\\r\\n}\\r\\n\\r\\n@Override\\r\\npublic void onCreate(Bundle savedInstanceState) {\\r\\n    super.onCreate(savedInstanceState);\\r\\n    mSocket.connect();\\r\\n}\\r\\n```\\r\\n\\r\\n`IO.socket()` returns a socket for `http://chat.socket.io` with the default options. Notice that the method caches the result, so you can always get a same `Socket` instance for an url from any Activity or Fragment.\\r\\nAnd we explicitly call `connect()` to establish the connection here (unlike the JavaScript client). In this app, we use `onCreate` lifecycle callback for that, but it actually depends on your application.\\r\\n\\r\\n## Emitting events\\r\\n\\r\\nSending data looks as follows. In this case, we send a string but you can do JSON data too with the <a href=\\"http://developer.android.com/reference/org/json/package-summary.html\\" target=\\"_blank\\">org.json</a> package, and even binary data is supported as well!\\r\\n\\r\\n```java\\r\\nprivate EditText mInputMessageView;\\r\\n\\r\\nprivate void attemptSend() {\\r\\n    String message = mInputMessageView.getText().toString().trim();\\r\\n    if (TextUtils.isEmpty(message)) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    mInputMessageView.setText(\\"\\");\\r\\n    mSocket.emit(\\"new message\\", message);\\r\\n}\\r\\n```\\r\\n\\r\\n## Listening on events\\r\\n\\r\\nLike I mentioned earlier, Socket.IO is **bidirectional**, which means we can send events to the server, but also at any time during the communication the server can send events to us.\\r\\n\\r\\nWe then can make the socket listen an event on `onCreate` lifecycle callback.\\r\\n\\r\\n```java\\r\\n@Override\\r\\npublic void onCreate(Bundle savedInstanceState) {\\r\\n    super.onCreate(savedInstanceState);\\r\\n\\r\\n    mSocket.on(\\"new message\\", onNewMessage);\\r\\n    mSocket.connect();\\r\\n}\\r\\n```\\r\\n\\r\\nWith this we listen on the `new message` event to receive messages from other users.\\r\\n\\r\\n```java\\r\\nimport io.socket.emitter.Emitter;\\r\\n\\r\\nprivate Emitter.Listener onNewMessage = new Emitter.Listener() {\\r\\n    @Override\\r\\n    public void call(final Object... args) {\\r\\n        getActivity().runOnUiThread(new Runnable() {\\r\\n            @Override\\r\\n            public void run() {\\r\\n                JSONObject data = (JSONObject) args[0];\\r\\n                String username;\\r\\n                String message;\\r\\n                try {\\r\\n                    username = data.getString(\\"username\\");\\r\\n                    message = data.getString(\\"message\\");\\r\\n                } catch (JSONException e) {\\r\\n                    return;\\r\\n                }\\r\\n\\r\\n                // add the message to view\\r\\n                addMessage(username, message);\\r\\n            }\\r\\n        });\\r\\n    }\\r\\n};\\r\\n```\\r\\n\\r\\nThis is what `onNewMessage` looks like. A listener is an instance of `Emitter.Listener` and must be implemented the `call` method. Youll notice that inside of `call()` is wrapped by `Activity#runOnUiThread()`, that is because the callback is always called on another thread from Android UI thread, thus we have to make sure that adding a message to view happens on the UI thread.\\r\\n\\r\\n## Managing Socket State\\r\\n\\r\\nSince an Android Activity has its own lifecycle, we should carefully manage the state of the socket also to avoid problems like memory leaks. In this app, we\u2019ll close the socket connection and remove all listeners on `onDestroy` callback of Activity.\\r\\n\\r\\n```java\\r\\n@Override\\r\\npublic void onDestroy() {\\r\\n    super.onDestroy();\\r\\n\\r\\n    mSocket.disconnect();\\r\\n    mSocket.off(\\"new message\\", onNewMessage);\\r\\n}\\r\\n```\\r\\n\\r\\nCalling `off()` removes the listener of the `new message` event.\\r\\n\\r\\n## Further reading\\r\\n\\r\\nIf you want to explore more, I recommend you look into:\\r\\n\\r\\n- Other features of this app. They are just implemented with `emit()`, `on()` and `off()`.\\r\\n\\r\\n- The [documentation](https://socketio.github.io/socket.io-client-java/installation.html) of the Java Socket.IO client\\r\\n\\r\\n- Many other great Socket.IO implementations created by the community!"},{"id":"/introducing-socket-io-1-0/","metadata":{"permalink":"/blog/introducing-socket-io-1-0/","editUrl":"https://github.com/socketio/nhonvo.github.io/edit/main/blog/2014-05-28-1.0.0.md","source":"@site/blog/2014-05-28-1.0.0.md","title":"Introducing Socket.IO 1.0","description":"The first version of Socket.IO was created shortly after Node.JS made its first appearance. I had been looking for a framework that easily enabled me to push data from a server to a client for a long time, and even had tried other approaches to server-side JavaScript.","date":"2014-05-28T00:00:00.000Z","formattedDate":"May 28, 2014","tags":[],"readingTime":11.885,"hasTruncateMarker":true,"authors":[{"name":"Guillermo Rauch","title":"Maintainer of Socket.IO","url":"https://twitter.com/rauchg","imageURL":"https://github.com/rauchg.png","key":"rauchg"}],"frontMatter":{"title":"Introducing Socket.IO 1.0","slug":"/introducing-socket-io-1-0/","authors":"rauchg"},"prevItem":{"title":"Native Socket.IO and Android","permalink":"/blog/native-socket-io-and-android/"}},"content":"The first version of Socket.IO was created shortly after Node.JS made its first appearance. I had been looking for a framework that easily enabled me to push data from a server to a client for a long time, and even had tried other approaches to server-side JavaScript.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nAt the time, the main focus was on an interface equivalent to the upcoming `WebSocket` API that was in the process of standardization. I was lucky to receive a lot of feedback from the community at the time (including Node.JS\'s creator) that helped shape the project into something significantly more useful.\\r\\n\\r\\nSocket.IO has thus become the `EventEmitter` of the web. Today I want to talk about the work that has gone into 1.0 to round up this vision.\\r\\n\\r\\nThere\'s a lot to say about Socket.IO 1.0, so if you\'re short in time, feel free to jump to the parts that are most interesting to you:\\r\\n\\r\\n1. [New engine](#New-engine)\\r\\n2. [Binary support](#Binary-support)\\r\\n3. [Automated testing](#Automated-Testing)\\r\\n4. [Scalability](#Scalability)\\r\\n5. [Integration](#Integration)\\r\\n6. [Better debugging](#Better-debugging)\\r\\n7. [Streamlined APIs](#Streamlined-APIs)\\r\\n8. [CDN delivery](#CDN-delivery)\\r\\n9. [Future innovation](#Future-innovation)\\r\\n10. [Credits](#Credits)\\r\\n\\r\\n\\r\\n## New engine\\r\\n\\r\\nThe Socket.IO codebase no longer deals with transports and browser incompatibilities. That work has been relegated to a new module we\'ve been perfecting for months called <a href=\\"http://github.com/automattic/engine.io\\">Engine.IO</a> that implements a WebSocket-like API.\\r\\n\\r\\nThe benefits of this particular modularization can\'t be understated:\\r\\n\\r\\n- For the Socket.IO end user, nothing changes. Just drop-in the new version!\\r\\n- A tremendous simplification in terms of codebase size and testing surface\\r\\n  - The Socket.IO Server is now only 1234 lines of code.\\r\\n  - The Socket.IO Client is now only 976 lines of code.\\r\\n- Future-proof flexibility\\r\\n  - If `WebSocket` is the only transport you want to support moving forward, Engine.IO (with all its browser hacks and workarounds) can be seamlessly removed.\\r\\n  - Alternative transports such as vanilla Node.JS TCP Sockets or <a href=\\"https://developer.chrome.com/apps/socket\\">Google Chrome Sockets</a> can be trivially implemented.\\r\\n\\r\\nThis separation has also allowed us to innovate and perfect the transport layer. One of my favorite improvements was introducing the idea of what I call *transport feature detection*.\\r\\n\\r\\nOnce upon a time in the web, it was extremely common to simply sniff User Agents to make decisions of what APIs to use or what behaviors to enable. As JavaScript codebases became more complex and mature, it became obvious that in order to *maximize reliability*, it made more sense to directly test the APIs to see if they would behave as expected.\\r\\n\\r\\nFor example, simply checking that the *JSON* global is present does not mean that *JSON.stringify* works, or even exists. It could have simply meant that the user defined a JSON global of their own, or the environment could have a broken JSON implementation.\\r\\n\\r\\nSocket.IO never assumes that `WebSocket` will just work, because in practice there\'s a good chance that it won\'t. Instead, it establishes a connection with XHR or JSONP right away, and then attempts to **upgrade** the connection to WebSocket. Compared to the fallback method which relies on timeouts, this means that *none of your users will have a degraded experience*.\\r\\n\\r\\n\\r\\n## Binary support\\r\\n\\r\\nUsers have been asking for the ability to send binary data for a while, especially after `WebSocket` added support for it.\\r\\n\\r\\nThe main issue was that if we had modeled our binary support after the `WebSocket` API, its usefulness would have been fairly limited. `WebSocket` requires that you put your Socket either into &#8220;string mode&#8221; or &#8220;binary mode&#8221;:\\r\\n\\r\\n```js\\r\\nvar socket = new WebSocket(\'ws://localhost\');\\r\\nsocket.binaryType = \'arraybuffer\';\\r\\nsocket.send(new ArrayBuffer);\\r\\n```\\r\\n\\r\\nThis is good for a low-level API, which is why Engine.IO <a href=\\"https://github.com/automattic/engine.io-client#sending-and-receiving-binary\\">now supports it</a>, but application developers most likely don\'t want to send *only blobs*, or encode everything as a blob manually prior to sending it out.\\r\\n\\r\\nSocket.IO now supports emitting `Buffer` (from Node.JS), `Blob`, `ArrayBuffer` and even `File`, as part of any datastructure:\\r\\n\\r\\n```js\\r\\nvar fs = require(\'fs\');\\r\\nvar io = require(\'socket.io\')(3000);\\r\\nio.on(\'connection\', function(socket){\\r\\n  fs.readFile(\'image.png\', function(err, buf){\\r\\n    // it\'s possible to embed binary data\\r\\n    // within arbitrarily-complex objects\\r\\n    socket.emit(\'image\', { image: true, buffer: buf });\\r\\n  });\\r\\n});\\r\\n```\\r\\n\\r\\nTo test how useful it would be to support binary in this particular way (and as a virtualization geek), I decided to replicate the <a href=\\"http://en.wikipedia.org/wiki/Twitch_Plays_Pok%C3%A9mon\\">Twitch Plays Pokemon</a> experiment 100% in JavaScript. Using a <a href=\\"https://github.com/grantgalitz/GameBoy-Online\\">JavaScript gameboy emulator</a>, <a href=\\"http://github.com/automattic/node-canvas\\">node-canvas</a>, socket.io we came up with a server-rendered collaborative game that even works on IE8. Check it out on https://weplay.io (<a href=\\"https://github.com/guille/weplay\\">source code here</a>).\\r\\n\\r\\n<video id=\\"weplay-vid\\" data-setup=\\"{&quot;autoplay&quot;:true,&quot;loop&quot;:true, &quot;techOrder&quot;: [&quot;html5&quot;, &quot;flash&quot;], &quot;height&quot;: 300}\\" className=\\"video-js vjs-default-skin\\" autoPlay loop width=\\"100%\\" poster=\\"https://i.cloudup.com/aNZqxnZzHv.png\\"><source src=\\"https://i.cloudup.com/transcoded/KL-0r-E2Gj.mp4\\" type=\\"video/mp4\\" /></video>\\r\\n\\r\\nThe relevant code that sends the image data is:\\r\\n\\r\\n```js\\r\\nself.canvas.toBuffer(function(err, buf){\\r\\n  if (err) throw err;\\r\\n  io.emit(\'frame\', buf);\\r\\n});\\r\\n```\\r\\n\\r\\nThe next experiment was to run an instance of <a href=\\"http://wiki.qemu.org/Main_Page\\">QEMU</a> running an image of Windows XP, in honor of <a href=\\"http://indianexpress.com/article/technology/technology-others/windows-xp-end-of-support-today/\\">its retirement</a>. Every player gets a 15 second turn to control the machine. Check out the demo on http://socket.computer. Here\'s a video of your typical inception scenario:\\r\\n\\r\\n<video id=\\"computer-vid\\" data-setup=\\"{&quot;autoplay&quot;:true,&quot;loop&quot;:true, &quot;techOrder&quot;: [&quot;html5&quot;, &quot;flash&quot;], &quot;height&quot;: 300}\\" className=\\"video-js vjs-default-skin\\" autoPlay loop width=\\"100%\\"><source src=\\"https://i.cloudup.com/transcoded/Cuqn5OLmcl.mp4\\" type=\\"video/mp4\\" /></video>\\r\\n\\r\\nA key part of putting together this demo was connecting to the QEMU VNC server and implementing the RFB protocol. As it\'s usually the case with Node.JS, the solution was a `npm search rfb` away.\\r\\n\\r\\nEssentially, in order to minimize latency and have the best performance, it\'s best to notify clients *only* of the pieces of the screen that changed. For example, if you move your mouse around, only little pieces of the screen that surround the cursor are broadcasted. The <a href=\\"https://github.com/sidorares/node-rfb2\\">node-rfb2</a> module gives us a `rect` event with objects like the following:\\r\\n\\r\\n```js\\r\\n{\\r\\n  x: 103,\\r\\n  y: 150,\\r\\n  width: 200,\\r\\n  height: 250,\\r\\n  data: Buffer\\r\\n}\\r\\n```\\r\\n\\r\\nIt then became clear to me that our support for binary data would be genuinely useful. All I had to do was call `io.emit` to pass that object around, and let Socket.IO do the rest.\\r\\n\\r\\nJust for fun, I also installed and ran one of my favorite first person shooters:\\r\\n\\r\\n<video id=\\"cs-vid\\" data-setup=\\"{&quot;autoplay&quot;:true,&quot;loop&quot;:true, &quot;techOrder&quot;: [&quot;html5&quot;, &quot;flash&quot;], &quot;height&quot;: 300}\\" className=\\"video-js vjs-default-skin\\" autoPlay loop width=\\"100%\\"><source src=\\"https://i.cloudup.com/transcoded/Ra6PJnoLBq.mp4\\" type=\\"video/mp4\\" /></video>\\r\\n\\r\\n## Automated Testing\\r\\n\\r\\nEvery commit to the Socket.IO codebase now triggers a testing matrix totaling to 25 browsers, including Android and iOS.\\r\\n\\r\\nWe accomplish this by having `make test` seamlessly set up a reverse tunnel to ephemeral ports in your computer (thus making it accessible from the outside world), and have them execute on the Sauce Labs cloud, which is in charge of virtualizing and executing browsers on all the environments we care about.\\r\\n\\r\\n<img src=\\"https://i.cloudup.com/wuvWoEV3EH.png\\" alt=\\"\\"/>\\r\\n\\r\\n\\r\\n## Scalability\\r\\n\\r\\nWe simplified the approach towards rooms and multi-node scalability dramatically. Instead of storing and/or replicating data across nodes, Socket.IO is now only concerned with passing events around.\\r\\n\\r\\nIf you want to scale out Socket.IO to multiple nodes, it now comes down to two simple steps:\\r\\n\\r\\n- Turn on sticky load balancing (for example by origin IP address). This ensures that long-polling connections for example always route requests to the same node where buffers of messages could be stored.\\r\\n- Implement the <a href=\\"https://github.com/automattic/socket.io-redis\\">socket.io-redis</a> adapter.\\r\\n\\r\\n```js\\r\\nvar io = require(\'socket.io\')(3000);\\r\\nvar redis = require(\'socket.io-redis\');\\r\\nio.adapter(redis({ host: \'localhost\', port: 6379 }));\\r\\n```\\r\\n\\r\\nWe have deprecated the `Socket#set` and `Socket#get` APIs. Packets now simply get encoded and distributed to other nodes whenever you broadcast, and we don\'t deal with storage.\\r\\n\\r\\nThis leads directly into our next goal: integration with other backends.\\r\\n\\r\\n\\r\\n## Integration\\r\\n\\r\\nChances are good that your existing application deployments are written in a variety of languages and frameworks, and are not just limited to Node.JS. Even if it was all Node.JS, you probably at some point want to separate concerns of your application into different processes.\\r\\n\\r\\nOne of the processes might be in charge of hosting the Socket.IO server, accepting connections, performing authentication, etc, and then another part of your backend might end up in charge of *producing* messages.\\r\\n\\r\\nTo that end we\'re introducing the <a href=\\"https://github.com/automattic/socket.io-emitter\\">socket.io-emitter</a> project which hooks into <a href=\\"https://github.com/automattic/socket.io-redis\\">socket.io-redis</a> to easily allow you to emit events to browsers from anywhere:\\r\\n\\r\\n```js\\r\\nvar io = require(\'socket.io-emitter\')();\\r\\nsetInterval(function(){\\r\\n  io.emit(\'time\', new Date);\\r\\n}, 5000);\\r\\n```\\r\\n\\r\\nTony Kovanen already created a <a href=\\"https://github.com/rase-/socket.io-php-emitter\\">PHP implementation</a>:\\r\\n\\r\\n```js\\r\\n<?php\\r\\n$emitter = new SocketIOEmitter(array(\'port\' => \'6379\', \'host\' => \'127.0.0.1\'));\\r\\n$emitter->emit(\'event\', \'wow\');\\r\\n?>\\r\\n```\\r\\n\\r\\nThis makes it really easy to turn any existing application into a realtime application!\\r\\n\\r\\n\\r\\n## Better debugging\\r\\n\\r\\nSocket.IO is now completely instrumented by a minimalistic yet tremendously powerful utility called <a href=\\"https://github.com/visionmedia/debug\\">debug</a> by TJ Holowaychuk.\\r\\n\\r\\nIn the past, the Socket.IO server would default to logging everything out to the console. This turned out to be annoyingly verbose for many users (although extremely useful for others), and violates the Rule of Silence of the <a href=\\"http://en.wikipedia.org/wiki/Unix_philosophy#Eric_Raymond.E2.80.99s_17_Unix_Rules\\">Unix Philosophy</a>:\\r\\n\\r\\n<blockquote>\\r\\n  **Rule of Silence**<br/>\\r\\n  Developers should design programs so that they do not print unnecessary output. This rule aims to allow other programs and developers to pick out the information they need from a program\'s output without having to parse  verbosity.\\r\\n\\r\\n</blockquote>\\r\\nThe basic idea is that each module used by Socket.IO provides different debugging scopes that give you insight into the internals. By default, all output is suppressed, and you can opt into seeing messages by supplying the `DEBUG` env variable (Node.JS) or the `localStorage.debug` property (Browsers).\\r\\n\\r\\nYou can see it in action for example on our homepage:\\r\\n\\r\\n<video id=\\"debugging-vid\\" data-setup=\\"{&quot;autoplay&quot;:true,&quot;loop&quot;:true, &quot;techOrder&quot;: [&quot;html5&quot;, &quot;flash&quot;], &quot;height&quot;: 300}\\" className=\\"video-js vjs-default-skin\\" autoPlay loop width=\\"100%\\"><source src=\\"https://i.cloudup.com/transcoded/IL9alTr0eO.mp4\\" type=\\"video/mp4\\" /></video>\\r\\n\\r\\n\\r\\n## Streamlined APIs\\r\\n\\r\\nThe `socket.io` module now exports the attachment function directly (previously `.listen`).<br/>\\r\\nIt\'s even easier now to attach socket.io to a HTTP server:\\r\\n\\r\\n```js\\r\\nvar srv = require(\'http\').Server();\\r\\nvar io = require(\'socket.io\')(srv);\\r\\n```\\r\\n\\r\\nor to make it listen on some port:\\r\\n\\r\\n```js\\r\\nvar io = require(\'socket.io\')(8080);\\r\\n```\\r\\n\\r\\nBefore, to refer to everyone connected you had to use `io.sockets`. Now you can call directly on `io`:\\r\\n\\r\\n```js\\r\\nio.on(\'connection\', function(socket){\\r\\n  socket.emit(\'hi\');\\r\\n});\\r\\nio.emit(\'hi everyone\');\\r\\n```\\r\\n\\r\\n\\r\\n## CDN delivery\\r\\n\\r\\nOne of the best decisions we made early on was that implementing a Socket.IO server would not only give you access to the realtime protocol, but Socket.IO itself would also serve the client.\\r\\n\\r\\nNormally, all you have to do is to include a snippet like this:\\r\\n\\r\\n```js\\r\\n<script src=\\"/socket.io/socket.io.js\\"><\/script>\\r\\n```\\r\\n\\r\\nIf you want to optimize access to the client by serving it near your users, provide the maximum level of gzip compression (thanks to Google\'s <a href=\\"https://code.google.com/p/zopfli/\\">zopfli</a> and proper support for caching, you can now use our CDN. It\'s free, forever, and has built-in SSL support:\\r\\n\\r\\n```js\\r\\n<script src=\\"https://cdn.socket.io/socket.io-1.0.0.js\\"><\/script>\\r\\n```\\r\\n\\r\\n## Future innovation\\r\\n\\r\\nThe core Socket.IO projects will continue to improve with lots of more frequent releases, with the sole goal of improving reliability, speed and making the codebase smaller and easier to maintain. Socket.IO 2.0 will probably see us ditching support for some older browsers, and not bundling some modules like the JSON serializer.\\r\\n\\r\\nMost of the innovation in the Socket.IO world will happen outside of the core codebases. The most important projects that I\'ll be closely watching are the following:\\r\\n\\r\\n### socket.io-stream\\r\\n\\r\\nBy adding this plugin, you\'ll be able to send `Stream` objects so that you can write memory-efficient programs. In the first example we loaded a file into memory prior to emitting it, but the following should be possible:\\r\\n\\r\\n```js\\r\\nvar fs = require(\'fs\');\\r\\nvar io = require(\'socket.io\')(3000);\\r\\nrequire(\'socket.io-stream\')(io);\\r\\nio.on(\'connection\', function(socket){\\r\\n  io.emit(fs.createReadStream(\'file.jpg\'));\\r\\n});\\r\\n```\\r\\n\\r\\nAnd on the client side you\'ll receive a `Stream` object that emits `data` events.\\r\\n\\r\\n### Tooling\\r\\n\\r\\nWhen you use Socket.IO you don\'t care about transports, packets, frames, TCP or WebSocket. You care about what events are sent back and forth.\\r\\n\\r\\n<a href=\\"https://cloudup.com/cBxkAW3sqpH\\"><img src=\\"https://i.cloudup.com/_Jsiiabyfr.png\\" alt=\\"\\"/></a>\\r\\n\\r\\nOur goal is to have plugins for Web Inspector, Firefox Developer Tools that allow you to easily introspect what events are being sent, when, and what their parameters are.\\r\\n\\r\\nThis project is being led by the talented Nick LaGrow (<a href=\\"https://github.com/nlagrow\\">Github</a>), Samaan Ghani (<a href=\\"https://github.com/samaanghani\\">Github</a>) and David Cummings (<a href=\\"https://twitter.com/dece\\">Twitter</a>).\\r\\n\\r\\n\\r\\n### New languages and frameworks\\r\\n\\r\\nA lot of effort has gone into specing and documenting the <a href=\\"https://github.com/automattic/engine.io-protocol\\">Engine.IO protocol</a> and <a href=\\"https://github.com/automattic/socket.io-protocol\\">Socket.IO protocol</a>.\\r\\n\\r\\nThe main goal behind this is that the Node.JS servers and clients become the reference implementations for many other languages and frameworks. Interoperability within the larger ecosystem is one of our biggest goals for 2014 and beyond.\\r\\n\\r\\n\\r\\n## Credits\\r\\n\\r\\nThis release has been a big team effort. Special thanks go out to our new core team:\\r\\n\\r\\n- Tony Kovanen (<a href=\\"http://github.com/rase-\\">Github</a> / <a href=\\"http://twitter.com/TonyKovanen\\">Twitter</a>) for his amazing work on Engine.IO binary support and research into a variety of workarounds to support all versions of iOS and Internet Explorer, his help in putting together this website and rounding up the docs.\\r\\n\\r\\n- Kevin Roark (<a href=\\"http://github.com/kevin-roark\\">Github</a>) for the entire development of the new Socket.IO parser on top of Engine, the Socket.IO Computer demo, and help with docs, issues and pull requests.\\r\\n\\r\\n- Roman Shtylman (<a href=\\"http://github.com/defunctzombie\\">Github</a> / <a href=\\"http://twitter.com/defunctzombie\\">Twitter</a>) for his work on zuul and localtunnel, crucial to our testing architecture and our mission of reliability.\\r\\n\\r\\nAnd in no particular order:\\r\\n\\r\\n- Jay Borenstein (<a href=\\"http://www.linkedin.com/in/jayborenstein\\">LinkedIn</a>) for selecting Socket.IO as one of the projects to mentor students on Open Source engineering as part of the <a href=\\"https://www.facebook.com/notes/facebook-engineering/facebook-open-academy-bringing-open-source-to-cs-curricula/10151806121378920\\">Open Academy</a> project.\\r\\n\\r\\n- Michael Srb (<a href=\\"https://github.com/xixixao\\">Github</a>), Mark Mokryn (<a href=\\"https://github.com/mokesmokes\\">Github</a>), Eugen Dueck (<a href=\\"http://github.com/eugendueck\\">Github</a>), Afshin Mehrabani (<a href=\\"http://github.com/afshinm\\">Github</a>), Christoph Dorn (<a href=\\"https://github.com/cadorn\\">Github</a>) and Mikito Takada (<a href=\\"http://github.com/mixu\\">Github</a>) for several key Engine.IO patches.\\r\\n\\r\\n- Grant Timmerman (<a href=\\"http://github.com/grant\\">Github</a> / <a href=\\"https://twitter.com/granttimmerman\\">Twitter</a>) for his outstanding work on the new Socket.IO <a href=\\"http://new.socket.io/demos/chat/\\">example chat application</a>, and multiple patches and issues investigation.\\r\\n\\r\\n- Jxck (<a href=\\"http://github.com/jxck\\">Github</a> / <a href=\\"https://twitter.com/Jxck_\\">Twitter</a>) for his work on translation, documentations and patches. \u3042\u308a\u304c\u3068\u3046\\r\\n\\r\\n- Arnout Kazemier (<a href=\\"http://github.com/3rdEden\\">Github</a> / <a href=\\"https://twitter.com/3rdEden\\">Twitter</a>) for his multiple contributions to Engine.IO and Socket.IO\\r\\n\\r\\n- Sauce Labs (<a href=\\"https://github.com/saucelabs\\">Github</a> / <a href=\\"https://twitter.com/saucelabs\\">Twitter</a>) for supporting open source projects with free testing infrastructure.\\r\\n\\r\\n- Shihui Song (<a href=\\"https://github.com/sweetiesong\\">Github</a>), Qiming Fang (<a href=\\"https://github.com/qimingfang\\">Github</a>) and Erluo Li for their work on testing infrastructure.\\r\\n\\r\\n- Julian Salazar (<a href=\\"https://github.com/j-salazar\\">Github</a>) and Tianyiu Liu (<a href=\\"https://github.com/poohlty\\">Github</a>) for their work on reconnection and ongoing research into resource sharing between browser tabs and messages synchronization.\\r\\n\\r\\n- Gal Koren (<a href=\\"https://github.com/get\\">Github</a>) for his fantastic work into modularization of the codebases.\\r\\n\\r\\n- Matt Walker (<a href=\\"https://twitter.com/mcfwalker\\">Twitter</a>) for the beautiful Socket.IO logo.\\r\\n\\r\\nFinally, I\'m very grateful to my company <a href=\\"http://automattic.com/\\">Automattic</a> for being a great home to Open Source innovation."}]}')}}]);