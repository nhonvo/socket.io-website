"use strict";(self.webpackChunksample_website=self.webpackChunksample_website||[]).push([[7523],{5680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>h});var a=n(6540);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},g="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),g=p(n),d=o,h=g["".concat(l,".").concat(d)]||g[d]||u[d]||i;return n?a.createElement(h,r(r({ref:t},c),{},{components:n})):a.createElement(h,r({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[g]="string"==typeof e?e:o,r[1]=s;for(var p=2;p<i;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6776:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(8168),o=(n(6540),n(5680));const i={title:"Using multiple nodes",sidebar_position:7,slug:"/using-multiple-nodes/"},r=void 0,s={unversionedId:"categories/Server/using-multiple-nodes",id:"version-3.x/categories/Server/using-multiple-nodes",title:"Using multiple nodes",description:"When deploying multiple Socket.IO servers, there are two things to take care of:",source:"@site/versioned_docs/version-3.x/categories/02-Server/using-multiple-nodes.md",sourceDirName:"categories/02-Server",slug:"/using-multiple-nodes/",permalink:"/socket.io-website/docs/v3/using-multiple-nodes/",draft:!1,editUrl:"https://github.com/socketio/socket.io-website/edit/main/versioned_docs/version-3.x/categories/02-Server/using-multiple-nodes.md",tags:[],version:"3.x",lastUpdatedAt:1631601618,formattedLastUpdatedAt:"Sep 14, 2021",sidebarPosition:7,frontMatter:{title:"Using multiple nodes",sidebar_position:7,slug:"/using-multiple-nodes/"},sidebar:"version-3.x/sidebar",previous:{title:"Behind a reverse proxy",permalink:"/socket.io-website/docs/v3/reverse-proxy/"},next:{title:"Handling CORS",permalink:"/socket.io-website/docs/v3/handling-cors/"}},l={},p=[{value:"Sticky load balancing",id:"sticky-load-balancing",level:2},{value:"Why is sticky-session required",id:"why-is-sticky-session-required",level:3},{value:"Enabling sticky-session",id:"enabling-sticky-session",level:3},{value:"NginX configuration",id:"nginx-configuration",level:3},{value:"Apache HTTPD configuration",id:"apache-httpd-configuration",level:3},{value:"HAProxy configuration",id:"haproxy-configuration",level:3},{value:"Traefik",id:"traefik",level:3},{value:"Using Node.js Cluster",id:"using-nodejs-cluster",level:3},{value:"Passing events between nodes",id:"passing-events-between-nodes",level:2},{value:"The Redis adapter",id:"the-redis-adapter",level:3},{value:"Sending messages from the outside world",id:"sending-messages-from-the-outside-world",level:3}],c={toc:p},g="wrapper";function u(e){let{components:t,...i}=e;return(0,o.yg)(g,(0,a.A)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"When deploying multiple Socket.IO servers, there are two things to take care of:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"enabling sticky session, if HTTP long-polling is enabled (which is the default): see ",(0,o.yg)("a",{parentName:"li",href:"#Enabling-sticky-session"},"below")),(0,o.yg)("li",{parentName:"ul"},"using the Redis adapter (or another compatible ",(0,o.yg)("a",{parentName:"li",href:"/docs/v3/glossary/#Adapter"},"Adapter"),"): see ",(0,o.yg)("a",{parentName:"li",href:"#Passing-events-between-nodes"},"below"))),(0,o.yg)("h2",{id:"sticky-load-balancing"},"Sticky load balancing"),(0,o.yg)("p",null,"If you plan to distribute the load of connections among different processes or machines, you have to make sure that all requests associated with a particular session ID reach the process that originated them."),(0,o.yg)("h3",{id:"why-is-sticky-session-required"},"Why is sticky-session required"),(0,o.yg)("p",null,"This is because the HTTP long-polling transport sends multiple HTTP requests during the lifetime of the Socket.IO session."),(0,o.yg)("p",null,"In fact, Socket.IO could technically work without sticky sessions, with the following synchronization (in dashed lines):"),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"Using multiple nodes without sticky sessions",src:n(8862).A,width:"1271",height:"620"})),(0,o.yg)("p",null,"While obviously possible to implement, we think that this synchronization process between the Socket.IO servers would result in a big performance hit for your application."),(0,o.yg)("p",null,"Remarks:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},'without enabling sticky-session, you will experience HTTP 400 errors due to "Session ID unknown"'),(0,o.yg)("li",{parentName:"ul"},"the WebSocket transport does not have this limitation, since it relies on a single TCP connection for the whole session. Which means that if you disable the HTTP long-polling transport (which is a perfectly valid choice in 2021), you won't need sticky sessions:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},'const socket = io("https://io.yourhost.com", {\n  // WARNING: in that case, there is no fallback to long-polling\n  transports: [ "websocket" ] // or [ "websocket", "polling" ] (the order matters)\n});\n')),(0,o.yg)("p",null,"Documentation: ",(0,o.yg)("a",{parentName:"p",href:"/docs/v3/client-initialization/#transports"},(0,o.yg)("inlineCode",{parentName:"a"},"transports"))),(0,o.yg)("h3",{id:"enabling-sticky-session"},"Enabling sticky-session"),(0,o.yg)("p",null,"To achieve sticky-session, there are two main solutions:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"routing clients based on a cookie (recommended solution)"),(0,o.yg)("li",{parentName:"ul"},"routing clients based on their originating address")),(0,o.yg)("p",null,"You will find below some examples with common load-balancing solutions:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"#NginX-configuration"},"NginX")," (IP-based)"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"#Apache-HTTPD-configuration"},"Apache HTTPD")," (cookie-based)"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"#HAProxy-configuration"},"HAProxy")," (cookie-based)"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"#Traefik"},"Traefik")," (cookie-based)"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"#Using-Node-js-Cluster"},"Node.js ",(0,o.yg)("inlineCode",{parentName:"a"},"cluster")," module"))),(0,o.yg)("p",null,"For other platforms, please refer to the relevant documentation:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Kubernetes: ",(0,o.yg)("a",{parentName:"li",href:"https://kubernetes.github.io/ingress-nginx/examples/affinity/cookie/"},"https://kubernetes.github.io/ingress-nginx/examples/affinity/cookie/")),(0,o.yg)("li",{parentName:"ul"},"AWS (Application Load Balancers): ",(0,o.yg)("a",{parentName:"li",href:"https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-target-groups.html#sticky-sessions"},"https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-target-groups.html#sticky-sessions")),(0,o.yg)("li",{parentName:"ul"},"GCP: ",(0,o.yg)("a",{parentName:"li",href:"https://cloud.google.com/load-balancing/docs/backend-service#session_affinity"},"https://cloud.google.com/load-balancing/docs/backend-service#session_affinity")),(0,o.yg)("li",{parentName:"ul"},"Heroku: ",(0,o.yg)("a",{parentName:"li",href:"https://devcenter.heroku.com/articles/session-affinity"},"https://devcenter.heroku.com/articles/session-affinity"))),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Important note"),": if you are in a CORS situation (the front domain is different from the server domain) and session affinity is achieved with a cookie, you need to allow credentials:"),(0,o.yg)("p",null,(0,o.yg)("em",{parentName:"p"},"Server")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},'const io = require("socket.io")(httpServer, {\n  cors: {\n    origin: "https://front-domain.com",\n    methods: ["GET", "POST"],\n    credentials: true\n  }\n});\n')),(0,o.yg)("p",null,(0,o.yg)("em",{parentName:"p"},"Client")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},'const io = require("socket.io-client");\nconst socket = io("https://server-domain.com", {\n  withCredentials: true\n});\n')),(0,o.yg)("p",null,'Without it, the cookie will not be sent by the browser and you will experience HTTP 400 "Session ID unknown" responses. More information ',(0,o.yg)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials"},"here"),"."),(0,o.yg)("h3",{id:"nginx-configuration"},"NginX configuration"),(0,o.yg)("p",null,"Within the ",(0,o.yg)("inlineCode",{parentName:"p"},"http { }")," section of your ",(0,o.yg)("inlineCode",{parentName:"p"},"nginx.conf")," file, you can declare a ",(0,o.yg)("inlineCode",{parentName:"p"},"upstream")," section with a list of Socket.IO process you want to balance load between:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-nginx"},'http {\n  server {\n    listen 3000;\n    server_name io.yourhost.com;\n\n    location / {\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_set_header Host $host;\n\n      proxy_pass http://nodes;\n\n      # enable WebSockets\n      proxy_http_version 1.1;\n      proxy_set_header Upgrade $http_upgrade;\n      proxy_set_header Connection "upgrade";\n    }\n  }\n\n  upstream nodes {\n    # enable sticky session with either "hash" (uses the complete IP address)\n    hash $remote_addr consistent;\n    # or "ip_hash" (uses the first three octets of the client IPv4 address, or the entire IPv6 address)\n    # ip_hash;\n    # or "sticky" (needs commercial subscription)\n    # sticky cookie srv_id expires=1h domain=.example.com path=/;\n\n    server app01:3000;\n    server app02:3000;\n    server app03:3000;\n  }\n}\n')),(0,o.yg)("p",null,"Notice the ",(0,o.yg)("inlineCode",{parentName:"p"},"hash")," instruction that indicates the connections will be sticky."),(0,o.yg)("p",null,"Make sure you also configure ",(0,o.yg)("inlineCode",{parentName:"p"},"worker_processes")," in the topmost level to indicate how many workers NginX should use. You might also want to look into tweaking the ",(0,o.yg)("inlineCode",{parentName:"p"},"worker_connections")," setting within the ",(0,o.yg)("inlineCode",{parentName:"p"},"events { }")," block."),(0,o.yg)("p",null,"Links:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://github.com/socketio/socket.io/tree/master/examples/cluster-nginx"},"Example")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"http://nginx.org/en/docs/http/ngx_http_upstream_module.html#hash"},"NginX Documentation"))),(0,o.yg)("h3",{id:"apache-httpd-configuration"},"Apache HTTPD configuration"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-apache"},'Header add Set-Cookie "SERVERID=sticky.%{BALANCER_WORKER_ROUTE}e; path=/" env=BALANCER_ROUTE_CHANGED\n\n<Proxy "balancer://nodes_polling">\n    BalancerMember "http://app01:3000" route=app01\n    BalancerMember "http://app02:3000" route=app02\n    BalancerMember "http://app03:3000" route=app03\n    ProxySet stickysession=SERVERID\n</Proxy>\n\n<Proxy "balancer://nodes_ws">\n    BalancerMember "ws://app01:3000" route=app01\n    BalancerMember "ws://app02:3000" route=app02\n    BalancerMember "ws://app03:3000" route=app03\n    ProxySet stickysession=SERVERID\n</Proxy>\n\nRewriteEngine On\nRewriteCond %{HTTP:Upgrade} =websocket [NC]\nRewriteRule /(.*) balancer://nodes_ws/$1 [P,L]\nRewriteCond %{HTTP:Upgrade} !=websocket [NC]\nRewriteRule /(.*) balancer://nodes_polling/$1 [P,L]\n\nProxyTimeout 3\n')),(0,o.yg)("p",null,"Links:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://github.com/socketio/socket.io/tree/master/examples/cluster-httpd"},"Example")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://httpd.apache.org/docs/2.4/en/mod/mod_proxy.html#proxypass"},"Documentation"))),(0,o.yg)("h3",{id:"haproxy-configuration"},"HAProxy configuration"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"# Reference: http://blog.haproxy.com/2012/11/07/websockets-load-balancing-with-haproxy/\n\nlisten chat\n  bind *:80\n  default_backend nodes\n\nbackend nodes\n  option httpchk HEAD /health\n  http-check expect status 200\n  cookie io prefix indirect nocache # using the `io` cookie set upon handshake\n  server app01 app01:3000 check cookie app01\n  server app02 app02:3000 check cookie app02\n  server app03 app03:3000 check cookie app03\n")),(0,o.yg)("p",null,"Links:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://github.com/socketio/socket.io/tree/master/examples/cluster-haproxy"},"Example")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"http://cbonte.github.io/haproxy-dconv/2.4/configuration.html#cookie"},"Documentation"))),(0,o.yg)("h3",{id:"traefik"},"Traefik"),(0,o.yg)("p",null,"Using container labels:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-yaml"},'# docker-compose.yml\nservices:\n  traefik:\n    image: traefik:2.4\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    links:\n      - server\n\n  server:\n    image: my-image:latest\n    labels:\n      - "traefik.http.routers.my-service.rule=PathPrefix(`/`)"\n      - traefik.http.services.my-service.loadBalancer.sticky.cookie.name=server_id\n      - traefik.http.services.my-service.loadBalancer.sticky.cookie.httpOnly=true\n')),(0,o.yg)("p",null,"With the ",(0,o.yg)("a",{parentName:"p",href:"https://doc.traefik.io/traefik/v2.0/providers/file/"},"File provider"),":"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-yaml"},'## Dynamic configuration\nhttp:\n  services:\n    my-service:\n      rule: "PathPrefix(`/`)"\n      loadBalancer:\n        sticky:\n          cookie:\n            name: server_id\n            httpOnly: true\n')),(0,o.yg)("p",null,"Links:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://github.com/socketio/socket.io/tree/master/examples/cluster-traefik"},"Example")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://doc.traefik.io/traefik/v2.0/routing/services/#sticky-sessions"},"Documentation"))),(0,o.yg)("h3",{id:"using-nodejs-cluster"},"Using Node.js Cluster"),(0,o.yg)("p",null,"Just like NginX, Node.js comes with built-in clustering support through the ",(0,o.yg)("inlineCode",{parentName:"p"},"cluster")," module."),(0,o.yg)("p",null,"There are several solutions, depending on your use case:"),(0,o.yg)("table",null,(0,o.yg)("thead",{parentName:"table"},(0,o.yg)("tr",{parentName:"thead"},(0,o.yg)("th",{parentName:"tr",align:"center"},"NPM package"),(0,o.yg)("th",{parentName:"tr",align:null},"How it works"))),(0,o.yg)("tbody",{parentName:"table"},(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:"center"},(0,o.yg)("a",{parentName:"td",href:"https://github.com/darrachequesne/socket.io-sticky"},(0,o.yg)("inlineCode",{parentName:"a"},"@socket.io/sticky"))),(0,o.yg)("td",{parentName:"tr",align:null},"the routing is based on the ",(0,o.yg)("inlineCode",{parentName:"td"},"sid")," query parameter")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:"center"},(0,o.yg)("a",{parentName:"td",href:"https://github.com/indutny/sticky-session"},(0,o.yg)("inlineCode",{parentName:"a"},"sticky-session"))),(0,o.yg)("td",{parentName:"tr",align:null},"the routing is based on ",(0,o.yg)("inlineCode",{parentName:"td"},"connection.remoteAddress"))),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:"center"},(0,o.yg)("a",{parentName:"td",href:"https://github.com/wzrdtales/socket-io-sticky-session"},(0,o.yg)("inlineCode",{parentName:"a"},"socketio-sticky-session"))),(0,o.yg)("td",{parentName:"tr",align:null},"the routing based on the ",(0,o.yg)("inlineCode",{parentName:"td"},"x-forwarded-for")," header)")))),(0,o.yg)("p",null,"Example with ",(0,o.yg)("inlineCode",{parentName:"p"},"@socket.io/sticky"),":"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},'const cluster = require("cluster");\nconst http = require("http");\nconst { Server } = require("socket.io");\nconst redisAdapter = require("socket.io-redis");\nconst numCPUs = require("os").cpus().length;\nconst { setupMaster, setupWorker } = require("@socket.io/sticky");\n\nif (cluster.isMaster) {\n  console.log(`Master ${process.pid} is running`);\n\n  const httpServer = http.createServer();\n  setupMaster(httpServer, {\n    loadBalancingMethod: "least-connection", // either "random", "round-robin" or "least-connection"\n  });\n  httpServer.listen(3000);\n\n  for (let i = 0; i < numCPUs; i++) {\n    cluster.fork();\n  }\n\n  cluster.on("exit", (worker) => {\n    console.log(`Worker ${worker.process.pid} died`);\n    cluster.fork();\n  });\n} else {\n  console.log(`Worker ${process.pid} started`);\n\n  const httpServer = http.createServer();\n  const io = new Server(httpServer);\n  io.adapter(redisAdapter({ host: "localhost", port: 6379 }));\n  setupWorker(io);\n\n  io.on("connection", (socket) => {\n    /* ... */\n  });\n}\n')),(0,o.yg)("h2",{id:"passing-events-between-nodes"},"Passing events between nodes"),(0,o.yg)("h3",{id:"the-redis-adapter"},"The Redis adapter"),(0,o.yg)("p",null,"Now that you have multiple Socket.IO nodes accepting connections, if you want to broadcast events to all clients (or to the clients in a certain ",(0,o.yg)("a",{parentName:"p",href:"/docs/v3/rooms/"},"room"),") you","\u2019","ll need some way of passing messages between processes or computers."),(0,o.yg)("p",null,"The interface in charge of routing messages is what we call the ",(0,o.yg)("a",{parentName:"p",href:"/docs/v3/glossary/#Adapter"},"Adapter"),". You can implement your own on top of the ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/socketio/socket.io-adapter"},"socket.io-adapter")," (by inheriting from it) or you can use the one we provide on top of ",(0,o.yg)("a",{parentName:"p",href:"https://redis.io/"},"Redis"),": ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/socketio/socket.io-redis"},"socket.io-redis"),":"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},'const io = require("socket.io")(3000);\nconst redis = require("socket.io-redis");\nio.adapter(redis({ host: "localhost", port: 6379 }));\n')),(0,o.yg)("p",null,"Then the following call:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},'io.emit("hi", "all sockets");\n')),(0,o.yg)("p",null,"will be broadcast to every clients through the ",(0,o.yg)("a",{parentName:"p",href:"https://redis.io/topics/pubsub"},"Pub/Sub mechanism")," of Redis:"),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"Broadcasting with Redis",src:n(2013).A,width:"913",height:"629"})),(0,o.yg)("h3",{id:"sending-messages-from-the-outside-world"},"Sending messages from the outside world"),(0,o.yg)("p",null,"Using the Redis adapter has another benefit: you can now emit events from outside the context of your Socket.IO processes."),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"Diagram with Redis adapter and external emitter",src:n(3286).A,width:"1134",height:"702"})),(0,o.yg)("p",null,"This emitter is available in several languages:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Javascript: ",(0,o.yg)("a",{parentName:"li",href:"https://github.com/socketio/socket.io-emitter"},"https://github.com/socketio/socket.io-emitter")),(0,o.yg)("li",{parentName:"ul"},"Java: ",(0,o.yg)("a",{parentName:"li",href:"https://github.com/sunsus/socket.io-java-emitter"},"https://github.com/sunsus/socket.io-java-emitter")),(0,o.yg)("li",{parentName:"ul"},"Python: ",(0,o.yg)("a",{parentName:"li",href:"https://pypi.org/project/socket.io-emitter/"},"https://pypi.org/project/socket.io-emitter/")),(0,o.yg)("li",{parentName:"ul"},"PHP: ",(0,o.yg)("a",{parentName:"li",href:"https://github.com/rase-/socket.io-php-emitter"},"https://github.com/rase-/socket.io-php-emitter")),(0,o.yg)("li",{parentName:"ul"},"Golang: ",(0,o.yg)("a",{parentName:"li",href:"https://github.com/yosuke-furukawa/socket.io-go-emitter"},"https://github.com/yosuke-furukawa/socket.io-go-emitter")),(0,o.yg)("li",{parentName:"ul"},"Perl: ",(0,o.yg)("a",{parentName:"li",href:"https://metacpan.org/pod/SocketIO::Emitter"},"https://metacpan.org/pod/SocketIO::Emitter")),(0,o.yg)("li",{parentName:"ul"},"Rust: ",(0,o.yg)("a",{parentName:"li",href:"https://github.com/epli2/socketio-rust-emitter"},"https://github.com/epli2/socketio-rust-emitter"))))}u.isMDXComponent=!0},2013:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/broadcasting-redis-05376940825ca6ccee0d45146c707e4e.png"},8862:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/mutiple-nodes-no-sticky-babd7860f217e09eefc2db73e5012f91.png"},3286:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/redis-emitter-bb6fdc8a37bedbc5fac60a1118c09214.png"}}]);