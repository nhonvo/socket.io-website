"use strict";(self.webpackChunksample_website=self.webpackChunksample_website||[]).push([[1833],{5680:(e,a,t)=>{t.d(a,{xA:()=>c,yg:()=>d});var n=t(6540);function s(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function r(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?i(Object(t),!0).forEach((function(a){s(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function g(e,a){if(null==e)return{};var t,n,s=function(e,a){if(null==e)return{};var t,n,s={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||(s[t]=e[t]);return s}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var l=n.createContext({}),o=function(e){var a=n.useContext(l),t=a;return e&&(t="function"==typeof e?e(a):r(r({},a),e)),t},c=function(e){var a=o(e.components);return n.createElement(l.Provider,{value:a},e.children)},h="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},u=n.forwardRef((function(e,a){var t=e.components,s=e.mdxType,i=e.originalType,l=e.parentName,c=g(e,["components","mdxType","originalType","parentName"]),h=o(t),u=s,d=h["".concat(l,".").concat(u)]||h[u]||m[u]||i;return t?n.createElement(d,r(r({ref:a},c),{},{components:t})):n.createElement(d,r({ref:a},c))}));function d(e,a){var t=arguments,s=a&&a.mdxType;if("string"==typeof e||s){var i=t.length,r=new Array(i);r[0]=u;var g={};for(var l in a)hasOwnProperty.call(a,l)&&(g[l]=a[l]);g.originalType=e,g[h]="string"==typeof e?e:s,r[1]=g;for(var o=2;o<i;o++)r[o]=t[o];return n.createElement.apply(null,r)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5391:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>g,toc:()=>o});var n=t(8168),s=(t(6540),t(5680));const i={layout:"post",title:"Git command",subtitle:"cheatsheet",date:new Date("2023-12-29T12:00:00.000Z"),author:"Truong Nhon",hidden:!1,published:!0,multilingual:!1,catalog:!0,lang:"en",tags:["git","cheatsheat"]},r=void 0,g={permalink:"/2023/12/29/git-cheatsheet",editUrl:"https://github.com/nhonvo/nhonvo.github.io/edit/main/blog/blog/2023-12-29-git-cheatsheet.md",source:"@site/blog/2023-12-29-git-cheatsheet.md",title:"Git command",description:"Git Basics",date:"2023-12-29T12:00:00.000Z",formattedDate:"December 29, 2023",tags:[{label:"git",permalink:"/tags/git"},{label:"cheatsheat",permalink:"/tags/cheatsheat"}],readingTime:1.715,hasTruncateMarker:!1,authors:[{name:"Truong Nhon"}],frontMatter:{layout:"post",title:"Git command",subtitle:"cheatsheet",date:"2023-12-29T12:00:00.000Z",author:"Truong Nhon",hidden:!1,published:!0,multilingual:!1,catalog:!0,lang:"en",tags:["git","cheatsheat"]},prevItem:{title:"docker command",permalink:"/2023/12/29/docker-cheatsheet"},nextItem:{title:"dotnet command cheatsheat",permalink:"/2023/12/29/net-cheatsheet"}},l={authorsImageUrls:[void 0]},o=[{value:"Git Basics",id:"git-basics",level:2},{value:"Staging and Commits",id:"staging-and-commits",level:2},{value:"Branching",id:"branching",level:2},{value:"Remote Repositories",id:"remote-repositories",level:2},{value:"Logging and History",id:"logging-and-history",level:2},{value:"Miscellaneous",id:"miscellaneous",level:2},{value:"Cherry-pick",id:"cherry-pick",level:2},{value:"Rebase",id:"rebase",level:2},{value:"Squash Commits during Rebase",id:"squash-commits-during-rebase",level:2},{value:"Amend the Last Commit",id:"amend-the-last-commit",level:2},{value:"Stash Changes",id:"stash-changes",level:2},{value:"Apply Stashed Changes",id:"apply-stashed-changes",level:2},{value:"View Stash List",id:"view-stash-list",level:2},{value:"Show Differences with Stash",id:"show-differences-with-stash",level:2},{value:"Discard Stashed Changes",id:"discard-stashed-changes",level:2},{value:"Tagging",id:"tagging",level:2},{value:"Submodules",id:"submodules",level:2},{value:"Git Configurations",id:"git-configurations",level:2},{value:"Show Configurations",id:"show-configurations",level:2}],c={toc:o},h="wrapper";function m(e){let{components:a,...t}=e;return(0,s.yg)(h,(0,n.A)({},c,t,{components:a,mdxType:"MDXLayout"}),(0,s.yg)("h2",{id:"git-basics"},"Git Basics"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-bash"},"git init\ngit clone <repository_url>\ngit status\n")),(0,s.yg)("h2",{id:"staging-and-commits"},"Staging and Commits"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-bash"},'git add <file(s)>\ngit commit -m "Commit message"\ngit reset --soft HEAD^  // Undo Last Commit (Keep Changes)\ngit reset --hard HEAD^  // Undo Last Commit (Discard Changes)\n')),(0,s.yg)("h2",{id:"branching"},"Branching"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-bash"},"git branch <branch_name>\ngit checkout <branch_name>\ngit checkout -b <branch_name>\ngit merge <branch_name>\ngit branch -d <branch_name>\n")),(0,s.yg)("h2",{id:"remote-repositories"},"Remote Repositories"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-bash"},"git remote add <remote_name> <repository_url>\ngit push <remote_name> <branch_name>\ngit pull <remote_name> <branch_name>\n")),(0,s.yg)("h2",{id:"logging-and-history"},"Logging and History"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-bash"},"git log\ngit show <commit_hash>\ngit diff\n")),(0,s.yg)("h2",{id:"miscellaneous"},"Miscellaneous"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-bash"},"touch .gitignore  // Ignore Files (Create .gitignore)\ngit checkout -- <file(s)>  // Undo Changes in Working Directory\ngit reset HEAD <file(s)>  // Undo Staged Changes\n")),(0,s.yg)("h2",{id:"cherry-pick"},"Cherry-pick"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-bash"},"git cherry-pick <commit_hash>\n")),(0,s.yg)("h2",{id:"rebase"},"Rebase"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-bash"},"git rebase <base_branch>\ngit rebase -i <base_branch>  // Interactive rebase\n")),(0,s.yg)("h2",{id:"squash-commits-during-rebase"},"Squash Commits during Rebase"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-bash"},'// Change "pick" to "squash" for the commits you want to squash\n// Follow on-screen instructions to edit the commit messages\ngit rebase -i <base_branch>\n')),(0,s.yg)("h2",{id:"amend-the-last-commit"},"Amend the Last Commit"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-bash"},"git commit --amend\n")),(0,s.yg)("h2",{id:"stash-changes"},"Stash Changes"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-bash"},'git stash\ngit stash save "Stash message"\n')),(0,s.yg)("h2",{id:"apply-stashed-changes"},"Apply Stashed Changes"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-bash"},"git stash apply\ngit stash pop  // Apply and remove from stash\n")),(0,s.yg)("h2",{id:"view-stash-list"},"View Stash List"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-bash"},"git stash list\n")),(0,s.yg)("h2",{id:"show-differences-with-stash"},"Show Differences with Stash"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-bash"},"git stash show -p <stash_id>\n")),(0,s.yg)("h2",{id:"discard-stashed-changes"},"Discard Stashed Changes"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-bash"},"git stash drop <stash_id>\ngit stash clear  // Remove all stashes\n")),(0,s.yg)("h2",{id:"tagging"},"Tagging"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-bash"},'git tag <tag_name>  // Create lightweight tag\ngit tag -a <tag_name> -m "Tag message"  // Create annotated tag\ngit push origin <tag_name>  // Push tag to remote\n')),(0,s.yg)("h2",{id:"submodules"},"Submodules"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-bash"},"git submodule add <repository_url> <path>  // Add submodule\ngit submodule update --init --recursive  // Initialize submodules\ngit submodule foreach git pull origin master  // Update submodules\n")),(0,s.yg)("h2",{id:"git-configurations"},"Git Configurations"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-bash"},'git config --global user.name "Your Name"\ngit config --global user.email "your@email.com"\n')),(0,s.yg)("h2",{id:"show-configurations"},"Show Configurations"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-bash"},"git config --list\n")))}m.isMDXComponent=!0}}]);