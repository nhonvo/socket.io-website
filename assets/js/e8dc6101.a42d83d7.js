"use strict";(self.webpackChunksample_website=self.webpackChunksample_website||[]).push([[5121],{5680:(e,n,t)=>{t.d(n,{xA:()=>m,yg:()=>p});var r=t(6540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=s(t),g=a,p=u["".concat(c,".").concat(g)]||u[g]||d[g]||o;return t?r.createElement(p,i(i({ref:n},m),{},{components:t})):r.createElement(p,i({ref:n},m))}));function p(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=g;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},8659:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=t(8168),a=(t(6540),t(5680));const o={layout:"post",title:"docker command",subtitle:"cheatsheet",date:new Date("2023-12-29T12:00:00.000Z"),author:"Truong Nhon",hidden:!1,published:!0,multilingual:!1,catalog:!0,lang:"en",tags:["docker","cheatsheat"]},i=void 0,l={permalink:"/2023/12/29/docker-cheatsheet",editUrl:"https://github.com/nhonvo/nhonvo.github.io/edit/main/blog/blog/2023-12-29-docker-cheatsheet.md",source:"@site/blog/2023-12-29-docker-cheatsheet.md",title:"docker command",description:"Images",date:"2023-12-29T12:00:00.000Z",formattedDate:"December 29, 2023",tags:[{label:"docker",permalink:"/tags/docker"},{label:"cheatsheat",permalink:"/tags/cheatsheat"}],readingTime:1.325,hasTruncateMarker:!1,authors:[{name:"Truong Nhon"}],frontMatter:{layout:"post",title:"docker command",subtitle:"cheatsheet",date:"2023-12-29T12:00:00.000Z",author:"Truong Nhon",hidden:!1,published:!0,multilingual:!1,catalog:!0,lang:"en",tags:["docker","cheatsheat"]},prevItem:{title:"gitflow-and-githubflow",permalink:"/2023/12/31/gitflow-and-githubflow"},nextItem:{title:"Git command",permalink:"/2023/12/29/git-cheatsheet"}},c={authorsImageUrls:[void 0]},s=[{value:"Images",id:"images",level:2},{value:"Containers",id:"containers",level:2},{value:"Volumes",id:"volumes",level:2},{value:"Networks",id:"networks",level:2},{value:"Compose",id:"compose",level:2},{value:"Registry",id:"registry",level:2},{value:"System",id:"system",level:2},{value:"Dockerize Applications",id:"dockerize-applications",level:2}],m={toc:s},u="wrapper";function d(e){let{components:n,...t}=e;return(0,a.yg)(u,(0,r.A)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h2",{id:"images"},"Images"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"docker images                   # List all images\ndocker pull <image_name>         # Pull an image from Docker Hub\ndocker build -t <image_name> .   # Build an image from the current directory\ndocker rmi <image_id>            # Remove an image\n")),(0,a.yg)("h2",{id:"containers"},"Containers"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"docker ps                       # List running containers\ndocker ps -a                    # List all containers\ndocker run <image_name>         # Create and start a container\ndocker exec -it <container_id> bash   # Access a running container's shell\ndocker stop <container_id>      # Stop a running container\ndocker rm <container_id>        # Remove a container\n")),(0,a.yg)("h2",{id:"volumes"},"Volumes"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"docker volume ls                # List all volumes\ndocker volume create <volume_name>  # Create a volume\ndocker run -v <volume_name>:/path/in/container <image_name>   # Mount a volume to a container\n")),(0,a.yg)("h2",{id:"networks"},"Networks"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"docker network ls               # List all networks\ndocker network create <network_name>  # Create a network\ndocker run --network=<network_name> <image_name>   # Connect a container to a network\n")),(0,a.yg)("h2",{id:"compose"},"Compose"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"docker-compose up               # Start services defined in a docker-compose.yml\ndocker-compose down             # Stop and remove services defined in a docker-compose.yml\n")),(0,a.yg)("h2",{id:"registry"},"Registry"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"docker login                    # Log in to a Docker registry\ndocker push <image_name>         # Push an image to a registry\ndocker pull <registry>/<image_name>  # Pull an image from a registry\n")),(0,a.yg)("h2",{id:"system"},"System"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"docker info                     # Display system-wide information\ndocker version                  # Show the Docker version\ndocker system prune             # Remove all stopped containers, unused networks, and dangling images\n")),(0,a.yg)("h2",{id:"dockerize-applications"},"Dockerize Applications"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"docker build -t <image_name> .         # Build a Docker image\ndocker run -p <host_port>:<container_port> <image_name>   # Run a Docker container\n")))}d.isMDXComponent=!0}}]);