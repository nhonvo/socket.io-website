"use strict";(self.webpackChunksample_website=self.webpackChunksample_website||[]).push([[6531],{5680:(e,n,t)=>{t.d(n,{xA:()=>l,yg:()=>y});var r=t(6540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),p=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=p(e.components);return r.createElement(c.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),m=p(t),g=a,y=m["".concat(c,".").concat(g)]||m[g]||u[g]||o;return t?r.createElement(y,i(i({ref:n},l),{},{components:t})):r.createElement(y,i({ref:n},l))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=g;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[m]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},61:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=t(8168),a=(t(6540),t(5680));const o={title:"TypeScript",sidebar_position:8,slug:"/typescript/"},i=void 0,s={unversionedId:"categories/Documentation/typescript",id:"categories/Documentation/typescript",title:"TypeScript",description:"Starting with v3, Socket.IO now has first class support for TypeScript.",source:"@site/docs/categories/01-Documentation/typescript.md",sourceDirName:"categories/01-Documentation",slug:"/typescript/",permalink:"/docs/v4/typescript/",draft:!1,editUrl:"https://github.com/socketio/nhonvo.github.io/edit/main/docs/categories/01-Documentation/typescript.md",tags:[],version:"current",lastUpdatedAt:1696943779,formattedLastUpdatedAt:"Oct 10, 2023",sidebarPosition:8,frontMatter:{title:"TypeScript",sidebar_position:8,slug:"/typescript/"},sidebar:"sidebar",previous:{title:"Troubleshooting",permalink:"/docs/v4/troubleshooting-connection-issues/"},next:{title:"Memory usage",permalink:"/docs/v4/memory-usage/"}},c={},p=[{value:"Types for the server",id:"types-for-the-server",level:2},{value:"Types for the client",id:"types-for-the-client",level:2},{value:"Custom types for each namespace",id:"custom-types-for-each-namespace",level:2}],l={toc:p},m="wrapper";function u(e){let{components:n,...t}=e;return(0,a.yg)(m,(0,r.A)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"Starting with v3, Socket.IO now has first class support for ",(0,a.yg)("a",{parentName:"p",href:"https://www.typescriptlang.org/"},"TypeScript"),"."),(0,a.yg)("h2",{id:"types-for-the-server"},"Types for the server"),(0,a.yg)("p",null,"First, declare some types:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"interface ServerToClientEvents {\n  noArg: () => void;\n  basicEmit: (a: number, b: string, c: Buffer) => void;\n  withAck: (d: string, callback: (e: number) => void) => void;\n}\n\ninterface ClientToServerEvents {\n  hello: () => void;\n}\n\ninterface InterServerEvents {\n  ping: () => void;\n}\n\ninterface SocketData {\n  name: string;\n  age: number;\n}\n")),(0,a.yg)("p",null,"And use them when creating your server:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"const io = new Server<\n  ClientToServerEvents,\n  ServerToClientEvents,\n  InterServerEvents,\n  SocketData\n>();\n")),(0,a.yg)("p",null,"Then, profit from the help of your IDE!"),(0,a.yg)("p",null,"The events declared in the ",(0,a.yg)("inlineCode",{parentName:"p"},"ServerToClientEvents")," interface are used when sending and broadcasting events:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},'io.on("connection", (socket) => {\n  socket.emit("noArg");\n  socket.emit("basicEmit", 1, "2", Buffer.from([3]));\n  socket.emit("withAck", "4", (e) => {\n    // e is inferred as number\n  });\n\n  // works when broadcast to all\n  io.emit("noArg");\n\n  // works when broadcasting to a room\n  io.to("room1").emit("basicEmit", 1, "2", Buffer.from([3]));\n});\n')),(0,a.yg)("p",null,"The ones declared in the ",(0,a.yg)("inlineCode",{parentName:"p"},"ClientToServerEvents")," interface are used when receiving events:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},'io.on("connection", (socket) => {\n  socket.on("hello", () => {\n    // ...\n  });\n});\n')),(0,a.yg)("p",null,"The ones declared in the ",(0,a.yg)("inlineCode",{parentName:"p"},"InterServerEvents")," interface are used for inter-server communication (added in ",(0,a.yg)("inlineCode",{parentName:"p"},"socket.io@4.1.0"),"):"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},'io.serverSideEmit("ping");\n\nio.on("ping", () => {\n  // ...\n});\n')),(0,a.yg)("p",null,"And finally, the ",(0,a.yg)("inlineCode",{parentName:"p"},"SocketData")," type is used to type the ",(0,a.yg)("inlineCode",{parentName:"p"},"socket.data")," attribute (added in ",(0,a.yg)("inlineCode",{parentName:"p"},"socket.io@4.4.0"),"):"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},'io.on("connection", (socket) => {\n  socket.data.name = "john";\n  socket.data.age = 42;\n});\n')),(0,a.yg)("admonition",{type:"caution"},(0,a.yg)("p",{parentName:"admonition"},"These type hints do not replace proper validation/sanitization of the input. As usual, never trust user input.")),(0,a.yg)("h2",{id:"types-for-the-client"},"Types for the client"),(0,a.yg)("p",null,"On the client side, you can reuse the same ",(0,a.yg)("inlineCode",{parentName:"p"},"ServerToClientEvents")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"ClientToServerEvents")," interfaces:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},'import { io, Socket } from "socket.io-client";\n\n// please note that the types are reversed\nconst socket: Socket<ServerToClientEvents, ClientToServerEvents> = io();\n')),(0,a.yg)("p",null,"Similarly, the events declared in the ",(0,a.yg)("inlineCode",{parentName:"p"},"ClientToServerEvents")," interface are used when sending events:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},'socket.emit("hello");\n')),(0,a.yg)("p",null,"And the ones declared in ",(0,a.yg)("inlineCode",{parentName:"p"},"ServerToClientEvents")," are used when receiving events:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},'socket.on("noArg", () => {\n  // ...\n});\n\nsocket.on("basicEmit", (a, b, c) => {\n  // a is inferred as number, b as string and c as buffer\n});\n\nsocket.on("withAck", (d, callback) => {\n  // d is inferred as string and callback as a function that takes a number as argument\n});\n')),(0,a.yg)("h2",{id:"custom-types-for-each-namespace"},"Custom types for each namespace"),(0,a.yg)("p",null,"Since each ",(0,a.yg)("a",{parentName:"p",href:"/docs/v4/namespaces/"},"Namespace")," can have its own set of events, you can also provide some types for\neach one of them:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},'import { Server } from "socket.io";\n\n// types for the main namespace\nconst io = new Server<ClientToServerEvents, ServerToClientEvents, InterServerEvents, SocketData>();\n\n// types for the namespace named "/my-namespace"\ninterface NamespaceSpecificClientToServerEvents {\n  foo: (arg: string) => void\n}\n\ninterface NamespaceSpecificServerToClientEvents {\n  bar: (arg: string) => void;\n}\n\ninterface NamespaceSpecificInterServerEvents {\n  // ...\n}\n\ninterface NamespaceSpecificSocketData {\n  // ...\n}\n\nconst myNamespace: Namespace<\n  NamespaceSpecificClientToServerEvents,\n  NamespaceSpecificServerToClientEvents,\n  NamespaceSpecificInterServerEvents,\n  NamespaceSpecificSocketData\n  > = io.of("/my-namespace");\n\nmyNamespace.on("connection", (socket) => {\n  socket.on("foo", () => {\n    // ...\n  });\n\n  socket.emit("bar", "123");\n});\n')),(0,a.yg)("p",null,"And on the client side:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},'import { io, Socket } from "socket.io-client";\n\nconst socket: Socket<\n  NamespaceSpecificServerToClientEvents,\n  NamespaceSpecificClientToServerEvents\n  > = io("/my-namespace");\n\nsocket.on("bar", (arg) => {\n  console.log(arg); // "123"\n});\n')))}u.isMDXComponent=!0}}]);