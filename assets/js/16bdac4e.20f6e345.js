"use strict";(self.webpackChunksample_website=self.webpackChunksample_website||[]).push([[8401],{5680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>m});var a=t(6540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},g="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),g=c(t),d=r,m=g["".concat(l,".").concat(d)]||g[d]||u[d]||s;return t?a.createElement(m,i(i({ref:n},p),{},{components:t})):a.createElement(m,i({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,i=new Array(s);i[0]=d;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o[g]="string"==typeof e?e:r,i[1]=o;for(var c=2;c<s;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3295:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>i,default:()=>g,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var a=t(8168),r=(t(6540),t(5680));const s={title:"Private messaging - Part I"},i="Private messaging - Part I",o={type:"mdx",permalink:"/socket.io-website/get-started/private-messaging-part-1",source:"@site/src/pages/get-started/private-messaging-part-1.md",title:"Private messaging - Part I",description:"In this guide we will create the following application:",frontMatter:{title:"Private messaging - Part I"}},l=[{value:"Installation",id:"installation",level:2},{value:"Running the frontend",id:"running-the-frontend",level:2},{value:"Running the server",id:"running-the-server",level:2},{value:"How it works",id:"how-it-works",level:2},{value:"Server initialization",id:"server-initialization",level:3},{value:"Client initialization",id:"client-initialization",level:3},{value:"Selection of the username",id:"selection-of-the-username",level:3},{value:"Listing all users",id:"listing-all-users",level:3},{value:"Private messaging",id:"private-messaging",level:3},{value:"Connection status",id:"connection-status",level:3},{value:"Review",id:"review",level:2}],c={toc:l},p="wrapper";function g(e){let{components:n,...s}=e;return(0,r.yg)(p,(0,a.A)({},c,s,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"private-messaging---part-i"},"Private messaging - Part I"),(0,r.yg)("p",null,"In this guide we will create the following application:"),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Chat",src:t(3107).A,width:"815",height:"763"})),(0,r.yg)("p",null,"We will cover the following topics:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/docs/v4/middlewares/"},"middlewares")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/docs/v4/rooms/"},"rooms")),(0,r.yg)("li",{parentName:"ul"},"scaling to ",(0,r.yg)("a",{parentName:"li",href:"/docs/v4/using-multiple-nodes/"},"multiple Socket.IO servers"))),(0,r.yg)("p",null,"Prerequisites:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"basic knowledge of Socket.IO"),(0,r.yg)("li",{parentName:"ul"},"basic knowledge of ",(0,r.yg)("a",{parentName:"li",href:"https://vuejs.org/v2/guide/"},"Vue.js")," (though knowledge of another popular frontend framework should work too)"),(0,r.yg)("li",{parentName:"ul"},"basic knowledge of ",(0,r.yg)("a",{parentName:"li",href:"https://redis.io/"},"Redis")," (for the final part)")),(0,r.yg)("p",null,"This guide has four distinct parts:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Part I ",(0,r.yg)("strong",{parentName:"li"},"(current)"),": initial implementation"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/get-started/private-messaging-part-2/"},"Part II"),": persistent user ID"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/get-started/private-messaging-part-3/"},"Part III"),": persistent messages"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/get-started/private-messaging-part-4/"},"Part IV"),": scaling up")),(0,r.yg)("p",null,"Let's start!"),(0,r.yg)("h2",{id:"installation"},"Installation"),(0,r.yg)("p",null,"First, let's retrieve the initial implementation of our chat application:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"git clone https://github.com/socketio/socket.io.git\ncd socket.io/examples/private-messaging\ngit checkout examples/private-messaging-part-1\n")),(0,r.yg)("p",null,"Here's what you should see in the current directory:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"\u251c\u2500\u2500 babel.config.js\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 public\n\u2502   \u251c\u2500\u2500 favicon.ico\n\u2502   \u251c\u2500\u2500 fonts\n\u2502   \u2502   \u2514\u2500\u2500 Lato-Regular.ttf\n\u2502   \u2514\u2500\u2500 index.html\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 server\n\u2502   \u251c\u2500\u2500 index.js\n\u2502   \u251c\u2500\u2500 package.json\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 App.vue\n    \u251c\u2500\u2500 components\n    \u2502   \u251c\u2500\u2500 Chat.vue\n    \u2502   \u251c\u2500\u2500 MessagePanel.vue\n    \u2502   \u251c\u2500\u2500 SelectUsername.vue\n    \u2502   \u251c\u2500\u2500 StatusIcon.vue\n    \u2502   \u2514\u2500\u2500 User.vue\n    \u251c\u2500\u2500 main.js\n    \u2514\u2500\u2500 socket.js\n")),(0,r.yg)("p",null,"The code for the frontend is located in the ",(0,r.yg)("inlineCode",{parentName:"p"},"src")," directory, while the code for the server is in the ",(0,r.yg)("inlineCode",{parentName:"p"},"server")," directory."),(0,r.yg)("h2",{id:"running-the-frontend"},"Running the frontend"),(0,r.yg)("p",null,"The project is a basic Vue.js application which was created with ",(0,r.yg)("inlineCode",{parentName:"p"},"@vue/cli"),"."),(0,r.yg)("p",null,"To run it:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"npm install\nnpm run serve\n")),(0,r.yg)("p",null,"Then if you open http://localhost:8080 in your browser, you should see:"),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Username selection",src:t(5740).A,width:"827",height:"776"})),(0,r.yg)("h2",{id:"running-the-server"},"Running the server"),(0,r.yg)("p",null,"Now, let's start the server:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"cd server\nnpm install\nnpm start\n")),(0,r.yg)("p",null,"Your console should print:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"server listening at http://localhost:3000\n")),(0,r.yg)("p",null,"So far, so good! You should be able to open several tabs and send a few messages between them:"),(0,r.yg)("img",{src:"/images/private-messaging-part-1-chat.gif",alt:"Chat"}),(0,r.yg)("h2",{id:"how-it-works"},"How it works"),(0,r.yg)("h3",{id:"server-initialization"},"Server initialization"),(0,r.yg)("p",null,"The Socket.IO server is initialized in the ",(0,r.yg)("inlineCode",{parentName:"p"},"server/index.js")," file:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'const httpServer = require("http").createServer();\nconst io = require("socket.io")(httpServer, {\n  cors: {\n    origin: "http://localhost:8080",\n  },\n});\n')),(0,r.yg)("p",null,"Here, we create a Socket.IO server and attach it to a Node.js HTTP server."),(0,r.yg)("p",null,"Documentation:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://nodejs.org/docs/latest/api/http.html"},"Node.js documentation")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/docs/v4/server-initialization/"},"Socket.IO server initialization"))),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"cors")," configuration is needed so that HTTP requests sent by the frontend (running at ",(0,r.yg)("inlineCode",{parentName:"p"},"http://localhost:8080"),") are allowed to reach the server (running at ",(0,r.yg)("inlineCode",{parentName:"p"},"http://localhost:3000"),", so we are in a cross-origin situation)."),(0,r.yg)("p",null,"Documentation:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"},"Cross-Origin Resource Sharing")," (CORS)"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/docs/v4/handling-cors/"},"Socket.IO CORS configuration"))),(0,r.yg)("h3",{id:"client-initialization"},"Client initialization"),(0,r.yg)("p",null,"The Socket.IO client is initialized in the ",(0,r.yg)("inlineCode",{parentName:"p"},"src/socket.js")," file:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'import { io } from "socket.io-client";\n\nconst URL = "http://localhost:3000";\nconst socket = io(URL, { autoConnect: false });\n\nexport default socket;\n')),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"autoConnect")," is set to ",(0,r.yg)("inlineCode",{parentName:"p"},"false")," so the connection is not established right away. We will manually call ",(0,r.yg)("a",{parentName:"p",href:"/docs/v4/client-api/#socket-connect"},(0,r.yg)("inlineCode",{parentName:"a"},"socket.connect()"))," later, once the user has selected a username."),(0,r.yg)("p",null,"Documentation: ",(0,r.yg)("a",{parentName:"p",href:"/docs/v4/client-initialization/"},"Socket.IO client initialization")),(0,r.yg)("p",null,"We also register a ",(0,r.yg)("a",{parentName:"p",href:"/docs/v4/listening-to-events/#Catch-all-listeners"},"catch-all listener"),", which is very useful during development:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"socket.onAny((event, ...args) => {\n  console.log(event, args);\n});\n")),(0,r.yg)("p",null,"So that any event received by the client will be printed in the console."),(0,r.yg)("h3",{id:"selection-of-the-username"},"Selection of the username"),(0,r.yg)("p",null,"Now, let's move to ",(0,r.yg)("inlineCode",{parentName:"p"},"src/App.vue"),":"),(0,r.yg)("p",null,"The application is started with ",(0,r.yg)("inlineCode",{parentName:"p"},"usernameAlreadySelected")," set to ",(0,r.yg)("inlineCode",{parentName:"p"},"false"),", so the form to select a username is displayed:"),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Username selection",src:t(5740).A,width:"827",height:"776"})),(0,r.yg)("p",null,"Once the form is submitted, we'll reach the ",(0,r.yg)("inlineCode",{parentName:"p"},"onUsernameSelection")," method:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"onUsernameSelection(username) {\n  this.usernameAlreadySelected = true;\n  socket.auth = { username };\n  socket.connect();\n}\n")),(0,r.yg)("p",null,"We attach the ",(0,r.yg)("inlineCode",{parentName:"p"},"username")," in the ",(0,r.yg)("inlineCode",{parentName:"p"},"auth")," object, and then call ",(0,r.yg)("inlineCode",{parentName:"p"},"socket.connect()"),"."),(0,r.yg)("p",null,"If you open your network tab in your developer tools, you should see a few HTTP requests:"),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Network monitor upon success",src:t(6029).A,width:"585",height:"216"})),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"the Engine.IO handshake (contains the session ID \u2014 here, ",(0,r.yg)("inlineCode",{parentName:"li"},"zBjrh...AAAK")," \u2014 that is used in subsequent requests)"),(0,r.yg)("li",{parentName:"ol"},"the Socket.IO handshake request (contains the value of the ",(0,r.yg)("inlineCode",{parentName:"li"},"auth")," option)"),(0,r.yg)("li",{parentName:"ol"},"the Socket.IO handshake response (contains the ",(0,r.yg)("a",{parentName:"li",href:"/docs/v4/server-socket-instance/#Socket-id"},"Socket#id"),")"),(0,r.yg)("li",{parentName:"ol"},"the WebSocket connection"),(0,r.yg)("li",{parentName:"ol"},"the first HTTP long-polling request, which is closed once the WebSocket connection is established")),(0,r.yg)("p",null,"If you see this, it means that the connection was successfully established."),(0,r.yg)("p",null,"On the server-side, we register a middleware which checks the username and allows the connection:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'io.use((socket, next) => {\n  const username = socket.handshake.auth.username;\n  if (!username) {\n    return next(new Error("invalid username"));\n  }\n  socket.username = username;\n  next();\n});\n')),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"username")," is added as an attribute of the ",(0,r.yg)("inlineCode",{parentName:"p"},"socket")," object, in order to be reused later. You can attach any attribute, as long as you don't overwrite an existing one like ",(0,r.yg)("a",{parentName:"p",href:"/docs/v4/server-socket-instance/#Socket-id"},(0,r.yg)("inlineCode",{parentName:"a"},"socket.id"))," or ",(0,r.yg)("a",{parentName:"p",href:"/docs/v4/server-socket-instance/#Socket-handshake"},(0,r.yg)("inlineCode",{parentName:"a"},"socket.handshake")),"."),(0,r.yg)("p",null,"Documentation:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/docs/v4/middlewares/"},"middlewares")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/docs/v4/server-socket-instance/"},"the Socket instance"))),(0,r.yg)("p",null,"On the client-side (",(0,r.yg)("inlineCode",{parentName:"p"},"src/App.vue"),"), we add a handler for the ",(0,r.yg)("inlineCode",{parentName:"p"},"connect_error")," event:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'socket.on("connect_error", (err) => {\n  if (err.message === "invalid username") {\n    this.usernameAlreadySelected = false;\n  }\n});\n')),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"connect_error")," event will be emitted upon connection failure:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"due to the low-level errors (when the server is down for example)"),(0,r.yg)("li",{parentName:"ul"},"due to middleware errors")),(0,r.yg)("p",null,"Please note that, in the function above, the low-level errors are not handled (the user could be notified of the connection failure, for example)."),(0,r.yg)("p",null,"Last note: the handler for the ",(0,r.yg)("inlineCode",{parentName:"p"},"connect_error")," is removed in the ",(0,r.yg)("a",{parentName:"p",href:"https://vuejs.org/v2/api/#destroyed"},"destroyed")," hook:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'destroyed() {\n  socket.off("connect_error");\n}\n')),(0,r.yg)("p",null,"So the listeners registered by our ",(0,r.yg)("inlineCode",{parentName:"p"},"App")," component are cleaned up when the component is destroyed."),(0,r.yg)("h3",{id:"listing-all-users"},"Listing all users"),(0,r.yg)("p",null,"Upon connection, we send all existing users to the client:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'io.on("connection", (socket) => {\n  const users = [];\n  for (let [id, socket] of io.of("/").sockets) {\n    users.push({\n      userID: id,\n      username: socket.username,\n    });\n  }\n  socket.emit("users", users);\n  // ...\n});\n')),(0,r.yg)("p",null,"We are looping over the ",(0,r.yg)("inlineCode",{parentName:"p"},'io.of("/").sockets')," object, which is a Map of all currently connected Socket instances, indexed by ",(0,r.yg)("a",{parentName:"p",href:"/docs/v4/server-socket-instance/#Socket-id"},"ID"),"."),(0,r.yg)("p",null,"Two remarks here:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"we are using the ",(0,r.yg)("inlineCode",{parentName:"li"},"socket.id")," as the user ID of our application"),(0,r.yg)("li",{parentName:"ul"},"we are only retrieving the users of the current Socket.IO server (not suitable when scaling up)")),(0,r.yg)("p",null,"We'll come back to this later."),(0,r.yg)("p",null,"On the client-side (",(0,r.yg)("inlineCode",{parentName:"p"},"src/components/Chat.vue"),"), we register a handler for the ",(0,r.yg)("inlineCode",{parentName:"p"},"users")," event:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'socket.on("users", (users) => {\n  users.forEach((user) => {\n    user.self = user.userID === socket.id;\n    initReactiveProperties(user);\n  });\n  // put the current user first, and then sort by username\n  this.users = users.sort((a, b) => {\n    if (a.self) return -1;\n    if (b.self) return 1;\n    if (a.username < b.username) return -1;\n    return a.username > b.username ? 1 : 0;\n  });\n});\n')),(0,r.yg)("p",null,"We also notify the existing users:"),(0,r.yg)("p",null,(0,r.yg)("em",{parentName:"p"},"Server")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'io.on("connection", (socket) => {\n  // notify existing users\n  socket.broadcast.emit("user connected", {\n    userID: socket.id,\n    username: socket.username,\n  });\n});\n')),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},'socket.broadcast.emit("user connected", ...)')," will emit to all connected clients, except the ",(0,r.yg)("inlineCode",{parentName:"p"},"socket")," itself."),(0,r.yg)("p",null,"The other form of broadcasting, ",(0,r.yg)("inlineCode",{parentName:"p"},'io.emit("user connected", ...)'),', would have sent the "user connected" event to all connected clients, including the new user.'),(0,r.yg)("p",null,"Documentation: ",(0,r.yg)("a",{parentName:"p",href:"/docs/v4/broadcasting-events/"},"broadcasting events")),(0,r.yg)("p",null,(0,r.yg)("em",{parentName:"p"},"Client")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'socket.on("user connected", (user) => {\n  initReactiveProperties(user);\n  this.users.push(user);\n});\n')),(0,r.yg)("p",null,"The list of users is displayed on the left panel:"),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Users list",src:t(220).A,width:"276",height:"467"})),(0,r.yg)("h3",{id:"private-messaging"},"Private messaging"),(0,r.yg)("p",null,"When selecting a given user, the right panel displays a chat window:"),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Chat",src:t(3107).A,width:"815",height:"763"})),(0,r.yg)("p",null,"Here is how private messages are implemented:"),(0,r.yg)("p",null,(0,r.yg)("em",{parentName:"p"},"Client (sender)")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'onMessage(content) {\n  if (this.selectedUser) {\n    socket.emit("private message", {\n      content,\n      to: this.selectedUser.userID,\n    });\n    this.selectedUser.messages.push({\n      content,\n      fromSelf: true,\n    });\n  }\n}\n')),(0,r.yg)("p",null,(0,r.yg)("em",{parentName:"p"},"Server")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'socket.on("private message", ({ content, to }) => {\n  socket.to(to).emit("private message", {\n    content,\n    from: socket.id,\n  });\n});\n')),(0,r.yg)("p",null,"Here, we are using the concept of ",(0,r.yg)("a",{parentName:"p",href:"/docs/v4/rooms/"},"Rooms"),". These are channels that Socket instances can join and leave, and you can broadcast to all clients in a room."),(0,r.yg)("p",null,"We are relying on the fact that the Socket instance automatically joins the room identified by its id (",(0,r.yg)("inlineCode",{parentName:"p"},"socket.join(socket.id)")," is called for you)."),(0,r.yg)("p",null,"So ",(0,r.yg)("inlineCode",{parentName:"p"},'socket.to(to).emit("private message", ...)')," emits to the given user ID."),(0,r.yg)("p",null,(0,r.yg)("em",{parentName:"p"},"Client (recipient)")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'socket.on("private message", ({ content, from }) => {\n  for (let i = 0; i < this.users.length; i++) {\n    const user = this.users[i];\n    if (user.userID === from) {\n      user.messages.push({\n        content,\n        fromSelf: false,\n      });\n      if (user !== this.selectedUser) {\n        user.hasNewMessages = true;\n      }\n      break;\n    }\n  }\n});\n')),(0,r.yg)("h3",{id:"connection-status"},"Connection status"),(0,r.yg)("p",null,"On the client-side, the Socket instance emits two special events:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"connect"),": upon connection or reconnection"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"disconnect"),": upon disconnection")),(0,r.yg)("p",null,"Those events can be used to track the state of the connection (in ",(0,r.yg)("inlineCode",{parentName:"p"},"src/components/Chat.vue"),"):"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'socket.on("connect", () => {\n  this.users.forEach((user) => {\n    if (user.self) {\n      user.connected = true;\n    }\n  });\n});\n\nsocket.on("disconnect", () => {\n  this.users.forEach((user) => {\n    if (user.self) {\n      user.connected = false;\n    }\n  });\n});\n')),(0,r.yg)("p",null,"You can test it by stopping the server:"),(0,r.yg)("img",{src:"/images/private-messaging-part-1-connection-status.gif",alt:"Connection status"}),(0,r.yg)("h2",{id:"review"},"Review"),(0,r.yg)("p",null,"OK, so... what we have for now is great, but there is an obvious issue:"),(0,r.yg)("img",{src:"/images/private-messaging-part-1-duplicate-users.gif",alt:"Duplicate users"}),(0,r.yg)("p",null,"Explanation: a new Socket ID is generated upon reconnection, so every time a user gets disconnected and reconnects, it will get a new user ID."),(0,r.yg)("p",null,"That's why we need a persistent user ID, which is the subject of the ",(0,r.yg)("a",{parentName:"p",href:"/get-started/private-messaging-part-2/"},"2nd part")," of this guide."),(0,r.yg)("p",null,"Thanks for reading!"))}g.isMDXComponent=!0},6029:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/network-monitor-2e47dbe233100aa290595f8687a9fcba.png"},3107:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/private-messaging-part-1-chat-ab610e9e03738ad37f7b0fb55c771087.png"},5740:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/private-messaging-part-1-username-selection-82131cb52abb2dcca4df14340352d191.png"},220:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/private-messaging-part-1-users-list-7d3f890494b1481065ba4afe0f5569f1.png"}}]);