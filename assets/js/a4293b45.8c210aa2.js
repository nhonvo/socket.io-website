"use strict";(self.webpackChunksample_website=self.webpackChunksample_website||[]).push([[7601],{5680:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>m});var a=t(6540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),l=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=l(e.components);return a.createElement(c.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=l(t),g=r,m=p["".concat(c,".").concat(g)]||p[g]||d[g]||o;return t?a.createElement(m,s(s({ref:n},u),{},{components:t})):a.createElement(m,s({ref:n},u))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=g;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i[p]="string"==typeof e?e:r,s[1]=i;for(var l=2;l<o;l++)s[l]=t[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},2557:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var a=t(8168),r=(t(6540),t(5680));const o={layout:"post",title:"Reactjs basic note",subtitle:"",date:new Date("2024-03-28T00:00:00.000Z"),author:"Truong Nhon",published:!0,catalog:!0,tags:["react"]},s=void 0,i={permalink:"/2024/3/28/reactjs-note",editUrl:"https://github.com/nhonvo/nhonvo.github.io/edit/main/blog/blog/2024-3-28-reactjs-note.md",source:"@site/blog/2024-3-28-reactjs-note.md",title:"Reactjs basic note",description:"useState and useEffect",date:"2024-03-28T00:00:00.000Z",formattedDate:"March 28, 2024",tags:[{label:"react",permalink:"/tags/react"}],readingTime:5.025,hasTruncateMarker:!0,authors:[{name:"Truong Nhon"}],frontMatter:{layout:"post",title:"Reactjs basic note",subtitle:"",date:"2024-03-28T00:00:00.000Z",author:"Truong Nhon",published:!0,catalog:!0,tags:["react"]},prevItem:{title:"Azure Cloud",permalink:"/2024/4/13/azure-cloud"},nextItem:{title:"net 8 and c# 12 big change",permalink:"/2024/4/12/net-8"}},c={authorsImageUrls:[void 0]},l=[{value:"useState and useEffect",id:"usestate-and-useeffect",level:2},{value:"class and interface",id:"class-and-interface",level:2},{value:"useStore() and mobx",id:"usestore-and-mobx",level:2},{value:"Redux",id:"redux",level:2},{value:"Store",id:"store",level:3},{value:"Actions",id:"actions",level:3},{value:"Reducers",id:"reducers",level:3},{value:"TypeScript Basics",id:"typescript-basics",level:2},{value:"Variables and Data Types",id:"variables-and-data-types",level:3},{value:"Functions and Arrow Functions",id:"functions-and-arrow-functions",level:3},{value:"Interfaces and Types",id:"interfaces-and-types",level:3},{value:"Arrays and Tuples",id:"arrays-and-tuples",level:3},{value:"Classes and Inheritance",id:"classes-and-inheritance",level:3},{value:"Advanced TypeScript Concepts",id:"advanced-typescript-concepts",level:3},{value:"Generics",id:"generics",level:3},{value:"Enums",id:"enums",level:3},{value:"Type Assertions",id:"type-assertions",level:3},{value:"Type Inference",id:"type-inference",level:3},{value:"Decorators",id:"decorators",level:3}],u={toc:l},p="wrapper";function d(e){let{components:n,...t}=e;return(0,r.yg)(p,(0,a.A)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h2",{id:"usestate-and-useeffect"},"useState and useEffect"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"useState")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"useEffect")," are both hooks used in React, a JavaScript library for building user interfaces."),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"useState")," is a hook that allows you to add state to a functional component. State is a way of storing and managing data within a component. With ",(0,r.yg)("inlineCode",{parentName:"p"},"useState"),", you can declare a state variable and a function to update that variable. Every time the state variable is updated, React will re-render the component and update the UI."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"import React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  const incrementCount = () => {\n    setCount(count + 1);\n  };\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={incrementCount}>Increment</button>\n    </div>\n  );\n}\n")),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"useEffect")," is a hook used for side effects in React. Side effects are actions that happen outside of the normal flow of the component, such as fetching data, subscriptions, or manually manipulating the DOM. ",(0,r.yg)("inlineCode",{parentName:"p"},"useEffect")," allows you to perform these side effects after the component has rendered."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"import React, { useState, useEffect } from 'react';\n\nfunction Example() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    document.title = `Count: ${count}`;\n  }, [count]);\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n}\n")),(0,r.yg)("h2",{id:"class-and-interface"},"class and interface"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"class")," create object with attribute and method. They facilitate code organization, encapsulation, and reusability through inheritance and polymorphism."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"class Car {\n  brand: string;\n  constructor(brand: string) {\n    this.brand = brand;\n  }\n  accelerate(speed: number) {\n    console.log(`${this.brand} is accelerating at ${speed} km/h.`);\n  }\n}\n\nconst myCar = new Car('Toyota');\nmyCar.accelerate(100);\n")),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"inteface")," Interfaces in TypeScript define contracts for objects, specifying the structure of their properties and methods without providing implementation details."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"interface Animal {\n  name: string;\n  makeSound(): void;\n}\n\nclass Dog implements Animal {\n  name: string;\n  constructor(name: string) {\n    this.name = name;\n  }\n  makeSound() {\n    console.log(`${this.name} barks.`);\n  }\n}\n\nconst myDog = new Dog('Buddy');\nmyDog.makeSound();\n")),(0,r.yg)("h2",{id:"usestore-and-mobx"},"useStore() and mobx"),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"store"))," is where all the state of the application is stored. It contains important data and provides methods to change and access this data"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"MobX")," is a state management library for JavaScript applications. It simplifies state management by using the observer pattern and automatically tracking state changes to update the user interface."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-tsx"},"import { makeAutoObservable } from 'mobx';\n\n// Define a store\nclass CounterStore {\n    count = 0;\n\n    constructor() {\n        makeAutoObservable(this); // Automatically generate state management functions\n    }\n\n    increment() {\n        this.count++;\n    }\n\n    decrement() {\n        this.count--;\n    }\n}\n\n// Create an object from the CounterStore class\nconst counter = new CounterStore();\n\n// Perform operations on the state\ncounter.increment();\ncounter.decrement();\n")),(0,r.yg)("h2",{id:"redux"},"Redux"),(0,r.yg)("p",null,"Redux is a predictable state container for JavaScript apps. It helps in managing the state of your application in a predictable way, which is especially useful for larger applications with complex state management"),(0,r.yg)("p",null,(0,r.yg)("img",{parentName:"p",src:"https://media.geeksforgeeks.org/wp-content/uploads/20210706235837/reactreduxx.png",alt:"redux"})),(0,r.yg)("h3",{id:"store"},"Store"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"The Store holds the global state of the application."),(0,r.yg)("li",{parentName:"ul"},"It allows access to the state via ",(0,r.yg)("inlineCode",{parentName:"li"},"getState()"),"."),(0,r.yg)("li",{parentName:"ul"},"State can be updated using ",(0,r.yg)("inlineCode",{parentName:"li"},"dispatch(action)"),"."),(0,r.yg)("li",{parentName:"ul"},"You can subscribe to changes using ",(0,r.yg)("inlineCode",{parentName:"li"},"subscribe(listener)"),".")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"import { createStore } from 'redux';\nimport rootReducer from './reducers'; // Your root reducer\n\nconst store = createStore(rootReducer);\n")),(0,r.yg)("h3",{id:"actions"},"Actions"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Actions are plain JavaScript objects that represent what happened."),(0,r.yg)("li",{parentName:"ul"},"They are dispatched to update the state."),(0,r.yg)("li",{parentName:"ul"},"Actions typically have a ",(0,r.yg)("inlineCode",{parentName:"li"},"type")," property that describes the action being performed."),(0,r.yg)("li",{parentName:"ul"},"They can optionally carry additional data in the ",(0,r.yg)("inlineCode",{parentName:"li"},"payload"),".")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"const incrementCounter = () => ({\n  type: 'INCREMENT_COUNTER'\n});\n\nconst decrementCounter = () => ({\n  type: 'DECREMENT_COUNTER'\n});\n")),(0,r.yg)("h3",{id:"reducers"},"Reducers"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Reducers are pure functions that specify how the application's state changes in response to actions."),(0,r.yg)("li",{parentName:"ul"},"They take the current state and an action, and return a new state."),(0,r.yg)("li",{parentName:"ul"},"They should not mutate the state, but return a new state object.")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"const initialState = {\n  counter: 0\n};\n\nconst counterReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'INCREMENT_COUNTER':\n      return { ...state, counter: state.counter + 1 };\n    case 'DECREMENT_COUNTER':\n      return { ...state, counter: state.counter - 1 };\n    default:\n      return state;\n  }\n};\n\nexport default counterReducer;\n")),(0,r.yg)("h2",{id:"typescript-basics"},"TypeScript Basics"),(0,r.yg)("h3",{id:"variables-and-data-types"},"Variables and Data Types"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},'let num: number = 10;\nlet str: string = "Hello, TypeScript!";\nlet bool: boolean = true;\nlet arr: number[] = [1, 2, 3];\nlet obj: { name: string, age: number } = { name: "John", age: 30 };\nlet func: (x: number, y: number) => number = (x, y) => x + y;\n')),(0,r.yg)("h3",{id:"functions-and-arrow-functions"},"Functions and Arrow Functions"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"function add(x: number, y: number): number {\n    return x + y;\n}\n\nconst multiply = (x: number, y: number): number => x * y;\n")),(0,r.yg)("h3",{id:"interfaces-and-types"},"Interfaces and Types"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"interface Person {\n    name: string;\n    age: number;\n}\n\ntype Point = {\n    x: number;\n    y: number;\n}\n")),(0,r.yg)("h3",{id:"arrays-and-tuples"},"Arrays and Tuples"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},'let numbers: number[] = [1, 2, 3];\nlet tuple: [string, number] = ["apple", 10];\n')),(0,r.yg)("h3",{id:"classes-and-inheritance"},"Classes and Inheritance"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},'class Animal {\n    constructor(public name: string) {}\n\n    makeSound(): void {\n        console.log("Some sound");\n    }\n}\n\nclass Dog extends Animal {\n    constructor(name: string, public breed: string) {\n        super(name);\n    }\n\n    makeSound(): void {\n        console.log("Woof!");\n    }\n}\n\nconst dog = new Dog("Buddy", "Labrador");\ndog.makeSound(); // Output: Woof!\n')),(0,r.yg)("h3",{id:"advanced-typescript-concepts"},"Advanced TypeScript Concepts"),(0,r.yg)("h3",{id:"generics"},"Generics"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},'function identity<T>(arg: T): T {\n    return arg;\n}\n\nconst result = identity<string>("Hello");\n')),(0,r.yg)("h3",{id:"enums"},"Enums"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},'enum Direction {\n    Up,\n    Down,\n    Left,\n    Right,\n}\n\nconst move = (direction: Direction) => {\n    switch (direction) {\n        case Direction.Up:\n            console.log("Moving Up");\n            break;\n        case Direction.Down:\n            console.log("Moving Down");\n            break;\n        case Direction.Left:\n            console.log("Moving Left");\n            break;\n        case Direction.Right:\n            console.log("Moving Right");\n            break;\n        default:\n            console.log("Unknown direction");\n    }\n};\n\nmove(Direction.Left);\n')),(0,r.yg)("h3",{id:"type-assertions"},"Type Assertions"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},'let someValue: any = "this is a string";\nlet strLength: number = (someValue as string).length;\n')),(0,r.yg)("h3",{id:"type-inference"},"Type Inference"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"let num = 10; // TypeScript infers 'number' type\n")),(0,r.yg)("h3",{id:"decorators"},"Decorators"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"function Log(target: any, key: string) {\n    console.log(`${key} was called`);\n}\n\nclass Calculator {\n    @Log\n    add(x: number, y: number): number {\n        return x + y;\n    }\n}\n\nconst calc = new Calculator();\ncalc.add(2, 3); // Output: add was called\n")))}d.isMDXComponent=!0}}]);