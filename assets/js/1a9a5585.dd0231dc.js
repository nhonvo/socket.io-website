"use strict";(self.webpackChunksample_website=self.webpackChunksample_website||[]).push([[8204],{5680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>k});var o=n(6540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},c=Object.keys(e);for(o=0;o<c.length;o++)n=c[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(o=0;o<c.length;o++)n=c[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var a=o.createContext({}),i=function(e){var t=o.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=i(e.components);return o.createElement(a.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,c=e.originalType,a=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=i(n),d=r,k=p["".concat(a,".").concat(d)]||p[d]||m[d]||c;return n?o.createElement(k,s(s({ref:t},u),{},{components:n})):o.createElement(k,s({ref:t},u))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var c=n.length,s=new Array(c);s[0]=d;var l={};for(var a in t)hasOwnProperty.call(t,a)&&(l[a]=t[a]);l.originalType=e,l[p]="string"==typeof e?e:r,s[1]=l;for(var i=2;i<c;i++)s[i]=n[i];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9365:(e,t,n)=>{n.d(t,{A:()=>s});var o=n(6540),r=n(53);const c={tabItem:"tabItem_Ymn6"};function s(e){let{children:t,hidden:n,className:s}=e;return o.createElement("div",{role:"tabpanel",className:(0,r.A)(c.tabItem,s),hidden:n},t)}},1470:(e,t,n)=>{n.d(t,{A:()=>y});var o=n(8168),r=n(6540),c=n(53),s=n(3104),l=n(6347),a=n(7485),i=n(1682),u=n(9466);function p(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:o,default:r}}=e;return{value:t,label:n,attributes:o,default:r}}))}function m(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,i.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function d(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function k(e){let{queryString:t=!1,groupId:n}=e;const o=(0,l.W6)(),c=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,a.aZ)(c),(0,r.useCallback)((e=>{if(!c)return;const t=new URLSearchParams(o.location.search);t.set(c,e),o.replace({...o.location,search:t.toString()})}),[c,o])]}function v(e){const{defaultValue:t,queryString:n=!1,groupId:o}=e,c=m(e),[s,l]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const o=n.find((e=>e.default))??n[0];if(!o)throw new Error("Unexpected error: 0 tabValues");return o.value}({defaultValue:t,tabValues:c}))),[a,i]=k({queryString:n,groupId:o}),[p,v]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[o,c]=(0,u.Dv)(n);return[o,(0,r.useCallback)((e=>{n&&c.set(e)}),[n,c])]}({groupId:o}),h=(()=>{const e=a??p;return d({value:e,tabValues:c})?e:null})();(0,r.useLayoutEffect)((()=>{h&&l(h)}),[h]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!d({value:e,tabValues:c}))throw new Error(`Can't select invalid tab value=${e}`);l(e),i(e),v(e)}),[i,v,c]),tabValues:c}}var h=n(2303);const S={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function g(e){let{className:t,block:n,selectedValue:l,selectValue:a,tabValues:i}=e;const u=[],{blockElementScrollPositionUntilNextRender:p}=(0,s.a_)(),m=e=>{const t=e.currentTarget,n=u.indexOf(t),o=i[n].value;o!==l&&(p(t),a(o))},d=e=>{let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,c.A)("tabs",{"tabs--block":n},t)},i.map((e=>{let{value:t,label:n,attributes:s}=e;return r.createElement("li",(0,o.A)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>u.push(e),onKeyDown:d,onClick:m},s,{className:(0,c.A)("tabs__item",S.tabItem,s?.className,{"tabs__item--active":l===t})}),n??t)})))}function b(e){let{lazy:t,children:n,selectedValue:o}=e;const c=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=c.find((e=>e.props.value===o));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},c.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==o}))))}function w(e){const t=v(e);return r.createElement("div",{className:(0,c.A)("tabs-container",S.tabList)},r.createElement(g,(0,o.A)({},e,t)),r.createElement(b,(0,o.A)({},e,t)))}function y(e){const t=(0,h.A)();return r.createElement(w,(0,o.A)({key:String(t)},e))}},628:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>a,default:()=>k,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var o=n(8168),r=(n(6540),n(5680)),c=n(1470),s=n(9365);const l={title:"Testing",sidebar_position:6,slug:"/testing/"},a=void 0,i={unversionedId:"categories/Documentation/testing",id:"categories/Documentation/testing",title:"Testing",description:"You will find below some code examples with common testing libraries:",source:"@site/docs/categories/01-Documentation/testing.md",sourceDirName:"categories/01-Documentation",slug:"/testing/",permalink:"/docs/v4/testing/",draft:!1,editUrl:"https://github.com/socketio/nhonvo.github.io/edit/main/docs/categories/01-Documentation/testing.md",tags:[],version:"current",lastUpdatedAt:1695752897,formattedLastUpdatedAt:"Sep 26, 2023",sidebarPosition:6,frontMatter:{title:"Testing",sidebar_position:6,slug:"/testing/"},sidebar:"sidebar",previous:{title:"Logging and debugging",permalink:"/docs/v4/logging-and-debugging/"},next:{title:"Troubleshooting",permalink:"/docs/v4/troubleshooting-connection-issues/"}},u={},p=[],m={toc:p},d="wrapper";function k(e){let{components:t,...n}=e;return(0,r.yg)(d,(0,o.A)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"You will find below some code examples with common testing libraries:"),(0,r.yg)(c.A,{mdxType:"Tabs"},(0,r.yg)(s.A,{value:"mocha",label:"mocha",default:!0,mdxType:"TabItem"},(0,r.yg)(c.A,{groupId:"lang",mdxType:"Tabs"},(0,r.yg)(s.A,{value:"cjs",label:"CommonJS",default:!0,mdxType:"TabItem"},(0,r.yg)("p",null,"Installation:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"npm install --save-dev mocha chai\n")),(0,r.yg)("p",null,"Test suite:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="test/basic.js"',title:'"test/basic.js"'},'const { createServer } = require("node:http");\nconst { Server } = require("socket.io");\nconst ioc = require("socket.io-client");\nconst { assert } = require("chai");\n\nfunction waitFor(socket, event) {\n  return new Promise((resolve) => {\n    socket.once(event, resolve);\n  });\n}\n\ndescribe("my awesome project", () => {\n  let io, serverSocket, clientSocket;\n\n  before((done) => {\n    const httpServer = createServer();\n    io = new Server(httpServer);\n    httpServer.listen(() => {\n      const port = httpServer.address().port;\n      clientSocket = ioc(`http://localhost:${port}`);\n      io.on("connection", (socket) => {\n        serverSocket = socket;\n      });\n      clientSocket.on("connect", done);\n    });\n  });\n\n  after(() => {\n    io.close();\n    clientSocket.disconnect();\n  });\n\n  it("should work", (done) => {\n    clientSocket.on("hello", (arg) => {\n      assert.equal(arg, "world");\n      done();\n    });\n    serverSocket.emit("hello", "world");\n  });\n\n  it("should work with an acknowledgement", (done) => {\n    serverSocket.on("hi", (cb) => {\n      cb("hola");\n    });\n    clientSocket.emit("hi", (arg) => {\n      assert.equal(arg, "hola");\n      done();\n    });\n  });\n\n  it("should work with emitWithAck()", async () => {\n    serverSocket.on("foo", (cb) => {\n      cb("bar");\n    });\n    const result = await clientSocket.emitWithAck("foo");\n    assert.equal(result, "bar");\n  });\n\n  it("should work with waitFor()", () => {\n    clientSocket.emit("baz");\n\n    return waitFor(serverSocket, "baz");\n  });\n});\n'))),(0,r.yg)(s.A,{value:"mjs",label:"ES modules",mdxType:"TabItem"},(0,r.yg)("p",null,"Installation:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"npm install --save-dev mocha chai\n")),(0,r.yg)("p",null,"Test suite:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="test/basic.js"',title:'"test/basic.js"'},'import { createServer } from "node:http";\nimport { io as ioc } from "socket.io-client";\nimport { Server } from "socket.io";\nimport { assert } from "chai";\n\nfunction waitFor(socket, event) {\n  return new Promise((resolve) => {\n    socket.once(event, resolve);\n  });\n}\n\ndescribe("my awesome project", () => {\n  let io, serverSocket, clientSocket;\n\n  before((done) => {\n    const httpServer = createServer();\n    io = new Server(httpServer);\n    httpServer.listen(() => {\n      const port = httpServer.address().port;\n      clientSocket = ioc(`http://localhost:${port}`);\n      io.on("connection", (socket) => {\n        serverSocket = socket;\n      });\n      clientSocket.on("connect", done);\n    });\n  });\n\n  after(() => {\n    io.close();\n    clientSocket.disconnect();\n  });\n\n  it("should work", (done) => {\n    clientSocket.on("hello", (arg) => {\n      assert.equal(arg, "world");\n      done();\n    });\n    serverSocket.emit("hello", "world");\n  });\n\n  it("should work with an acknowledgement", (done) => {\n    serverSocket.on("hi", (cb) => {\n      cb("hola");\n    });\n    clientSocket.emit("hi", (arg) => {\n      assert.equal(arg, "hola");\n      done();\n    });\n  });\n\n  it("should work with emitWithAck()", async () => {\n    serverSocket.on("foo", (cb) => {\n      cb("bar");\n    });\n    const result = await clientSocket.emitWithAck("foo");\n    assert.equal(result, "bar");\n  });\n\n  it("should work with waitFor()", () => {\n    clientSocket.emit("baz");\n\n    return waitFor(serverSocket, "baz");\n  });\n});\n'))),(0,r.yg)(s.A,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.yg)("p",null,"Installation:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"npm install --save-dev mocha chai @types/mocha @types/chai\n")),(0,r.yg)("p",null,"Test suite:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="test/basic.ts"',title:'"test/basic.ts"'},'import { createServer } from "node:http";\nimport { type AddressInfo } from "node:net";\nimport { io as ioc, type Socket as ClientSocket } from "socket.io-client";\nimport { Server, type Socket as ServerSocket } from "socket.io";\nimport { assert } from "chai";\n\nfunction waitFor(socket: ServerSocket | ClientSocket, event: string) {\n  return new Promise((resolve) => {\n    socket.once(event, resolve);\n  });\n}\n\ndescribe("my awesome project", () => {\n  let io: Server, serverSocket: ServerSocket, clientSocket: ClientSocket;\n\n  before((done) => {\n    const httpServer = createServer();\n    io = new Server(httpServer);\n    httpServer.listen(() => {\n      const port = (httpServer.address() as AddressInfo).port;\n      clientSocket = ioc(`http://localhost:${port}`);\n      io.on("connection", (socket) => {\n        serverSocket = socket;\n      });\n      clientSocket.on("connect", done);\n    });\n  });\n\n  after(() => {\n    io.close();\n    clientSocket.disconnect();\n  });\n\n  it("should work", (done) => {\n    clientSocket.on("hello", (arg) => {\n      assert.equal(arg, "world");\n      done();\n    });\n    serverSocket.emit("hello", "world");\n  });\n\n  it("should work with an acknowledgement", (done) => {\n    serverSocket.on("hi", (cb) => {\n      cb("hola");\n    });\n    clientSocket.emit("hi", (arg) => {\n      assert.equal(arg, "hola");\n      done();\n    });\n  });\n\n  it("should work with emitWithAck()", async () => {\n    serverSocket.on("foo", (cb) => {\n      cb("bar");\n    });\n    const result = await clientSocket.emitWithAck("foo");\n    assert.equal(result, "bar");\n  });\n\n  it("should work with waitFor()", () => {\n    clientSocket.emit("baz");\n\n    return waitFor(serverSocket, "baz");\n  });\n});\n')))),(0,r.yg)("p",null,"Reference: ",(0,r.yg)("a",{parentName:"p",href:"https://mochajs.org/"},"https://mochajs.org/"))),(0,r.yg)(s.A,{value:"jest",label:"jest",mdxType:"TabItem"},(0,r.yg)(c.A,{groupId:"lang",mdxType:"Tabs"},(0,r.yg)(s.A,{value:"cjs",label:"CommonJS",default:!0,mdxType:"TabItem"},(0,r.yg)("p",null,"Installation:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"npm install --save-dev jest\n")),(0,r.yg)("p",null,"Test suite:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="__tests__/basic.test.js"',title:'"__tests__/basic.test.js"'},'const { createServer } = require("node:http");\nconst { Server } = require("socket.io");\nconst ioc = require("socket.io-client");\n\nfunction waitFor(socket, event) {\n  return new Promise((resolve) => {\n    socket.once(event, resolve);\n  });\n}\n\ndescribe("my awesome project", () => {\n  let io, serverSocket, clientSocket;\n\n  beforeAll((done) => {\n    const httpServer = createServer();\n    io = new Server(httpServer);\n    httpServer.listen(() => {\n      const port = httpServer.address().port;\n      clientSocket = ioc(`http://localhost:${port}`);\n      io.on("connection", (socket) => {\n        serverSocket = socket;\n      });\n      clientSocket.on("connect", done);\n    });\n  });\n\n  afterAll(() => {\n    io.close();\n    clientSocket.disconnect();\n  });\n\n  test("should work", (done) => {\n    clientSocket.on("hello", (arg) => {\n      expect(arg).toBe("world");\n      done();\n    });\n    serverSocket.emit("hello", "world");\n  });\n\n  test("should work with an acknowledgement", (done) => {\n    serverSocket.on("hi", (cb) => {\n      cb("hola");\n    });\n    clientSocket.emit("hi", (arg) => {\n      expect(arg).toBe("hola");\n      done();\n    });\n  });\n\n  test("should work with emitWithAck()", async () => {\n    serverSocket.on("foo", (cb) => {\n      cb("bar");\n    });\n    const result = await clientSocket.emitWithAck("foo");\n    expect(result).toBe("bar");\n  });\n\n  test("should work with waitFor()", () => {\n    clientSocket.emit("baz");\n\n    return waitFor(serverSocket, "baz");\n  });\n});\n'))),(0,r.yg)(s.A,{value:"mjs",label:"ES modules",mdxType:"TabItem"},(0,r.yg)("p",null,"Installation:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"npm install --save-dev jest\n")),(0,r.yg)("p",null,"Test suite:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="__tests__/basic.test.js"',title:'"__tests__/basic.test.js"'},'import { createServer } from "node:http";\nimport { io as ioc } from "socket.io-client";\nimport { Server } from "socket.io";\n\nfunction waitFor(socket, event) {\n  return new Promise((resolve) => {\n    socket.once(event, resolve);\n  });\n}\n\ndescribe("my awesome project", () => {\n  let io, serverSocket, clientSocket;\n\n  beforeAll((done) => {\n    const httpServer = createServer();\n    io = new Server(httpServer);\n    httpServer.listen(() => {\n      const port = httpServer.address().port;\n      clientSocket = ioc(`http://localhost:${port}`);\n      io.on("connection", (socket) => {\n        serverSocket = socket;\n      });\n      clientSocket.on("connect", done);\n    });\n  });\n\n  afterAll(() => {\n    io.close();\n    clientSocket.disconnect();\n  });\n\n  test("should work", (done) => {\n    clientSocket.on("hello", (arg) => {\n      expect(arg).toBe("world");\n      done();\n    });\n    serverSocket.emit("hello", "world");\n  });\n\n  test("should work with an acknowledgement", (done) => {\n    serverSocket.on("hi", (cb) => {\n      cb("hola");\n    });\n    clientSocket.emit("hi", (arg) => {\n      expect(arg).toBe("hola");\n      done();\n    });\n  });\n\n  test("should work with emitWithAck()", async () => {\n    serverSocket.on("foo", (cb) => {\n      cb("bar");\n    });\n    const result = await clientSocket.emitWithAck("foo");\n    expect(result).toBe("bar");\n  });\n\n  test("should work with waitFor()", () => {\n    clientSocket.emit("baz");\n\n    return waitFor(serverSocket, "baz");\n  });\n});\n'))),(0,r.yg)(s.A,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.yg)("p",null,"Installation:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"npm install --save-dev jest @types/jest\n")),(0,r.yg)("p",null,"Test suite:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="__tests__/basic.test.ts"',title:'"__tests__/basic.test.ts"'},'import { createServer } from "node:http";\nimport { type AddressInfo } from "node:net";\nimport { io as ioc, type Socket as ClientSocket } from "socket.io-client";\nimport { Server, type Socket as ServerSocket } from "socket.io";\n\nfunction waitFor(socket: ServerSocket | ClientSocket, event: string) {\n  return new Promise((resolve) => {\n    socket.once(event, resolve);\n  });\n}\n\ndescribe("my awesome project", () => {\n  let io, serverSocket, clientSocket;\n\n  beforeAll((done) => {\n    const httpServer = createServer();\n    io = new Server(httpServer);\n    httpServer.listen(() => {\n      const port = (httpServer.address() as AddressInfo).port;\n      clientSocket = ioc(`http://localhost:${port}`);\n      io.on("connection", (socket) => {\n        serverSocket = socket;\n      });\n      clientSocket.on("connect", done);\n    });\n  });\n\n  afterAll(() => {\n    io.close();\n    clientSocket.disconnect();\n  });\n\n  test("should work", (done) => {\n    clientSocket.on("hello", (arg) => {\n      expect(arg).toBe("world");\n      done();\n    });\n    serverSocket.emit("hello", "world");\n  });\n\n  test("should work with an acknowledgement", (done) => {\n    serverSocket.on("hi", (cb) => {\n      cb("hola");\n    });\n    clientSocket.emit("hi", (arg) => {\n      expect(arg).toBe("hola");\n      done();\n    });\n  });\n\n  test("should work with emitWithAck()", async () => {\n    serverSocket.on("foo", (cb) => {\n      cb("bar");\n    });\n    const result = await clientSocket.emitWithAck("foo");\n    expect(result).toBe("bar");\n  });\n\n  test("should work with waitFor()", () => {\n    clientSocket.emit("baz");\n\n    return waitFor(serverSocket, "baz");\n  });\n});\n')))),(0,r.yg)("p",null,"Reference: ",(0,r.yg)("a",{parentName:"p",href:"https://jestjs.io/"},"https://jestjs.io/"))),(0,r.yg)(s.A,{value:"tape",label:"tape",default:!0,mdxType:"TabItem"},(0,r.yg)(c.A,{groupId:"lang",mdxType:"Tabs"},(0,r.yg)(s.A,{value:"cjs",label:"CommonJS",default:!0,mdxType:"TabItem"},(0,r.yg)("p",null,"Installation:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"npm install --save-dev tape\n")),(0,r.yg)("p",null,"Test suite:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="test/basic.js"',title:'"test/basic.js"'},'const test = require("tape");\nconst { createServer } = require("node:http");\nconst { Server } = require("socket.io");\nconst ioc = require("socket.io-client");\n\nlet io, serverSocket, clientSocket;\n\nfunction waitFor(socket, event) {\n  return new Promise((resolve) => {\n    socket.once(event, resolve);\n  });\n}\n\ntest("setup", (t) => {\n  const httpServer = createServer();\n  io = new Server(httpServer);\n  httpServer.listen(() => {\n    const port = httpServer.address().port;\n    clientSocket = ioc(`http://localhost:${port}`);\n    io.on("connection", (socket) => {\n      serverSocket = socket;\n    });\n    clientSocket.on("connect", t.end);\n  });\n});\n\ntest("it works", (t) => {\n  t.plan(1);\n  clientSocket.on("hello", (arg) => {\n    t.equal(arg, "world");\n  });\n  serverSocket.emit("hello", "world");\n});\n\ntest("it works with an acknowledgement", (t) => {\n  t.plan(1);\n  serverSocket.on("hi", (cb) => {\n    cb("hola");\n  });\n  clientSocket.emit("hi", (arg) => {\n    t.equal(arg, "hola");\n  });\n});\n\ntest("it works with emitWithAck()", async (t) => {\n  t.plan(1);\n  serverSocket.on("foo", (cb) => {\n    cb("bar");\n  });\n  const result = await clientSocket.emitWithAck("foo");\n  t.equal(result, "bar");\n});\n\ntest("it works with waitFor()", async (t) => {\n  t.plan(1);\n  clientSocket.emit("baz");\n\n  await waitFor(serverSocket, "baz");\n  t.pass();\n});\n\ntest.onFinish(() => {\n  io.close();\n  clientSocket.disconnect();\n});\n'))),(0,r.yg)(s.A,{value:"mjs",label:"ES modules",mdxType:"TabItem"},(0,r.yg)("p",null,"Installation:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"npm install --save-dev tape\n")),(0,r.yg)("p",null,"Test suite:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="test/basic.js"',title:'"test/basic.js"'},'import { test } from "tape";\nimport { createServer } from "node:http";\nimport { io as ioc } from "socket.io-client";\nimport { Server } from "socket.io";\n\nlet io, serverSocket, clientSocket;\n\nfunction waitFor(socket, event) {\n  return new Promise((resolve) => {\n    socket.once(event, resolve);\n  });\n}\n\ntest("setup", (t) => {\n  const httpServer = createServer();\n  io = new Server(httpServer);\n  httpServer.listen(() => {\n    const port = httpServer.address().port;\n    clientSocket = ioc(`http://localhost:${port}`);\n    io.on("connection", (socket) => {\n      serverSocket = socket;\n    });\n    clientSocket.on("connect", t.end);\n  });\n});\n\ntest("it works", (t) => {\n  t.plan(1);\n  clientSocket.on("hello", (arg) => {\n    t.equal(arg, "world");\n  });\n  serverSocket.emit("hello", "world");\n});\n\ntest("it works with an acknowledgement", (t) => {\n  t.plan(1);\n  serverSocket.on("hi", (cb) => {\n    cb("hola");\n  });\n  clientSocket.emit("hi", (arg) => {\n    t.equal(arg, "hola");\n  });\n});\n\ntest("it works with emitWithAck()", async (t) => {\n  t.plan(1);\n  serverSocket.on("foo", (cb) => {\n    cb("bar");\n  });\n  const result = await clientSocket.emitWithAck("foo");\n  t.equal(result, "bar");\n});\n\ntest("it works with waitFor()", async (t) => {\n  t.plan(1);\n  clientSocket.emit("baz");\n\n  await waitFor(serverSocket, "baz");\n  t.pass();\n});\n\ntest.onFinish(() => {\n  io.close();\n  clientSocket.disconnect();\n});\n'))),(0,r.yg)(s.A,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.yg)("p",null,"Installation:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"npm install --save-dev tape\n")),(0,r.yg)("p",null,"Test suite:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="test/basic.ts"',title:'"test/basic.ts"'},'import { test } from "tape";\nimport { createServer } from "node:http";\nimport { type AddressInfo } from "node:net";\nimport { io as ioc, type Socket as ClientSocket } from "socket.io-client";\nimport { Server, type Socket as ServerSocket } from "socket.io";\n\nlet io: Server, serverSocket: ServerSocket, clientSocket: ClientSocket;\n\nfunction waitFor(socket: ServerSocket | ClientSocket, event: string) {\n  return new Promise((resolve) => {\n    socket.once(event, resolve);\n  });\n}\n\ntest("setup", (t) => {\n  const httpServer = createServer();\n  io = new Server(httpServer);\n  httpServer.listen(() => {\n    const port = (httpServer.address() as AddressInfo).port;\n    clientSocket = ioc(`http://localhost:${port}`);\n    io.on("connection", (socket) => {\n      serverSocket = socket;\n    });\n    clientSocket.on("connect", t.end);\n  });\n});\n\ntest("it works", (t) => {\n  t.plan(1);\n  clientSocket.on("hello", (arg) => {\n    t.equal(arg, "world");\n  });\n  serverSocket.emit("hello", "world");\n});\n\ntest("it works with an acknowledgement", (t) => {\n  t.plan(1);\n  serverSocket.on("hi", (cb) => {\n    cb("hola");\n  });\n  clientSocket.emit("hi", (arg) => {\n    t.equal(arg, "hola");\n  });\n});\n\ntest("it works with emitWithAck()", async (t) => {\n  t.plan(1);\n  serverSocket.on("foo", (cb) => {\n    cb("bar");\n  });\n  const result = await clientSocket.emitWithAck("foo");\n  t.equal(result, "bar");\n});\n\ntest("it works with waitFor()", async (t) => {\n  t.plan(1);\n  clientSocket.emit("baz");\n\n  await waitFor(serverSocket, "baz");\n  t.pass();\n});\n\ntest.onFinish(() => {\n  io.close();\n  clientSocket.disconnect();\n});\n')))),(0,r.yg)("p",null,"Reference: ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/ljharb/tape"},"https://github.com/ljharb/tape"))),(0,r.yg)(s.A,{value:"vitest",label:"vitest",mdxType:"TabItem"},(0,r.yg)(c.A,{groupId:"lang",mdxType:"Tabs"},(0,r.yg)(s.A,{value:"cjs",label:"CommonJS",default:!0,mdxType:"TabItem"},(0,r.yg)("p",null,"Installation:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"npm install --save-dev vitest\n")),(0,r.yg)("p",null,"Test suite:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="test/basic.js"',title:'"test/basic.js"'},'const { beforeAll, afterAll, describe, it, expect } = require("vitest");\nconst { createServer } = require("node:http");\nconst { Server } = require("socket.io");\nconst ioc = require("socket.io-client");\n\nfunction waitFor(socket, event) {\n  return new Promise((resolve) => {\n    socket.once(event, resolve);\n  });\n}\n\ndescribe("my awesome project", () => {\n  let io, serverSocket, clientSocket;\n\n  beforeAll(() => {\n    return new Promise((resolve) => {\n      const httpServer = createServer();\n      io = new Server(httpServer);\n      httpServer.listen(() => {\n        const port = httpServer.address().port;\n        clientSocket = ioc(`http://localhost:${port}`);\n        io.on("connection", (socket) => {\n          serverSocket = socket;\n        });\n        clientSocket.on("connect", resolve);\n      });\n    });\n  });\n\n  afterAll(() => {\n    io.close();\n    clientSocket.disconnect();\n  });\n\n  it("should work", () => {\n    return new Promise((resolve) => {\n      clientSocket.on("hello", (arg) => {\n        expect(arg).toEqual("world");\n        resolve();\n      });\n      serverSocket.emit("hello", "world");\n    });\n  });\n\n  it("should work with an acknowledgement", () => {\n    return new Promise((resolve) => {\n      serverSocket.on("hi", (cb) => {\n        cb("hola");\n      });\n      clientSocket.emit("hi", (arg) => {\n        expect(arg).toEqual("hola");\n        resolve();\n      });\n    });\n  });\n\n  it("should work with emitWithAck()", async () => {\n    serverSocket.on("foo", (cb) => {\n      cb("bar");\n    });\n    const result = await clientSocket.emitWithAck("foo");\n    expect(result).toEqual("bar");\n  });\n\n  it("should work with waitFor()", () => {\n    clientSocket.emit("baz");\n\n    return waitFor(serverSocket, "baz");\n  });\n});\n'))),(0,r.yg)(s.A,{value:"mjs",label:"ES modules",mdxType:"TabItem"},(0,r.yg)("p",null,"Installation:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"npm install --save-dev vitest\n")),(0,r.yg)("p",null,"Test suite:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="test/basic.js"',title:'"test/basic.js"'},'import { beforeAll, afterAll, describe, it, expect } from "vitest";\nimport { createServer } from "node:http";\nimport { io as ioc } from "socket.io-client";\nimport { Server } from "socket.io";\n\nfunction waitFor(socket, event) {\n  return new Promise((resolve) => {\n    socket.once(event, resolve);\n  });\n}\n\ndescribe("my awesome project", () => {\n  let io, serverSocket, clientSocket;\n\n  beforeAll(() => {\n    return new Promise((resolve) => {\n      const httpServer = createServer();\n      io = new Server(httpServer);\n      httpServer.listen(() => {\n        const port = httpServer.address().port;\n        clientSocket = ioc(`http://localhost:${port}`);\n        io.on("connection", (socket) => {\n          serverSocket = socket;\n        });\n        clientSocket.on("connect", resolve);\n      });\n    });\n  });\n\n  afterAll(() => {\n    io.close();\n    clientSocket.disconnect();\n  });\n\n  it("should work", () => {\n    return new Promise((resolve) => {\n      clientSocket.on("hello", (arg) => {\n        expect(arg).toEqual("world");\n        resolve();\n      });\n      serverSocket.emit("hello", "world");\n    });\n  });\n\n  it("should work with an acknowledgement", () => {\n    return new Promise((resolve) => {\n      serverSocket.on("hi", (cb) => {\n        cb("hola");\n      });\n      clientSocket.emit("hi", (arg) => {\n        expect(arg).toEqual("hola");\n        resolve();\n      });\n    });\n  });\n\n  it("should work with emitWithAck()", async () => {\n    serverSocket.on("foo", (cb) => {\n      cb("bar");\n    });\n    const result = await clientSocket.emitWithAck("foo");\n    expect(result).toEqual("bar");\n  });\n\n  it("should work with waitFor()", () => {\n    clientSocket.emit("baz");\n\n    return waitFor(serverSocket, "baz");\n  });\n});\n'))),(0,r.yg)(s.A,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.yg)("p",null,"Installation:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"npm install --save-dev vitest\n")),(0,r.yg)("p",null,"Test suite:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="test/basic.ts"',title:'"test/basic.ts"'},'import { beforeAll, afterAll, describe, it, expect } from "vitest";\nimport { createServer } from "node:http";\nimport { type AddressInfo } from "node:net";\nimport { io as ioc, type Socket as ClientSocket } from "socket.io-client";\nimport { Server, type Socket as ServerSocket } from "socket.io";\n\nfunction waitFor(socket: ServerSocket | ClientSocket, event: string) {\n  return new Promise((resolve) => {\n    socket.once(event, resolve);\n  });\n}\n\ndescribe("my awesome project", () => {\n  let io: Server, serverSocket: ServerSocket, clientSocket: ClientSocket;\n\n  beforeAll(() => {\n    return new Promise((resolve) => {\n      const httpServer = createServer();\n      io = new Server(httpServer);\n      httpServer.listen(() => {\n        const port = (httpServer.address() as AddressInfo).port;\n        clientSocket = ioc(`http://localhost:${port}`);\n        io.on("connection", (socket) => {\n          serverSocket = socket;\n        });\n        clientSocket.on("connect", resolve);\n      });\n    });\n  });\n\n  afterAll(() => {\n    io.close();\n    clientSocket.disconnect();\n  });\n\n  it("should work", () => {\n    return new Promise((resolve) => {\n      clientSocket.on("hello", (arg) => {\n        expect(arg).toEqual("world");\n        resolve();\n      });\n      serverSocket.emit("hello", "world");\n    });\n  });\n\n  it("should work with an acknowledgement", () => {\n    return new Promise((resolve) => {\n      serverSocket.on("hi", (cb) => {\n        cb("hola");\n      });\n      clientSocket.emit("hi", (arg) => {\n        expect(arg).toEqual("hola");\n        resolve();\n      });\n    });\n  });\n\n  it("should work with emitWithAck()", async () => {\n    serverSocket.on("foo", (cb) => {\n      cb("bar");\n    });\n    const result = await clientSocket.emitWithAck("foo");\n    expect(result).toEqual("bar");\n  });\n\n  it("should work with waitFor()", () => {\n    clientSocket.emit("baz");\n\n    return waitFor(serverSocket, "baz");\n  });\n});\n')))),(0,r.yg)("p",null,"Reference: ",(0,r.yg)("a",{parentName:"p",href:"https://vitest.dev/"},"https://vitest.dev/")))))}k.isMDXComponent=!0}}]);