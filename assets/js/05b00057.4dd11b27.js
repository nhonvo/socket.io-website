"use strict";(self.webpackChunksample_website=self.webpackChunksample_website||[]).push([[5084],{5680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>u});var i=t(6540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var r=i.createContext({}),d=function(e){var n=i.useContext(r),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=d(e.components);return i.createElement(r.Provider,{value:n},e.children)},g="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,r=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),g=d(t),m=o,u=g["".concat(r,".").concat(m)]||g[m]||c[m]||a;return t?i.createElement(u,s(s({ref:n},p),{},{components:t})):i.createElement(u,s({ref:n},p))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,s=new Array(a);s[0]=m;var l={};for(var r in n)hasOwnProperty.call(n,r)&&(l[r]=n[r]);l.originalType=e,l[g]="string"==typeof e?e:o,s[1]=l;for(var d=2;d<a;d++)s[d]=t[d];return i.createElement.apply(null,s)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6424:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var i=t(8168),o=(t(6540),t(5680));const a={title:"Socket.IO C++",slug:"/socket-io-cpp/",authors:[{name:"Melo Yao",title:"Maintainer of the C++ client",url:"https://twitter.com/melode111",image_url:"https://github.com/melode11.png"}]},s=void 0,l={permalink:"/socket.io-website/blog/socket-io-cpp/",editUrl:"https://github.com/socketio/socket.io-website/edit/main/blog/2015-04-13-socket-io-cpp.md",source:"@site/blog/2015-04-13-socket-io-cpp.md",title:"Socket.IO C++",description:"I'm really proud to announce the first release of the Socket.IO C++ Client on GitHub!",date:"2015-04-13T00:00:00.000Z",formattedDate:"April 13, 2015",tags:[],readingTime:5.98,hasTruncateMarker:!0,authors:[{name:"Melo Yao",title:"Maintainer of the C++ client",url:"https://twitter.com/melode111",image_url:"https://github.com/melode11.png",imageURL:"https://github.com/melode11.png"}],frontMatter:{title:"Socket.IO C++",slug:"/socket-io-cpp/",authors:[{name:"Melo Yao",title:"Maintainer of the C++ client",url:"https://twitter.com/melode111",image_url:"https://github.com/melode11.png",imageURL:"https://github.com/melode11.png"}]},prevItem:{title:"Socket.IO P2P",permalink:"/socket.io-website/blog/socket-io-p2p/"},nextItem:{title:"Socket.IO on iOS",permalink:"/socket.io-website/blog/socket-io-on-ios/"}},r={authorsImageUrls:[void 0]},d=[{value:"Introduction",id:"introduction",level:2},{value:"Creating a QT GUI Application",id:"creating-a-qt-gui-application",level:2},{value:"Importing an SioClient",id:"importing-an-sioclient",level:2},{value:"Importing Boost",id:"importing-boost",level:2},{value:"Create the Main Window UI",id:"create-the-main-window-ui",level:2},{value:"Add Slots in the Main Window",id:"add-slots-in-the-main-window",level:2},{value:"Connect the UI Event Signal and Slots",id:"connect-the-ui-event-signal-and-slots",level:2},{value:"Adding UI Refresh Signals/Slots",id:"adding-ui-refresh-signalsslots",level:2},{value:"Setting up the Socket",id:"setting-up-the-socket",level:2},{value:"Managing Connection State",id:"managing-connection-state",level:2}],p={toc:d},g="wrapper";function c(e){let{components:n,...t}=e;return(0,o.yg)(g,(0,i.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"I'm really proud to announce the first release of the ",(0,o.yg)("a",{href:"https://github.com/socketio/socket.io-client-cpp"},"Socket.IO C++ Client")," on GitHub!"),(0,o.yg)("p",null,"Based on ",(0,o.yg)("a",{href:"http://www.boost.org/"},"Boost")," and ",(0,o.yg)("a",{href:"https://github.com/zaphoyd/websocketpp"},"WebSocket++"),", this full-featured Socket.IO 1.0 client has the fundamental advantage of working on ",(0,o.yg)("strong",{parentName:"p"},"multiple platforms"),". Check out the directory of ",(0,o.yg)("a",{href:"https://github.com/socketio/socket.io-client-cpp/tree/master/examples"},"examples"),". It contains examples of iOS, QT, and CLI chat clients!"),(0,o.yg)("p",null,"To learn how to use this client, I put together a QT chat example that communicates using a ",(0,o.yg)("a",{href:"https://github.com/Automattic/socket.io/tree/master/examples/chat"},"Socket.IO Node.JS chat server"),". Keep reading for step-by-step instructions."),(0,o.yg)("p",{style:{"text-align":"center"}},(0,o.yg)("img",{src:"https://cldup.com/98tHyoJJE7.gif"})),(0,o.yg)("h2",{id:"introduction"},"Introduction"),(0,o.yg)("p",null,"If you\u2019d like to follow along, begin by cloning the ",(0,o.yg)("a",{href:"https://github.com/socketio/socket.io-client-cpp"},"socket.io-client-cpp")," repository using the following:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"git clone --recurse-submodules https://github.com/socketio/socket.io-client-cpp.git\n")),(0,o.yg)("p",null,"The app includes the following features:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Send messages to all users joining the room."),(0,o.yg)("li",{parentName:"ul"},"Receive a notification when users join or leave the room."),(0,o.yg)("li",{parentName:"ul"},"Receive notifications when a user starts typing a message.")),(0,o.yg)("p",null,"Before you get started, visit the ",(0,o.yg)("a",{href:"http://www.qt.io/download-open-source/#section-2"},"QT community")," to download and install QT."),(0,o.yg)("h2",{id:"creating-a-qt-gui-application"},"Creating a QT GUI Application"),(0,o.yg)("p",null,"Launch the QT Creator."),(0,o.yg)("p",null,"On the welcome page, select ",(0,o.yg)("inlineCode",{parentName:"p"},"New Project"),", then create a ",(0,o.yg)("inlineCode",{parentName:"p"},"QT Widget Application.")," Name it ",(0,o.yg)("inlineCode",{parentName:"p"},"SioChatDemo.")),(0,o.yg)("p",null,"The project structure should look like this:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"SioChatDemo\n    |__ SioChatDemo.pro\n    |__Headers\n    |   |__mainwindow.h\n    |__Sources\n    |   |__main.cpp\n    |   |__mainwindow.cpp\n    |__Forms\n        |__mainwindow.ui\n")),(0,o.yg)("h2",{id:"importing-an-sioclient"},"Importing an SioClient"),(0,o.yg)("p",null,"Lets copy the SioClient into the QT project under the subfolder ",(0,o.yg)("inlineCode",{parentName:"p"},"sioclient.")),(0,o.yg)("p",null,"Edit ",(0,o.yg)("inlineCode",{parentName:"p"},"SioChatDemo.pro")," to configure paths and compile options by simply adding:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"SOURCES += ./sioclient/src/sio_client.cpp\n           ./sioclient/src/sio_packet.cpp\n\nHEADERS  += ./sioclient/src/sio_client.h\n            ./sioclient/src/sio_message.h\n\nINCLUDEPATH += $$PWD/sioclient/lib/rapidjson/include\nINCLUDEPATH += $$PWD/sioclient/lib/websocketpp\n")),(0,o.yg)("p",null,"Add two additional compile options:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"CONFIG+=no_keywords\nCONFIG+=c++11\n")),(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"no_keywords")," flag prevents ",(0,o.yg)("inlineCode",{parentName:"p"},"qmake")," from treating some function names as ",(0,o.yg)("inlineCode",{parentName:"p"},"emit")," as the keyword for the signal-slot mechanism."),(0,o.yg)("p",null,"Use ",(0,o.yg)("inlineCode",{parentName:"p"},"c++11")," to ask for C++11 support."),(0,o.yg)("h2",{id:"importing-boost"},"Importing Boost"),(0,o.yg)("p",null,"We now have our boost ",(0,o.yg)("inlineCode",{parentName:"p"},"headers")," and a fat boost ",(0,o.yg)("inlineCode",{parentName:"p"},"static lib")," named ",(0,o.yg)("inlineCode",{parentName:"p"},"libboost.a"),"(non-win32) or ",(0,o.yg)("inlineCode",{parentName:"p"},"boost.lib"),"(win32)."),(0,o.yg)("p",null,"To import them, we need to edit ",(0,o.yg)("inlineCode",{parentName:"p"},"SioChatDemo.pro")," again by adding a header including the following:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"INCLUDEPATH += `our boost headers folder`\n")),(0,o.yg)("p",null,"Linker options:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"win32:CONFIG(release, debug|release): LIBS += -L`our Win32 boost static lib folder` -lboost\nelse:win32:CONFIG(debug, debug|release): LIBS += -L`our Win32 boost static lib folder` -lboost\nelse:unix: LIBS += -L`our osx boost static lib folder` -lboost\n")),(0,o.yg)("h2",{id:"create-the-main-window-ui"},"Create the Main Window UI"),(0,o.yg)("p",null,"Create a simple UI by dragging and dropping a widget from the widget box on the left-hand side."),(0,o.yg)("p",{style:{"text-align":"center"}},(0,o.yg)("img",{src:"https://cldup.com/RI98CYpYL5.png"})),(0,o.yg)("p",null,"It contains the following:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"A ",(0,o.yg)("inlineCode",{parentName:"li"},"QLineEdit")," at the top to input a nickname: ",(0,o.yg)("inlineCode",{parentName:"li"},"nickNameEdit")),(0,o.yg)("li",{parentName:"ul"},"A ",(0,o.yg)("inlineCode",{parentName:"li"},"QPushButton")," at the top right for login: ",(0,o.yg)("inlineCode",{parentName:"li"},"loginBtn")),(0,o.yg)("li",{parentName:"ul"},"A ",(0,o.yg)("inlineCode",{parentName:"li"},"QListWidget")," in the center for showing messages: ",(0,o.yg)("inlineCode",{parentName:"li"},"listView")),(0,o.yg)("li",{parentName:"ul"},"A ",(0,o.yg)("inlineCode",{parentName:"li"},"QLineEdit")," at the bottom for typing messages: ",(0,o.yg)("inlineCode",{parentName:"li"},"messageEdit")),(0,o.yg)("li",{parentName:"ul"},"A ",(0,o.yg)("inlineCode",{parentName:"li"},"QPushButton")," at the bottom right for sending messages: ",(0,o.yg)("inlineCode",{parentName:"li"},"sendBtn"))),(0,o.yg)("h2",{id:"add-slots-in-the-main-window"},"Add Slots in the Main Window"),(0,o.yg)("p",null,"The following slots need to be added in the ",(0,o.yg)("inlineCode",{parentName:"p"},"mainwindow")," class to handle UI events:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Click \u2018Login\u2019 button"),(0,o.yg)("li",{parentName:"ul"},"Click \u2018Send Message\u2019 button"),(0,o.yg)("li",{parentName:"ul"},"Text change in message editing (to show typing status)"),(0,o.yg)("li",{parentName:"ul"},"Return message editing (for sending responses)")),(0,o.yg)("p",null,"Insert the following code into the ",(0,o.yg)("inlineCode",{parentName:"p"},"MainWindow")," class in ",(0,o.yg)("inlineCode",{parentName:"p"},"mainwindow.h"),":"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-cpp"},"public Q_SLOTS:\n    void SendBtnClicked();\n    void TypingChanged();\n    void LoginClicked();\n    void OnMessageReturn();\n")),(0,o.yg)("h2",{id:"connect-the-ui-event-signal-and-slots"},"Connect the UI Event Signal and Slots"),(0,o.yg)("p",null,"Open ",(0,o.yg)("inlineCode",{parentName:"p"},"mainwindow.ui")," in the design mode. Switch to the ",(0,o.yg)("inlineCode",{parentName:"p"},"signals/slots")," mode using ",(0,o.yg)("inlineCode",{parentName:"p"},"Menu->Edit->Edit Signals/Slots"),"."),(0,o.yg)("p",null,"Click and hold the widget and drag it to the window (the cursor will become an electrical ground symbol) to open the connection editor."),(0,o.yg)("p",null,"In the connection editor, edit the main window slots on the right side. Add the slot function names added in ",(0,o.yg)("inlineCode",{parentName:"p"},"mainwindow.h")," before."),(0,o.yg)("p",null,"Then we can connect the event signal to the widget with our own slots. The result should look like this:"),(0,o.yg)("p",{style:{"text-align":"center"}},(0,o.yg)("img",{src:"https://cldup.com/Vsb-UXG3FC.jpg"})),(0,o.yg)("h2",{id:"adding-ui-refresh-signalsslots"},"Adding UI Refresh Signals/Slots"),(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"sio::client")," callbacks are not in the UI thread. However, the UI must be updated with those callbacks, so we need a signal for the non-UI thread to request the ",(0,o.yg)("inlineCode",{parentName:"p"},"slots")," functions in the UI thread. To signal that ",(0,o.yg)("inlineCode",{parentName:"p"},"QListWidgetItem")," has been added, insert the following:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-cpp"},"// in mainwindow.h\nQ_SIGNALS:\n    void RequestAddListItem(QListWidgetItem *item);\nprivate Q_SLOTS:\n    void AddListItem(QListWidgetItem *item);\n")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-cpp"},'//In mainwindow.cpp\nvoid MainWindow::AddListItem(QListWidgetItem* item)\n{\n    this->findChild<QListWidget*>("listView")->addItem(item);\n}\n')),(0,o.yg)("p",null,"Then connect them in the ",(0,o.yg)("inlineCode",{parentName:"p"},"MainWindow")," constructor."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-cpp"},"connect(this,SIGNAL(RequestAddListItem(QListWidgetItem*)),this,SLOT(AddListItem(QListWidgetItem*)));\n")),(0,o.yg)("h2",{id:"setting-up-the-socket"},"Setting up the Socket"),(0,o.yg)("p",null,"For single-window applications, simply let ",(0,o.yg)("inlineCode",{parentName:"p"},"MainWindow")," class hold the ",(0,o.yg)("inlineCode",{parentName:"p"},"sio::client")," object by declaring a ",(0,o.yg)("inlineCode",{parentName:"p"},"unique_ptr")," member of the ",(0,o.yg)("inlineCode",{parentName:"p"},"sio::client")," and several event handling functions in ",(0,o.yg)("inlineCode",{parentName:"p"},"mainwindow.h"),"."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-cpp"},"private:\n    void OnNewMessage(std::string const& name,message::ptr const& data,bool hasAck,message::ptr &ack_resp);\n    void OnUserJoined(std::string const& name,message::ptr const& data,bool hasAck,message::ptr &ack_resp);\n    void OnUserLeft(std::string const& name,message::ptr const& data,bool hasAck,message::ptr &ack_resp);\n    void OnTyping(std::string const& name,message::ptr const& data,bool hasAck,message::ptr &ack_resp);\n    void OnStopTyping(std::string const& name,message::ptr const& data,bool hasAck,message::ptr &ack_resp);\n    void OnLogin(std::string const& name,message::ptr const& data,bool hasAck,message::ptr &ack_resp);\n    void OnConnected();\n    void OnClosed(client::close_reason const& reason);\n    void OnFailed();\n\n    std::unique_ptr<client> _io;\n")),(0,o.yg)("p",null,"Initialize ",(0,o.yg)("inlineCode",{parentName:"p"},"sio::client")," and setup event bindings for the default ",(0,o.yg)("inlineCode",{parentName:"p"},"socket")," in the ",(0,o.yg)("inlineCode",{parentName:"p"},"MainWindow")," constructor."),(0,o.yg)("p",null,"We also need to handle connectivity and disconnect events."),(0,o.yg)("p",null,"Add the following to the ",(0,o.yg)("inlineCode",{parentName:"p"},"MainWindow")," constructor:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-cpp"},'MainWindow::MainWindow(QWidget *parent) :\n    QMainWindow(parent),\n    ui(new Ui::MainWindow),\n    _io(new client())\n{\n    ui->setupUi(this);\n    using std::placeholders::_1;\n    using std::placeholders::_2;\n    using std::placeholders::_3;\n    using std::placeholders::_4;\n    socket::ptr sock = _io->socket();\n    sock->on("new message",std::bind(&MainWindow::OnNewMessage,this,_1,_2,_3,_4));\n    sock->on("user joined",std::bind(&MainWindow::OnUserJoined,this,_1,_2,_3,_4));\n    sock->on("user left",std::bind(&MainWindow::OnUserLeft,this,_1,_2,_3,_4));\n    sock->on("typing",std::bind(&MainWindow::OnTyping,this,_1,_2,_3,_4));\n    sock->on("stop typing",std::bind(&MainWindow::OnStopTyping,this,_1,_2,_3,_4));\n    sock->on("login",std::bind(&MainWindow::OnLogin,this,_1,_2,_3,_4));\n    //default socket opened, also we have "set_open_listener" for monitoring physical connection opened.\n    _io->set_socket_open_listener(std::bind(&MainWindow::OnConnected,this,std::placeholders::_1));\n    //physical connection closed or drop.\n    _io->set_close_listener(std::bind(&MainWindow::OnClosed,this,_1));\n    //physical connection fail to establish.\n    _io->set_fail_listener(std::bind(&MainWindow::OnFailed,this));\n    connect(this,SIGNAL(RequestAddListItem(QListWidgetItem*)),this,SLOT(AddListItem(QListWidgetItem*)));\n}\n')),(0,o.yg)("h2",{id:"managing-connection-state"},"Managing Connection State"),(0,o.yg)("p",null,"We have several connection listeners for connection events."),(0,o.yg)("p",null,"First, we want to send a login message when were connected; we get the default ",(0,o.yg)("inlineCode",{parentName:"p"},"socket")," from the ",(0,o.yg)("inlineCode",{parentName:"p"},"client")," to do that."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-cpp"},'void MainWindow::OnConnected()\n{\n    QByteArray bytes = m_name.toUtf8();\n    std::string nickName(bytes.data(),bytes.length());\n    _io->socket()->emit("add user", nickName);\n}\n')),(0,o.yg)("p",null,"If the connection closes or fails, we need to restore the UI before we connect."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-cpp"},'void MainWindow::OnClosed(client::close_reason const& reason)\n{\n    //restore UI to pre-login state\n}\n\nvoid MainWindow::OnFailed()\n{\n    //restore UI to pre-login state\n}\n```\n\nIf we exit the `MainWindow`, we need to clear the event bindings and listeners.\n\nThe `sio::client` object will be destroyed using `unique_ptr`.\n\n```cpp\nMainWindow::~MainWindow()\n{\n    _io->socket()->off_all();\n    _io->socket()->off_error();\n    delete ui;\n}\n```\n\n## Handling Socket.IO Events\n\nWe\'ll need to handle socket.io events in our functions they are bound to.\n\nFor example, we need to show received messages in the list view.\n\n```cpp\nvoid MainWindow::OnNewMessage(std::string const& name,message::ptr const& data,bool hasAck,message::ptr &ack_resp)\n{\n    if(data->get_flag() == message::flag_object)\n    {\n        std::string msg = data->get_map()["message"]->get_string();\n        std::string name = data->get_map()["username"]->get_string();\n        QString label = QString::fromUtf8(name.data(),name.length());\n        label.append(\':\');\n        label.append(QString::fromUtf8(msg.data(),msg.length()));\n        QListWidgetItem *item= new QListWidgetItem(label);\n        //emit RequestAddListItem signal\n        //so that \'AddListItem\' will be executed in UI thread.\n        Q_EMIT RequestAddListItem(item);\n    }\n}\n```\n\n## Wrapping Up: Sending the Message\n\nWhen `sendBtn` is clicked, we need to send the text in `messageEdit` to the chatroom.\n\nAdd the following code to `SendBtnClicked()`:\n\n```cpp\nvoid MainWindow::SendBtnClicked()\n{\n    QLineEdit* messageEdit = this->findChild<QLineEdit*>("messageEdit");\n    QString text = messageEdit->text();\n    if(text.length()>0)\n    {\n        QByteArray bytes = text.toUtf8();\n        std::string msg(bytes.data(),bytes.length());\n        _io->socket()->emit("new message",msg);//emit new message\n        text.append(":You");\n        QListWidgetItem *item = new QListWidgetItem(text);\n        item->setTextAlignment(Qt::AlignRight);\n        Q_EMIT RequestAddListItem(item);\n        messageEdit->clear();\n    }\n}\n```\n\n## Further Reading\n\nYou can run the <a href="https://github.com/socketio/socket.io-client-cpp/tree/master/examples/QT/SioChatDemo">demo project</a> to get a closer look. Before you run it, please follow the <a href="https://github.com/socketio/socket.io-client-cpp#-with-cmake">instructions</a> to make the Socket.io client library.\n\nDon\'t forget to <a href="https://github.com/socketio/socket.io-client-cpp">star the project</a> on GitHub to get updates!\n')))}c.isMDXComponent=!0}}]);