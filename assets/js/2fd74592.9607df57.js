"use strict";(self.webpackChunksample_website=self.webpackChunksample_website||[]).push([[9860],{5680:(e,n,a)=>{a.d(n,{xA:()=>u,yg:()=>c});var t=a(6540);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function l(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?l(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=t.createContext({}),g=function(e){var n=t.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},u=function(e){var n=g(e.components);return t.createElement(s.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=g(a),m=r,c=p["".concat(s,".").concat(m)]||p[m]||d[m]||l;return a?t.createElement(c,i(i({ref:n},u),{},{components:a})):t.createElement(c,i({ref:n},u))}));function c(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=m;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[p]="string"==typeof e?e:r,i[1]=o;for(var g=2;g<l;g++)i[g]=a[g];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}m.displayName="MDXCreateElement"},9320:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>g});var t=a(8168),r=(a(6540),a(5680));const l={layout:"post",title:"Querying and Data Modification",subtitle:"SQL Essentials Part 2",date:new Date("2023-12-25T12:00:00.000Z"),author:"Truong Nhon",multilingual:!1,catalog:!0,lang:"en",tags:["sql","database"]},i=void 0,o={permalink:"/2023/12/25/Querying-and-Data-Modification",editUrl:"https://github.com/nhonvo/nhonvo.github.io/edit/main/blog/blog/2023-12-25-Querying-and-Data-Modification.md",source:"@site/blog/2023-12-25-Querying-and-Data-Modification.md",title:"Querying and Data Modification",description:"Data Manipulation Language (DML) Operations:",date:"2023-12-25T12:00:00.000Z",formattedDate:"December 25, 2023",tags:[{label:"sql",permalink:"/tags/sql"},{label:"database",permalink:"/tags/database"}],readingTime:8.73,hasTruncateMarker:!1,authors:[{name:"Truong Nhon"}],frontMatter:{layout:"post",title:"Querying and Data Modification",subtitle:"SQL Essentials Part 2",date:"2023-12-25T12:00:00.000Z",author:"Truong Nhon",multilingual:!1,catalog:!0,lang:"en",tags:["sql","database"]},prevItem:{title:"Advanced topic in SQL",permalink:"/2023/12/25/Advanced-Topics-in-SQL"},nextItem:{title:"Fundamentals-SQL",permalink:"/2023/12/25/Fundamentals-SQL"}},s={authorsImageUrls:[void 0]},g=[{value:"<strong>Data Manipulation Language (DML) Operations:</strong>",id:"data-manipulation-language-dml-operations",level:2},{value:"<strong>INSERT Data:</strong>",id:"insert-data",level:3},{value:"<strong>UPDATE Data:</strong>",id:"update-data",level:3},{value:"<strong>DELETE Data:</strong>",id:"delete-data",level:3},{value:"<strong>Operators:</strong>",id:"operators",level:2},{value:"<strong>Arithmetic Operators:</strong>",id:"arithmetic-operators",level:3},{value:"<strong>Comparison Operators:</strong>",id:"comparison-operators",level:3},{value:"<strong>Logical Operators:</strong>",id:"logical-operators",level:3},{value:"<strong>BETWEEN - AND:</strong>",id:"between---and",level:3},{value:"<strong>LIKE Operator:</strong>",id:"like-operator",level:3},{value:"<strong>IS NULL:</strong>",id:"is-null",level:3},{value:"<strong>SELECT Statement:</strong>",id:"select-statement",level:2},{value:"<strong>ORDER BY Clause:</strong>",id:"order-by-clause",level:3},{value:"<strong>TOP, PERCENT, and WITH TIES:</strong>",id:"top-percent-and-with-ties",level:3},{value:"<strong>DISTINCT Keyword:</strong>",id:"distinct-keyword",level:3},{value:"<strong>SELECT INTO Statement:</strong>",id:"select-into-statement",level:3},{value:"<strong>VIEW:</strong>",id:"view",level:2},{value:"CREATE VIEW:",id:"create-view",level:3},{value:"<strong>SQL Operators (Continued):</strong>",id:"sql-operators-continued",level:2},{value:"NOT NULL and IS NOT NULL:",id:"not-null-and-is-not-null",level:3},{value:"Wildcards in LIKE Operator:",id:"wildcards-in-like-operator",level:3},{value:"<strong>JOIN Operation:</strong>",id:"join-operation",level:2},{value:"JOIN Operation:",id:"join-operation-1",level:3},{value:"<strong>GROUP BY and HAVING:</strong>",id:"group-by-and-having",level:2},{value:"GROUP BY and HAVING:",id:"group-by-and-having-1",level:3},{value:"<strong>Authentic Operators:</strong>",id:"authentic-operators",level:2},{value:"<strong>Arithmetic:</strong>",id:"arithmetic",level:3},{value:"<strong>Comparison:</strong>",id:"comparison",level:3},{value:"<strong>Logical:</strong>",id:"logical",level:3},{value:"<strong>Selecting Wisely:</strong>",id:"selecting-wisely",level:2},{value:"<strong>SELECT Syntax:</strong>",id:"select-syntax",level:3},{value:"<strong>TOP &amp; PERCENT:</strong>",id:"top--percent",level:3},{value:"<strong>ALIAS &amp; DISTINCT:</strong>",id:"alias--distinct",level:3},{value:"<strong>FROM, WHERE, VIEW, SELECT INTO:</strong>",id:"from-where-view-select-into",level:3},{value:"<strong>SQL Built-in Functions: A Symphony of Capabilities</strong>",id:"sql-built-in-functions-a-symphony-of-capabilities",level:2},{value:"<strong>String Functions Showcase:</strong>",id:"string-functions-showcase",level:2},{value:"<strong>LOWER &amp; UPPER:</strong>",id:"lower--upper",level:3},{value:"<strong>LEN &amp; REVERSE:</strong>",id:"len--reverse",level:3},{value:"<strong>CONCAT &amp; SUBSTRING:</strong>",id:"concat--substring",level:3},{value:"<strong>LTRIM &amp; RTRIM:</strong>",id:"ltrim--rtrim",level:3},{value:"<strong>Datetime Functions: Unraveling Time&#39;s Mysteries:</strong>",id:"datetime-functions-unraveling-times-mysteries",level:2},{value:"<strong>MONTH, DAY, YEAR:</strong>",id:"month-day-year",level:3},{value:"<strong>GETDATE &amp; ISDATE:</strong>",id:"getdate--isdate",level:3},{value:"<strong>DATEPART:</strong>",id:"datepart",level:3},{value:"<strong>Date Manipulation with DATEDIFF:</strong>",id:"date-manipulation-with-datediff",level:3},{value:"<strong>Aggregate Functions: Bringing Data Together</strong>",id:"aggregate-functions-bringing-data-together",level:2},{value:"<strong>SUM &amp; AVG:</strong>",id:"sum--avg",level:3},{value:"<strong>MIN &amp; MAX:</strong>",id:"min--max",level:3},{value:"<strong>COUNT:</strong>",id:"count",level:3},{value:"<strong>Counting the COUNTs: Strategies Unveiled</strong>",id:"counting-the-counts-strategies-unveiled",level:3},{value:"<strong>COUNT(*) vs COUNT(1):</strong>",id:"count-vs-count1",level:3},{value:"<strong>COUNT with DISTINCT:</strong>",id:"count-with-distinct",level:3},{value:"<strong>Ceiling &amp; Floor: Elevating and Lowering Numbers</strong>",id:"ceiling--floor-elevating-and-lowering-numbers",level:3},{value:"<strong>CEILING &amp; FLOOR:</strong>",id:"ceiling--floor",level:3}],u={toc:g},p="wrapper";function d(e){let{components:n,...a}=e;return(0,r.yg)(p,(0,t.A)({},u,a,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h2",{id:"data-manipulation-language-dml-operations"},(0,r.yg)("strong",{parentName:"h2"},"Data Manipulation Language (DML) Operations:")),(0,r.yg)("p",null,"DML operations involve the manipulation of data within a database."),(0,r.yg)("h3",{id:"insert-data"},(0,r.yg)("strong",{parentName:"h3"},"INSERT Data:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"-- Single Record\nINSERT INTO Student(ID, FullName, Email, PhoneNumber, Math)\nVALUES(5, 'HUY', 'HUY@gmail.com', '0123456789', 5);\n\n-- Multiple Records\nINSERT INTO Student(ID, FullName, Email, PhoneNumber, DateOfBirth, Math)\nVALUES\n    (4, 'LAN', 'LAN@gmail.com', '0123456789', '1/30/1999', 7),\n    (3, 'HAO', 'HAO@gmail.com', '0123456789', '12/15/2000', 8);\n")),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"INSERT")," statement adds new records to a table."),(0,r.yg)("h3",{id:"update-data"},(0,r.yg)("strong",{parentName:"h3"},"UPDATE Data:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"-- Update Single Record\nUPDATE Student\nSET FullName = 'I AM A GOOD BOY'\nWHERE ID = 3;\n\n-- Update Multiple Records\nUPDATE Student\nSET FullName = 'Updated Name'\nWHERE Math > 5;\n")),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"UPDATE")," statement modifies existing records in a table."),(0,r.yg)("h3",{id:"delete-data"},(0,r.yg)("strong",{parentName:"h3"},"DELETE Data:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"-- Delete Single Record\nDELETE FROM Student\nWHERE ID = 3;\n\n-- Delete All Records with a Condition\nDELETE FROM Student\nWHERE Math > 5;\n\n-- Truncate Table (Remove all records)\nTRUNCATE TABLE Parent;\n")),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"DELETE")," statement removes records from a table."),(0,r.yg)("hr",null),(0,r.yg)("h2",{id:"operators"},(0,r.yg)("strong",{parentName:"h2"},"Operators:")),(0,r.yg)("p",null,"Operators perform various operations in SQL."),(0,r.yg)("h3",{id:"arithmetic-operators"},(0,r.yg)("strong",{parentName:"h3"},"Arithmetic Operators:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT 30 + 20 AS 'ADDITION';\nSELECT 30 - 20 AS 'SUBTRACTION';\nSELECT 30 * 20 AS 'MULTIPLICATION';\nSELECT 30 / 20 AS 'DIVISION';\nSELECT 30 % 20 AS 'MODULO';\n")),(0,r.yg)("p",null,"Arithmetic operators perform mathematical operations."),(0,r.yg)("h3",{id:"comparison-operators"},(0,r.yg)("strong",{parentName:"h3"},"Comparison Operators:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"-- Equal To\nSELECT ID, FullName\nFROM Student\nWHERE FullName = 'Lan Anh';\n\n-- Greater Than\nSELECT ID, FullName, Math\nFROM Student\nWHERE Math > 5;\n")),(0,r.yg)("p",null,"Comparison operators compare values for equality, inequality, etc."),(0,r.yg)("h3",{id:"logical-operators"},(0,r.yg)("strong",{parentName:"h3"},"Logical Operators:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"-- AND Operator\nSELECT ID, FullName\nFROM Student\nWHERE FullName = 'Lan Anh' AND ID = 1010;\n\n-- OR Operator\nSELECT ID, FullName\nFROM Student\nWHERE FullName = 'Lan Anh' OR ID = 1005;\n\n-- NOT Operator\nSELECT ID, FullName, Math\nFROM Student\nWHERE NOT Math > 5;\n")),(0,r.yg)("p",null,"Logical operators combine conditions using AND, OR, and NOT."),(0,r.yg)("h3",{id:"between---and"},(0,r.yg)("strong",{parentName:"h3"},"BETWEEN - AND:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"-- Values within a Range\nSELECT ID, FullName\nFROM Student\nWHERE ID BETWEEN 1003 AND 1005;\n")),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"BETWEEN - AND")," operator selects values within a specified range."),(0,r.yg)("h3",{id:"like-operator"},(0,r.yg)("strong",{parentName:"h3"},"LIKE Operator:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"-- Pattern Matching\nSELECT FullName, Math\nFROM Student\nWHERE FullName LIKE '%U%';\n")),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"LIKE")," operator searches for a specified pattern in a column."),(0,r.yg)("h3",{id:"is-null"},(0,r.yg)("strong",{parentName:"h3"},"IS NULL:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"-- Check for NULL Values\nSELECT ID, FullName, Math\nFROM Student\nWHERE Math IS NULL;\n")),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"IS NULL")," operator checks for NULL values in a column."),(0,r.yg)("hr",null),(0,r.yg)("h2",{id:"select-statement"},(0,r.yg)("strong",{parentName:"h2"},"SELECT Statement:")),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"SELECT")," statement retrieves data from one or more tables."),(0,r.yg)("h3",{id:"order-by-clause"},(0,r.yg)("strong",{parentName:"h3"},"ORDER BY Clause:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"-- Ascending Order\nSELECT *\nFROM Student\nORDER BY FullName ASC;\n\n-- Descending Order\nSELECT *\nFROM Student\nORDER BY FullName DESC;\n\n-- Order by Multiple Columns\nSELECT *\nFROM Student\nORDER BY FullName ASC, Math ASC;\n")),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"ORDER BY")," clause sorts query results in ascending or descending order."),(0,r.yg)("h3",{id:"top-percent-and-with-ties"},(0,r.yg)("strong",{parentName:"h3"},"TOP, PERCENT, and WITH TIES:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"-- SELECT TOP N Rows\nSELECT TOP 3 *\nFROM Student;\n\n-- SELECT TOP N Percent of Rows\nSELECT TOP 50 PERCENT ID, FullName\nFROM Student;\n")),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"TOP")," limits the number of rows returned, and ",(0,r.yg)("inlineCode",{parentName:"p"},"PERCENT")," filters by a percentage."),(0,r.yg)("h3",{id:"distinct-keyword"},(0,r.yg)("strong",{parentName:"h3"},"DISTINCT Keyword:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"-- Select Distinct Values\nSELECT DISTINCT FullName\nFROM Student;\n\n-- Select Distinct Values for Multiple Columns\nSELECT DISTINCT ID, FullName\nFROM Student;\n")),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"DISTINCT")," keyword removes duplicate rows from query results."),(0,r.yg)("h3",{id:"select-into-statement"},(0,r.yg)("strong",{parentName:"h3"},"SELECT INTO Statement:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"-- Create a New Table from SELECT Query\nSELECT ID, FullName\nINTO NewTable\nFROM Student;\n\n-- Select Data from Newly Created Table\nSELECT *\nFROM NewTable;\n")),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"SELECT INTO")," statement creates a new table from the result of a query."),(0,r.yg)("hr",null),(0,r.yg)("h2",{id:"view"},(0,r.yg)("strong",{parentName:"h2"},"VIEW:")),(0,r.yg)("p",null,"A view is a virtual table based on the result of a SELECT statement."),(0,r.yg)("h3",{id:"create-view"},"CREATE VIEW:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"-- Create a View\nCREATE VIEW HelloView AS\nSELECT FullName, Math\nFROM Student\nWHERE Math > 5;\n\n-- Select Data from the View\nSELECT *\nFROM HelloView;\n")),(0,r.yg)("p",null,"Use  ",(0,r.yg)("inlineCode",{parentName:"p"},"CREATE VIEW")," to define a view."),(0,r.yg)("h2",{id:"sql-operators-continued"},(0,r.yg)("strong",{parentName:"h2"},"SQL Operators (Continued):")),(0,r.yg)("p",null,"Additional SQL operators and their applications."),(0,r.yg)("h3",{id:"not-null-and-is-not-null"},"NOT NULL and IS NOT NULL:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"-- Records with NULL Values\nSELECT ID, FullName, Math\nFROM Student\nWHERE Math IS NULL;\n\n-- Records with Non-NULL Values\nSELECT ID, FullName, Math\nFROM Student\nWHERE Math IS NOT NULL;\n")),(0,r.yg)("p",null,"Check for NULL or non-NULL values using  ",(0,r.yg)("inlineCode",{parentName:"p"},"IS NULL")," and  ",(0,r.yg)("inlineCode",{parentName:"p"},"IS NOT NULL")," ."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Wildcards in LIKE Operator:")),(0,r.yg)("p",null,"Utilize ",(0,r.yg)("inlineCode",{parentName:"p"},"%")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"_")," for pattern matching in the ",(0,r.yg)("inlineCode",{parentName:"p"},"LIKE")," operator."),(0,r.yg)("h3",{id:"wildcards-in-like-operator"},"Wildcards in LIKE Operator:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"-- Pattern Matching with Wildcards\nSELECT FullName, Math\nFROM Student\nWHERE FullName LIKE '%U%';\n")),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"%")," represents zero or more characters, and  ",(0,r.yg)("inlineCode",{parentName:"p"},"_")," represents a single character in pattern matching."),(0,r.yg)("hr",null),(0,r.yg)("h2",{id:"join-operation"},(0,r.yg)("strong",{parentName:"h2"},"JOIN Operation:")),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"JOIN")," operation combines rows from two or more tables based on related columns."),(0,r.yg)("h3",{id:"join-operation-1"},"JOIN Operation:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"-- Combine Rows from Two Tables\nSELECT Student.ID, Student.FullName, Course.CourseName\nFROM Student\nJOIN Course ON Student.CourseID = Course.CourseID;\n")),(0,r.yg)("p",null,"Use the  ",(0,r.yg)("inlineCode",{parentName:"p"},"JOIN")," keyword with specified conditions for combining rows."),(0,r.yg)("hr",null),(0,r.yg)("h2",{id:"group-by-and-having"},(0,r.yg)("strong",{parentName:"h2"},"GROUP BY and HAVING:")),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"GROUP BY")," clause groups rows that have the same values in specified columns, and ",(0,r.yg)("inlineCode",{parentName:"p"},"HAVING")," applies conditions to grouped data."),(0,r.yg)("h3",{id:"group-by-and-having-1"},"GROUP BY and HAVING:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"-- Group by CourseID and Calculate Average Math Score\nSELECT CourseID, AVG(Math) AS AvgMathScore\nFROM Student\nGROUP BY CourseID\nHAVING AVG(Math) > 7;\n")),(0,r.yg)("p",null,"Use the ",(0,r.yg)("inlineCode",{parentName:"p"},"GROUP BY")," clause for grouping and apply conditions with ",(0,r.yg)("inlineCode",{parentName:"p"},"HAVING"),"."),(0,r.yg)("hr",null),(0,r.yg)("h2",{id:"authentic-operators"},(0,r.yg)("strong",{parentName:"h2"},"Authentic Operators:")),(0,r.yg)("h3",{id:"arithmetic"},(0,r.yg)("strong",{parentName:"h3"},"Arithmetic:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"-- Mathematical Wonders\nSELECT 5 + 3 AS 'Addition', 10 - 4 AS 'Subtraction', 6 * 2 AS 'Multiplication', 16 / 4 AS 'Division', 17 % 5 AS 'Modulo';\n")),(0,r.yg)("p",null,"In this example, we perform basic arithmetic operations on numerical values, showcasing the versatility of SQL in handling mathematical tasks."),(0,r.yg)("h3",{id:"comparison"},(0,r.yg)("strong",{parentName:"h3"},"Comparison:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"-- Unveiling Equality and More\nSELECT ID, FullName\nFROM Students\nWHERE Age = 25 OR Age > 30;\n")),(0,r.yg)("p",null,"Here, we retrieve student records based on age, utilizing comparison operators to filter results for specific age criteria."),(0,r.yg)("h3",{id:"logical"},(0,r.yg)("strong",{parentName:"h3"},"Logical:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"-- Crafting Conditions with AND, OR, and NOT\nSELECT ID, FullName\nFROM Students\nWHERE Age > 25 AND Department = 'Engineering';\n")),(0,r.yg)("p",null,"Crafting a query that combines logical operators to filter students who are older than 25 and belong to the Engineering department."),(0,r.yg)("h2",{id:"selecting-wisely"},(0,r.yg)("strong",{parentName:"h2"},"Selecting Wisely:")),(0,r.yg)("h3",{id:"select-syntax"},(0,r.yg)("strong",{parentName:"h3"},"SELECT Syntax:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"-- Crafting the Perfect SELECT Statement\nSELECT FirstName, LastName, Age\nFROM Employees;\n")),(0,r.yg)("p",null,"In this example, we select specific columns from the Employees table, demonstrating the fundamental syntax of the SELECT statement."),(0,r.yg)("h3",{id:"top--percent"},(0,r.yg)("strong",{parentName:"h3"},"TOP & PERCENT:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"-- Limiting and Filtering Rows\nSELECT TOP 5 ID, ProductName, Price\nFROM Products\nORDER BY Price DESC;\n")),(0,r.yg)("p",null,"Limiting query results to the top 5 rows, showcasing the use of TOP in conjunction with ORDER BY to filter and sort data effectively."),(0,r.yg)("h3",{id:"alias--distinct"},(0,r.yg)("strong",{parentName:"h3"},"ALIAS & DISTINCT:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"-- Bringing Clarity to Your Results\nSELECT AVG(Salary) AS 'Average Salary'\nFROM Employees;\n")),(0,r.yg)("p",null,"Calculating the average salary and assigning it an alias for clarity, highlighting the use of aliases in result sets."),(0,r.yg)("h3",{id:"from-where-view-select-into"},(0,r.yg)("strong",{parentName:"h3"},"FROM, WHERE, VIEW, SELECT INTO:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"-- Mastering the Essentials\nSELECT EmployeeID, FirstName, LastName\nINTO NewEmployeeTable\nFROM Employees\nWHERE Department = 'IT';\n")),(0,r.yg)("p",null,"Creating a new table named NewEmployeeTable by selecting specific columns from the Employees table and filtering results based on the IT department."),(0,r.yg)("hr",null),(0,r.yg)("h2",{id:"sql-built-in-functions-a-symphony-of-capabilities"},(0,r.yg)("strong",{parentName:"h2"},"SQL Built-in Functions: A Symphony of Capabilities")),(0,r.yg)("h2",{id:"string-functions-showcase"},(0,r.yg)("strong",{parentName:"h2"},"String Functions Showcase:")),(0,r.yg)("h3",{id:"lower--upper"},(0,r.yg)("strong",{parentName:"h3"},"LOWER & UPPER:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"-- Transforming Case with Flair\nSELECT LOWER('Hello') AS 'lower function', UPPER('Hi there') AS 'UPPER FUNCTION';\n")),(0,r.yg)("p",null,"Applying the LOWER and UPPER functions to manipulate text case, showcasing the versatility of string functions."),(0,r.yg)("h3",{id:"len--reverse"},(0,r.yg)("strong",{parentName:"h3"},"LEN & REVERSE:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"-- Revealing Lengths and Reversing Strings\nSELECT LEN('Database') AS 'Length', REVERSE('SQL') AS 'Reversed';\n")),(0,r.yg)("p",null,"Using LEN to find the length of a string and REVERSE to reverse the characters, demonstrating string manipulation capabilities."),(0,r.yg)("h3",{id:"concat--substring"},(0,r.yg)("strong",{parentName:"h3"},"CONCAT & SUBSTRING:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"-- Crafting and Extracting Strings\nSELECT CONCAT('Hello', ' ', 'World') AS 'CONCAT FUNCTION', SUBSTRING('123456789', 3, 4) AS 'SUBSTRING FUNCTION';\n")),(0,r.yg)("p",null,"Combining strings with CONCAT and extracting a substring, exemplifying the power of string functions in SQL."),(0,r.yg)("h3",{id:"ltrim--rtrim"},(0,r.yg)("strong",{parentName:"h3"},"LTRIM & RTRIM:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"-- Trimming with Finesse\nSELECT '|' + LTRIM('   Hi') + '|' AS 'LTRIM FUNCTION', '|' + RTRIM('Hi   ') + '|' AS 'RTRIM FUNCTION';\n")),(0,r.yg)("p",null,"Trimming leading and trailing spaces using LTRIM and RTRIM, showcasing string manipulation for cleaner outputs."),(0,r.yg)("h2",{id:"datetime-functions-unraveling-times-mysteries"},(0,r.yg)("strong",{parentName:"h2"},"Datetime Functions: Unraveling Time's Mysteries:")),(0,r.yg)("h3",{id:"month-day-year"},(0,r.yg)("strong",{parentName:"h3"},"MONTH, DAY, YEAR:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"-- Extracting Temporal Insights\nSELECT MONTH('11/13/2022') AS 'MONTH FUNCTION', DAY('11/13/2022') AS 'DAY FUNCTION', YEAR('11/13/2022') AS 'YEAR FUNCTION';\n")),(0,r.yg)("p",null,"Extracting month, day, and year components from a date, unraveling temporal insights using datetime functions."),(0,r.yg)("h3",{id:"getdate--isdate"},(0,r.yg)("strong",{parentName:"h3"},"GETDATE & ISDATE:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"-- Unleashing the Power of Time\nSELECT GETDATE() AS 'GETDATE FUNCTION', ISDATE('11/13/2022') AS 'ISDATE FUNCTION';\n")),(0,r.yg)("p",null,"Utilizing GETDATE to retrieve the current date and time, along with ISDATE to validate a date string."),(0,r.yg)("h3",{id:"datepart"},(0,r.yg)("strong",{parentName:"h3"},"DATEPART:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"-- Precision in Date and Time\nSELECT DATEPART(HOUR, '11/13/2022 19:20') AS 'DATEPART HOUR', DATEPART(MINUTE, '11/13/2022 19:20') AS 'DATEPART MINUTE';\n")),(0,r.yg)("p",null,"Extracting specific components like hour and minute using DATEPART, providing precision in date and time manipulation."),(0,r.yg)("h3",{id:"date-manipulation-with-datediff"},(0,r.yg)("strong",{parentName:"h3"},"Date Manipulation with DATEDIFF:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"-- Exploring the Gap Between Dates\nSELECT DATEDIFF(MONTH, '10/15/2020', '11/25/2022') AS 'DATEDIFF MONTHS';\n")),(0,r.yg)("p",null,"Calculating the difference in months between two dates using DATEDIFF, demonstrating date manipulation capabilities."),(0,r.yg)("h2",{id:"aggregate-functions-bringing-data-together"},(0,r.yg)("strong",{parentName:"h2"},"Aggregate Functions: Bringing Data Together")),(0,r.yg)("h3",{id:"sum--avg"},(0,r.yg)("strong",{parentName:"h3"},"SUM & AVG:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"-- Summing Up and Finding Averages\nSELECT SUM(Sales) AS 'Total Sales', AVG(Price) AS 'Average Price'\nFROM Products;\n")),(0,r.yg)("p",null,"Aggregating data with SUM and AVG, showcasing their roles in summarizing numeric values."),(0,r.yg)("h3",{id:"min--max"},(0,r.yg)("strong",{parentName:"h3"},"MIN & MAX:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"-- Uncovering Extremes\nSELECT MIN(Age) AS 'Minimum Age', MAX(Age) AS 'Maximum Age'\nFROM Employees;\n")),(0,r.yg)("p",null,"Identifying the minimum and maximum values within a dataset using MIN and MAX aggregate functions."),(0,r.yg)("h3",{id:"count"},(0,r.yg)("strong",{parentName:"h3"},"COUNT:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"-- Counting Rows Strategically\nSELECT COUNT(*) AS 'Total Records'\nFROM Customers;\n")),(0,r.yg)("p",null,"Counting the total number of records in the Customers table, emphasizing the strategic use of COUNT."),(0,r.yg)("h3",{id:"counting-the-counts-strategies-unveiled"},(0,r.yg)("strong",{parentName:"h3"},"Counting the COUNTs: Strategies Unveiled")),(0,r.yg)("h3",{id:"count-vs-count1"},(0,r.yg)("strong",{parentName:"h3"},"COUNT(","*",") vs COUNT(1):")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"-- Decoding the Mystery\nSELECT COUNT(*) AS 'Total Records', COUNT(1) AS 'Another Count'\nFROM Orders;\n")),(0,r.yg)("p",null,"Comparing COUNT(*) and COUNT(1) to decode the mystery of counting rows effectively."),(0,r.yg)("h3",{id:"count-with-distinct"},(0,r.yg)("strong",{parentName:"h3"},"COUNT with DISTINCT:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"-- Navigating Unique Territories\nSELECT COUNT(DISTINCT Department) AS 'Distinct Departments'\nFROM Employees;\n")),(0,r.yg)("p",null,"Counting the distinct departments within the Employees table, illustrating the usage of COUNT with DISTINCT."),(0,r.yg)("h3",{id:"ceiling--floor-elevating-and-lowering-numbers"},(0,r.yg)("strong",{parentName:"h3"},"Ceiling & Floor: Elevating and Lowering Numbers")),(0,r.yg)("h3",{id:"ceiling--floor"},(0,r.yg)("strong",{parentName:"h3"},"CEILING & FLOOR:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"\n-- Rounding Up and Down\n")))}d.isMDXComponent=!0}}]);