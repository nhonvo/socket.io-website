"use strict";(self.webpackChunksample_website=self.webpackChunksample_website||[]).push([[9127],{5680:(e,n,a)=>{a.d(n,{xA:()=>c,yg:()=>m});var t=a(6540);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function l(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?l(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var d=t.createContext({}),p=function(e){var n=t.useContext(d),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},c=function(e){var n=p(e.components);return t.createElement(d.Provider,{value:n},e.children)},s="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,l=e.originalType,d=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),s=p(a),u=r,m=s["".concat(d,".").concat(u)]||s[u]||g[u]||l;return a?t.createElement(m,i(i({ref:n},c),{},{components:a})):t.createElement(m,i({ref:n},c))}));function m(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=u;var o={};for(var d in n)hasOwnProperty.call(n,d)&&(o[d]=n[d]);o.originalType=e,o[s]="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=a[p];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},9075:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>g,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var t=a(8168),r=(a(6540),a(5680));const l={layout:"post",title:"Mongodb theory and examples code",subtitle:"Associate developer MongoDB C# certificate exam",date:new Date("2024-02-15T12:00:00.000Z"),author:"Truong Nhon",published:!0,catalog:!0,tags:["mongodb"]},i=void 0,o={permalink:"/2024/2/15/mongodb-theory-and-examples-code",editUrl:"https://github.com/nhonvo/nhonvo.github.io/edit/main/blog/blog/2024-2-15-mongodb-theory-and-examples-code.md",source:"@site/blog/2024-2-15-mongodb-theory-and-examples-code.md",title:"Mongodb theory and examples code",description:"MONGODB PRACTICE SECTION 1",date:"2024-02-15T12:00:00.000Z",formattedDate:"February 15, 2024",tags:[{label:"mongodb",permalink:"/tags/mongodb"}],readingTime:8.63,hasTruncateMarker:!0,authors:[{name:"Truong Nhon"}],frontMatter:{layout:"post",title:"Mongodb theory and examples code",subtitle:"Associate developer MongoDB C# certificate exam",date:"2024-02-15T12:00:00.000Z",author:"Truong Nhon",published:!0,catalog:!0,tags:["mongodb"]},prevItem:{title:"Data structure and algorithms",permalink:"/2024/2/28/data-structure-and-algorithms"},nextItem:{title:"Hangfire - Enqueueing Background Jobs",permalink:"/2024/2/8/hangfire"}},d={authorsImageUrls:[void 0]},p=[{value:"MONGODB PRACTICE SECTION 1",id:"mongodb-practice-section-1",level:2},{value:"Part 1: Query Operators",id:"part-1-query-operators",level:3},{value:"Part 2: Logical Operators",id:"part-2-logical-operators",level:3},{value:"Part 3: Projection and Embedded Documents",id:"part-3-projection-and-embedded-documents",level:3},{value:"Part 4: Embedded Documents",id:"part-4-embedded-documents",level:3},{value:"Part 5: Array Operators",id:"part-5-array-operators",level:3},{value:"Part 6: Counting Documents",id:"part-6-counting-documents",level:3},{value:"Part 7: Sorting, Limiting, and Skipping",id:"part-7-sorting-limiting-and-skipping",level:3},{value:"Part 8: Inserting Documents",id:"part-8-inserting-documents",level:3},{value:"Part 9: Deleting Documents",id:"part-9-deleting-documents",level:3},{value:"Part 10: Updating Documents",id:"part-10-updating-documents",level:3},{value:"MONGODB PRACTICE SECTION 2",id:"mongodb-practice-section-2",level:2},{value:"Aggregation",id:"aggregation",level:3},{value:"Aggregation - Stage",id:"aggregation---stage",level:4},{value:"Aggregation - Optimize",id:"aggregation---optimize",level:4},{value:"Aggregation - Exam Question",id:"aggregation---exam-question",level:4},{value:"Index",id:"index",level:3},{value:"Index - Create",id:"index---create",level:4},{value:"Index - Get",id:"index---get",level:4},{value:"Index - Drop",id:"index---drop",level:4},{value:"Index - Hide",id:"index---hide",level:4},{value:"Index - Explain Query",id:"index---explain-query",level:4},{value:"Index \u2013 Hint",id:"index--hint",level:4},{value:"Index \u2013 Compound",id:"index--compound",level:4},{value:"Index \u2013 Behind the Scene",id:"index--behind-the-scene",level:4},{value:"Index \u2013 ESR Rule",id:"index--esr-rule",level:4},{value:"Homework",id:"homework",level:4},{value:"MONGODB PRACTICE SECTION 3",id:"mongodb-practice-section-3",level:2},{value:"Exam - 43/53 to PASS",id:"exam---4353-to-pass",level:3},{value:"What will be asked?",id:"what-will-be-asked",level:3},{value:"Data Modeling",id:"data-modeling",level:3},{value:"Data Modeling - Embedded",id:"data-modeling---embedded",level:4},{value:"Data Modeling - References",id:"data-modeling---references",level:4},{value:"Atlas Search",id:"atlas-search",level:3},{value:"Atlas Search \u2013 Index Field Mappings",id:"atlas-search--index-field-mappings",level:4},{value:"Atlas Search \u2013 Index Analyzer",id:"atlas-search--index-analyzer",level:4},{value:"Atlas Search \u2013 Index Analyzer Tokenizer",id:"atlas-search--index-analyzer-tokenizer",level:4},{value:"Atlas Search \u2013 Query",id:"atlas-search--query",level:4},{value:"Atlas Search \u2013 Query Compound",id:"atlas-search--query-compound",level:4},{value:"Node.js Driver",id:"nodejs-driver",level:3},{value:"CRUD",id:"crud",level:4},{value:"Aggregation driver",id:"aggregation-driver",level:4},{value:"MongoClient API",id:"mongoclient-api",level:4},{value:"Node.js Driver \u2013 Connection Pool",id:"nodejs-driver--connection-pool",level:4},{value:"Practice Questions",id:"practice-questions",level:3},{value:"Homework driver",id:"homework-driver",level:3}],c={toc:p},s="wrapper";function g(e){let{components:n,...a}=e;return(0,r.yg)(s,(0,t.A)({},c,a,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h2",{id:"mongodb-practice-section-1"},"MONGODB PRACTICE SECTION 1"),(0,r.yg)("h3",{id:"part-1-query-operators"},"Part 1: Query Operators"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},"db.collection.findOne(query, projection)\ndb.collection.find(query, projection)\nCase Sensitivity in MongoDB\ndb.trips.FindOne() - is incorrect\ndb.trips.Find() - is incorrect\nQuery in Explorer\n")),(0,r.yg)("h3",{id:"part-2-logical-operators"},"Part 2: Logical Operators"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},'$eq, $ne\ndb.trips.find({"tripduration":{$eq: 200}})\n$gt, $gte\ndb.trips.find({"tripduration": {$lt: 200}})\n$lt, $lte\ndb.trips.find({"tripduration": {$lt: 200}})\n$in\ndb.trips.find({"start station id": {$in: [302, 536]}})\n')),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://www.mongodb.com/docs/manual/reference/operator/query-comparison/"},"Query Comparison Operators Reference")),(0,r.yg)("h3",{id:"part-3-projection-and-embedded-documents"},"Part 3: Projection and Embedded Documents"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},"db.collection.find({query},{projection});\ndb.trips.find({query}, {tripduration:1, bikeid:1, _id:0})\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},'{operator: [{condition1}, {condition2}...]}\n$and\n$or, $nor\ndb.trips.find({$and: [{tripduration:{$gt: 400}}, {"birth year": {$gt: 1988}}]})\ndb.accounts.find({$and: [{products: \'CurrencyService\'}, {products: \'InvestmentStock\'}, {products: {$size: 2}}]})\ndb.trips.find({$or: [{tripduration: {$lt: 400}}, {tripduration: {$gt:1900}}]})\ndb.inspections.find({$or: [{result: "No Violation Issued"}, {result: "Violation Issued"}]})\n')),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://www.mongodb.com/docs/manual/reference/operator/query-logical/"},"Logical Query Operators Reference")),(0,r.yg)("h3",{id:"part-4-embedded-documents"},"Part 4: Embedded Documents"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},'db.inspections.find({"address.zip": 11427})\ndb.inspections.find({result: "Pass","address.zip": {$in:[11427]}}, {result: 1, date:1, address:1})\ndb.inspections.updateMany({_id: ObjectId(\'56d61033a378eccde8a83569\')}, {$set: {"address.phone": {: \'84\', number: \'999988778\'}}})\nFind 3 level of embedded documents\ndb.inspections.find({"address.phone.code": "84"});\n')),(0,r.yg)("h3",{id:"part-5-array-operators"},"Part 5: Array Operators"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},'db.accounts.find({"products":[\'Brokerage\',\'InvestmentStock\']});\n$all\ndb.accounts.find({"products":{$all:[\'Brokerage\',\'InvestmentStock\']}})\n$inc\ndb.accounts.find({"products":{$in:[\'Brokerage\',\'InvestmentStock\']}})\n$size\ndb.accounts.find({"products":{$size: 3}})\n$elemMatch\ndb.grades.find({"scores":{$elemMatch:{"type":"exam", "score": {$gt: 80}}}})\n')),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://www.mongodb.com/docs/manual/reference/operator/query-array/"},"Array Query Operators Reference")),(0,r.yg)("h3",{id:"part-6-counting-documents"},"Part 6: Counting Documents"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},"db.collection.countDocuments();\ndb.trips.countDocuments({tripduration: {$gt: 1000}})\ndb.collection.find({query}).count();\n")),(0,r.yg)("h3",{id:"part-7-sorting-limiting-and-skipping"},"Part 7: Sorting, Limiting, and Skipping"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},'db.collection.find({query}).sort({field: 1}) => asc\ndb.collection.find({query}).sort({field: -1}) => desc\ndb.trips.find({}).sort({tripduration:1, "start station id": -1})\ndb.collection.find({query}).limit(number);\ndb.trips.find({tripduration: {$gt: 1400}}).limit(10)\ndb.collection.find({query}).skip(number);\ndb.trips.find({tripduration: {$gt: 1400}}).skip(5).limit(10);\n')),(0,r.yg)("h3",{id:"part-8-inserting-documents"},"Part 8: Inserting Documents"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},'db.collection.insert([], {option}) \ndb.testcollection.insert([{name:\'test\', age: 10}, {name:\'test2\', age: 12}])\ndb.collection.insertOne({});\nWe can insert empty object {}, it will generate _id for this object\nWe cannot insert with the same _id\ndb.testcollection.insertOne({_id: 1001, "name": "Test","scores":10})\ndb.collection.bulkWrite([\n  {insertOne:{_id:3, name:"test"}}, \n  {insertOne:{_id:4, name:"test2"}}\n                          ])\n\ndb.collection.insertOne({date: new Date("2022-02-02T00:00:00Z")})\ndb.collection.insertOne({date: ISODate("2022-02-02T00:00:00Z")})\n')),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://www.mongodb.com/docs/manual/tutorial/insert-documents/"},"Insert Documents Tutorial")),(0,r.yg)("h3",{id:"part-9-deleting-documents"},"Part 9: Deleting Documents"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},'db.collection.deleteOne();\ndb.testcollection.deleteMany({name:"test1"});\ndb.collection.deleteMany();\ndb.testcollection.deleteMany({name:"test1"});\ndb.testcollection.deleteMany({name:"test123"});\ndb.collection.findOneAndDelete()\nReturn a document after delete the document\ndb.accounts.findOneAndDelete({account_id: 977774})\ndb.collection.drop()\n')),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://www.mongodb.com/docs/manual/reference/delete-methods/"},"Delete Methods Reference")),(0,r.yg)("h3",{id:"part-10-updating-documents"},"Part 10: Updating Documents"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},'db.collection.updateOne({filter}{update},{option})\ndb.collection.updateMany({filter},{update}, {option})\ndb.collection.findOneAndUpdate({filter},{update}, {option})\n$set\n$inc\ndb.zips.updateMany({city: "MC CALLA"}, {$inc: {pop: 1}})\n$push = using to push an item embedded array of document\ndb.grades.updateMany({student_id: 4}, {$push: {scores: {type: "new exam", score: 100}}})\nUpdate embedded array\ndb.sales.updateMany({items: {$elemMatch: {name: "printer paper"}}},{$set: {"items.$.price": 20 }}); \ndb.grades.updateMany({scores:{$elemMatch:{score: {$gt : 33}}}}, {$set: {"scores.$.type": "exam2"}});\n\ndb.trips.updateMany({tripduration: 199999},{$set: {usertype: \'Subscriber\'}})\ndb.trips.updateMany({tripduration: 199999},{$set: {usertype: \'Subscriber\'}}, {upsert: true})\ndb.collection.replaceOne({filter}, {replacement},{option})\nOption: {upsert: true/false}\ndb.accounts.replaceOne({account_id: "unknown"},{account_id: "new account", limit: 2024}, {upsert: true})\n')),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://www.mongodb.com/docs/manual/reference/update-methods/"},"Update Methods Reference")),(0,r.yg)("hr",null),(0,r.yg)("h2",{id:"mongodb-practice-section-2"},"MONGODB PRACTICE SECTION 2"),(0,r.yg)("h3",{id:"aggregation"},"Aggregation"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},'db.orders.aggregate( [\n    // Stage 1: Filter pizza order documents by pizza size\n    {\n        $match: { size: "medium" }\n    },\n    // Stage 2: Group remaining documents by pizza name and calculate total quantity\n    {\n        $group: { _id: "$name", totalQuantity: { $sum: "$quantity" } }\n    },\n    // Stage 3: Select items having totalQuantity greater than 8\n    {\n        $match: { totalQuantity: { $gt: 8 } }\n    }\n] )\n')),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://www.mongodb.com/docs/manual/aggregation/"},"Aggregation Reference")),(0,r.yg)("h4",{id:"aggregation---stage"},"Aggregation - Stage"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"$match")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"$group")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"$project")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"$sort")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"$limit")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"$skip")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"$out"))),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/"},"Aggregation Pipeline Operators Reference")),(0,r.yg)("h4",{id:"aggregation---optimize"},"Aggregation - Optimize"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"$project")," + ",(0,r.yg)("inlineCode",{parentName:"li"},"$match")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"$project")," + ",(0,r.yg)("inlineCode",{parentName:"li"},"$skip")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"$sort")," + ",(0,r.yg)("inlineCode",{parentName:"li"},"$match"))),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://www.mongodb.com/docs/manual/core/aggregation-pipeline-optimization/"},"Aggregation Pipeline Optimization")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Another aggregation pipeline")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},'db.collection.aggregate.(\n  [{\n    "$search": {\n    "text":\n    {\n      "path": "name",\n      "query": "cuban"\n    }\n}}])\n')),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},"db.collection.aggregate([$lookup: {\n  from:'',\n  localField:'',\n  foreignField:'',\n  as:''\n}])\n")),(0,r.yg)("h4",{id:"aggregation---exam-question"},"Aggregation - Exam Question"),(0,r.yg)("p",null,"Given the following documents:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'{"_id":1, restaurant: "Quesadillas Inc.", rating: 4.5 },\n{"_id":2, restaurant: "Pasta Inc.", rating: 3.9},\n{"_id":3, restaurant: "Tacos Inc.", rating: 2.5}\n')),(0,r.yg)("p",null,"A developer wants to find the highest-rated restaurant in a list. An index has been created on the appropriate field. What query satisfies the requirements? (Choose 1)"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"A. ",(0,r.yg)("inlineCode",{parentName:"li"},"const pipeline = [ { $sort: { rating : -1, limit: 1 } } ]; const aggCursor = coll.runAggregation(pipeline);")),(0,r.yg)("li",{parentName:"ul"},"B. ",(0,r.yg)("inlineCode",{parentName:"li"},"const pipeline = [ { $sort: { rating : -1 } }, { $limit: 1 } ]; const aggCursor = coll.runAggregation(pipeline);")),(0,r.yg)("li",{parentName:"ul"},"C. ",(0,r.yg)("inlineCode",{parentName:"li"},"const pipeline = [ { $sort: { rating : -1 , limit: 1} } ]; const aggCursor = coll.aggregate(pipeline);")),(0,r.yg)("li",{parentName:"ul"},"D. ",(0,r.yg)("inlineCode",{parentName:"li"},"const pipeline = [ { $sort: { rating : -1 } }, { $limit: 1 } ]; const aggCursor = coll.aggregate(pipeline);"))),(0,r.yg)("h3",{id:"index"},"Index"),(0,r.yg)("h4",{id:"index---create"},"Index - Create"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},'db.collection.createIndex(<keys>, <options>)\ndb.collection.createIndex({"a": 1})\ndb.collection.createIndex({"a": -1})\ndb.collection.createIndex({"a": 1, "b": 1})\ndb.collection.createIndex({"a": 1}, {unique: true, expireAfterSeconds: 3600})\n')),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Keys:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},"{<field>: <1 / \u20131>}\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"1")," => ascending index")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"-1")," => descending index")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"Options: ",(0,r.yg)("inlineCode",{parentName:"p"},"unique"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"expireAfterSeconds")))),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://www.mongodb.com/docs/manual/reference/method/db.collection.createIndex/"},"Index Creation Reference")),(0,r.yg)("h4",{id:"index---get"},"Index - Get"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},"db.collection.getIndexes()\n")),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://www.mongodb.com/docs/manual/reference/method/db.collection.getIndexes/"},"Index Retrieval Reference")),(0,r.yg)("h4",{id:"index---drop"},"Index - Drop"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},'db.collection.dropIndex(<index>)\ndb.products.dropIndex("name_1")\n')),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://www.mongodb.com/docs/manual/reference/method/db.collection.dropIndex/"},"Index Deletion Reference")),(0,r.yg)("h4",{id:"index---hide"},"Index - Hide"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},"\ndb.collection.hideIndex(<index>)\n")),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://www.mongodb.com/docs/manual/reference/method/db.collection.hideIndex/"},"Index Hiding Reference")),(0,r.yg)("h4",{id:"index---explain-query"},"Index - Explain Query"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},"db.collection.explain(<mode>)\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Modes: ",(0,r.yg)("inlineCode",{parentName:"li"},"queryPlanner")," (default), ",(0,r.yg)("inlineCode",{parentName:"li"},"executionStats"),", ",(0,r.yg)("inlineCode",{parentName:"li"},"allPlansExecution"))),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://www.mongodb.com/docs/manual/reference/method/db.collection.explain/"},"Index Query Explanation Reference")),(0,r.yg)("h4",{id:"index--hint"},"Index \u2013 Hint"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},'db.collection.find({"a": "some value"}).hint({ a: 1 })\ndb.collection.find({"a": "some value"}).hint("a_1")\n')),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://www.mongodb.com/docs/manual/tutorial/measure-index-use/"},"Index Hinting Tutorial")),(0,r.yg)("h4",{id:"index--compound"},"Index \u2013 Compound"),(0,r.yg)("p",null,"Given the following query:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},'db.collection.find({ }).sort({ "product": 1, "price": 1 })\n')),(0,r.yg)("p",null,"Which index will improve the performance of this query? (Choice 2)"),(0,r.yg)("p",null,"A. ",(0,r.yg)("inlineCode",{parentName:"p"},'db.collection.createIndex( { "product": 1, "price": 1 } )'),"\nB. ",(0,r.yg)("inlineCode",{parentName:"p"},'db.collection.createIndex( { "product": 1, "price": -1 } )'),"\nC. ",(0,r.yg)("inlineCode",{parentName:"p"},'db.collection.createIndex( { "product": -1, "price": 1 } )'),"\nD. ",(0,r.yg)("inlineCode",{parentName:"p"},'db.collection.createIndex( { "product": -1, "price": -1 } )')),(0,r.yg)("h4",{id:"index--behind-the-scene"},"Index \u2013 Behind the Scene"),(0,r.yg)("p",null,"Given a collection called collection:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'{ "a": 1, "b": 1 }\n{ "a": 1, "b": 2 }\n{ "a": 2, "b": 1 }\n{ "a": 2, "b": 2 }\n{ "a": 2, "b": 3 }\n{ "a": 3, "b": 1 }\n{ "a": 3, "b": 2 }\n')),(0,r.yg)("p",null,"Find ",(0,r.yg)("inlineCode",{parentName:"p"},"a = 2"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"b > 1")," sorted by ",(0,r.yg)("inlineCode",{parentName:"p"},"b"),"."),(0,r.yg)("h4",{id:"index--esr-rule"},"Index \u2013 ESR Rule"),(0,r.yg)("p",null,"The ESR (Equality, Sort, Range) Rule:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},"db.cars.createIndex({ manufacturer: 1, model: 1, cost: 1 })\n")),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://www.mongodb.com/docs/manual/tutorial/equality-sort-range-rule/"},"ESR Rule Explanation Reference")),(0,r.yg)("h4",{id:"homework"},"Homework"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Review workshop record"),(0,r.yg)("li",{parentName:"ul"},"Practice commands in this section with your sample collections in MDB_EDU database (cloud.mongodb.com)"),(0,r.yg)("li",{parentName:"ul"},"Follow and practice section 10, 12 in Udemy Course: ",(0,r.yg)("a",{parentName:"li",href:"https://fpt-software.udemy.com/course/mongodb-the-complete-developers-guide/learn/lecture/11850736"},"MongoDB - The Complete Developer's Guide")),(0,r.yg)("li",{parentName:"ul"},"Preview Atlas search")),(0,r.yg)("hr",null),(0,r.yg)("h2",{id:"mongodb-practice-section-3"},"MONGODB PRACTICE SECTION 3"),(0,r.yg)("h3",{id:"exam---4353-to-pass"},"Exam - 43/53 to PASS"),(0,r.yg)("h3",{id:"what-will-be-asked"},"What will be asked?"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"CRUD 27 \u2013 28",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Mongo Shell"),(0,r.yg)("li",{parentName:"ul"},"CRUD functions (findOne, find, insertOne, insertMany, updateOne, updateMany, deleteOne, deleteMany, findAndModify...)"),(0,r.yg)("li",{parentName:"ul"},"Query in array fields, nested object fields ($in, $elemMatch)"),(0,r.yg)("li",{parentName:"ul"},"Aggregation ($match, $group, $out)"),(0,r.yg)("li",{parentName:"ul"},"Atlas Search index and query"))),(0,r.yg)("li",{parentName:"ul"},"Index 9 \u2013 10",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Choose correct index for a query"),(0,r.yg)("li",{parentName:"ul"},"From explain query output, identify if using index scan"),(0,r.yg)("li",{parentName:"ul"},"Index with Nested object field"))),(0,r.yg)("li",{parentName:"ul"},"Driver NodeJS / Java / C#/ Python / PHP 9 \u2013 10",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Driver significant features, URI, connection pooling"),(0,r.yg)("li",{parentName:"ul"},"Driver source code syntax: CRUD, Aggregation pipeline"))),(0,r.yg)("li",{parentName:"ul"},"The Document Model 4 \u2013 5",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Which document can/cannot store in the same collection"),(0,r.yg)("li",{parentName:"ul"},"BSON data type (Ex: Decimal128, not Float64)"))),(0,r.yg)("li",{parentName:"ul"},"Data Modeling 1 \u2013 2",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Embedded or Referred relationship"))),(0,r.yg)("li",{parentName:"ul"},"Atlas Tools 1 \u2013 2",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"MongoDB Atlas UI"),(0,r.yg)("li",{parentName:"ul"},"Data Explorer to query data")))),(0,r.yg)("h3",{id:"data-modeling"},"Data Modeling"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Embedded Data",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Embedded documents store related data in a single document structure. A document can contain arrays and sub-documents with related data."))),(0,r.yg)("li",{parentName:"ul"},"References",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"References store relationships between data by including links, called references, from one document to another."))),(0,r.yg)("li",{parentName:"ul"},"Ref: ",(0,r.yg)("a",{parentName:"li",href:"https://www.mongodb.com/docs/manual/data-modeling/"},"Data Modeling Guide"))),(0,r.yg)("h4",{id:"data-modeling---embedded"},"Data Modeling - Embedded"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Model One-to-One Relationships",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Ref: ",(0,r.yg)("a",{parentName:"li",href:"https://www.mongodb.com/docs/manual/tutorial/model-embedded-one-to-one-relationships-between-documents/"},"Embedded One-to-One Relationships")))),(0,r.yg)("li",{parentName:"ul"},"Model One-to-Many Relationships with Embedded Documents",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Receives all required information in a single read operation"),(0,r.yg)("li",{parentName:"ul"},"Example: Country to major cities, Author to books, Student to classes"),(0,r.yg)("li",{parentName:"ul"},"Limit size of a document: 16MB"),(0,r.yg)("li",{parentName:"ul"},"Ref: ",(0,r.yg)("a",{parentName:"li",href:"https://www.mongodb.com/docs/manual/tutorial/model-embedded-one-to-many-relationships-between-documents/"},"Embedded One-to-Many Relationships"))))),(0,r.yg)("h4",{id:"data-modeling---references"},"Data Modeling - References"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Model One-to-Many Relationships with Document References",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"To avoid repetition of the referred data, use references"),(0,r.yg)("li",{parentName:"ul"},"Example: Book and Publisher"),(0,r.yg)("li",{parentName:"ul"},"Ref: ",(0,r.yg)("a",{parentName:"li",href:"https://www.mongodb.com/docs/manual/tutorial/model-referenced-one-to-many-relationships-between-documents/"},"Referenced One-to-Many Relationships"))))),(0,r.yg)("h3",{id:"atlas-search"},"Atlas Search"),(0,r.yg)("h4",{id:"atlas-search--index-field-mappings"},"Atlas Search \u2013 Index Field Mappings"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Dynamic Mapping",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Automatically index all supported field types using dynamic mappings"))),(0,r.yg)("li",{parentName:"ul"},"Static Mapping",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Specify the fields to index"),(0,r.yg)("li",{parentName:"ul"},"Syntax:")))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'{\n    "mappings": {\n    "dynamic": <boolean>,\n    "fields": {\n        "<field-name>": {\n        "type": "<field-type>",\n        }\n    }\n    }\n}\n')),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Ref: ",(0,r.yg)("a",{parentName:"li",href:"https://www.mongodb.com/docs/atlas/atlas-search/define-field-mappings/"},"Atlas Search - Field Mappings"))),(0,r.yg)("h4",{id:"atlas-search--index-analyzer"},"Atlas Search \u2013 Index Analyzer"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Ref: ",(0,r.yg)("a",{parentName:"li",href:"https://www.mongodb.com/docs/atlas/atlas-search/analyzers/"},"Atlas Search Analyzers")),(0,r.yg)("li",{parentName:"ul"},"Analyzer Description:",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Standard: Uses the default analyzer for all Atlas Search indexes and queries."),(0,r.yg)("li",{parentName:"ul"},"Simple: Divides text into searchable terms wherever it finds a non-letter character."),(0,r.yg)("li",{parentName:"ul"},"Whitespace: Divides text into searchable terms wherever it finds a whitespace character."),(0,r.yg)("li",{parentName:"ul"},"Language: Provides a set of language-specific text analyzers."),(0,r.yg)("li",{parentName:"ul"},"Keyword: Indexes text fields as single terms.")))),(0,r.yg)("h4",{id:"atlas-search--index-analyzer-tokenizer"},"Atlas Search \u2013 Index Analyzer Tokenizer"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"whitespace"),(0,r.yg)("li",{parentName:"ul"},"nGram"),(0,r.yg)("li",{parentName:"ul"},"edgeGram => Autocomplete"),(0,r.yg)("li",{parentName:"ul"},"regexCaptureGroup"),(0,r.yg)("li",{parentName:"ul"},"Ref: ",(0,r.yg)("a",{parentName:"li",href:"https://www.mongodb.com/docs/atlas/atlas-search/analyzers/tokenizers/"},"Atlas Search - Tokenizers"))),(0,r.yg)("h4",{id:"atlas-search--query"},"Atlas Search \u2013 Query"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Single Field Search"),(0,r.yg)("li",{parentName:"ul"},"Multiple Field Search"),(0,r.yg)("li",{parentName:"ul"},"Nested Field Search"),(0,r.yg)("li",{parentName:"ul"},"Wildcard Field Search"),(0,r.yg)("li",{parentName:"ul"},"Ref: ",(0,r.yg)("a",{parentName:"li",href:"https://www.mongodb.com/docs/atlas/atlas-search/path-construction/"},"Atlas Search - Path Construction")),(0,r.yg)("li",{parentName:"ul"},"Example:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'$search: {\n    "text": {\n    "query": "Ford",\n    "path": "make"\n    }\n}\n')),(0,r.yg)("h4",{id:"atlas-search--query-compound"},"Atlas Search \u2013 Query Compound"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"should"),(0,r.yg)("li",{parentName:"ul"},"must"),(0,r.yg)("li",{parentName:"ul"},"mustNot"),(0,r.yg)("li",{parentName:"ul"},"filter"),(0,r.yg)("li",{parentName:"ul"},"Ref: ",(0,r.yg)("a",{parentName:"li",href:"https://www.mongodb.com/docs/atlas/atlas-search/compound/"},"Atlas Search - Compound"))),(0,r.yg)("h3",{id:"nodejs-driver"},"Node.js Driver"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Connection",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Video: ",(0,r.yg)("a",{parentName:"li",href:"https://learn.mongodb.com/courses/connecting-to-mongodb-in-nodejs"},"Connecting to MongoDB in Node.js")),(0,r.yg)("li",{parentName:"ul"},"Ref: ",(0,r.yg)("a",{parentName:"li",href:"https://www.mongodb.com/docs/drivers/node/current/fundamentals/connection/connect/"},"Node.js Driver Connection"))))),(0,r.yg)("h4",{id:"crud"},"CRUD"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Video: ",(0,r.yg)("a",{parentName:"li",href:"https://learn.mongodb.com/courses/mongodb-crud-operations-in-nodejs"},"MongoDB CRUD Operations in Node.js")),(0,r.yg)("li",{parentName:"ul"},"Ref: ",(0,r.yg)("a",{parentName:"li",href:"https://www.mongodb.com/docs/drivers/node/current/fundamentals/crud/"},"Node.js Driver CRUD"))),(0,r.yg)("h4",{id:"aggregation-driver"},"Aggregation driver"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Video: ",(0,r.yg)("a",{parentName:"li",href:"https://learn.mongodb.com/courses/mongodb-aggregation-with-nodejs"},"MongoDB Aggregation with Node.js")),(0,r.yg)("li",{parentName:"ul"},"Ref: ",(0,r.yg)("a",{parentName:"li",href:"https://www.mongodb.com/docs/drivers/node/current/fundamentals/aggregation/"},"Node.js Driver Aggregation"))),(0,r.yg)("h4",{id:"mongoclient-api"},"MongoClient API"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Ref: ",(0,r.yg)("a",{parentName:"li",href:"https://mongodb.github.io/node-mongodb-native/6.3/classes/MongoClient.html"},"MongoClient API"))),(0,r.yg)("h4",{id:"nodejs-driver--connection-pool"},"Node.js Driver \u2013 Connection Pool"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Definition",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"A connection pool is a cache of open, ready-to-use database connections maintained by the driver."),(0,r.yg)("li",{parentName:"ul"},"Your application can seamlessly get connections from the pool, perform operations, and return connections back to the pool."),(0,r.yg)("li",{parentName:"ul"},"Connection pools are thread-safe."))),(0,r.yg)("li",{parentName:"ul"},"Benefits",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Helps reduce application latency and the number of times new connections are created."),(0,r.yg)("li",{parentName:"ul"},"A connection pool creates connections at startup."),(0,r.yg)("li",{parentName:"ul"},"No need to manually return connections to the pool, connections return to the pool automatically."),(0,r.yg)("li",{parentName:"ul"},"When requesting a connection and there\u2019s an available connection in the pool, a new connection does not need to be created."))),(0,r.yg)("li",{parentName:"ul"},"Ref: ",(0,r.yg)("a",{parentName:"li",href:"https://www.mongodb.com/docs/manual/administration/connection-pool-overview/"},"Connection Pool Overview"))),(0,r.yg)("h3",{id:"practice-questions"},"Practice Questions"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://learn.mongodb.com/learn/course/associate-developer-node-practice-questions/prep-questions/practice-questions"},"Practice Questions"))),(0,r.yg)("h3",{id:"homework-driver"},"Homework driver"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Review workshop record"),(0,r.yg)("li",{parentName:"ul"},"Follow the video of Node.js Driver and practice with your sample collections in MDB_EDU database (",(0,r.yg)("a",{parentName:"li",href:"https://cloud.mongodb.com"},"cloud.mongodb.com"),")"),(0,r.yg)("li",{parentName:"ul"},"Read document references in this slide"),(0,r.yg)("li",{parentName:"ul"},"Review all to prepare for the final test in the next week (53 questions, 80% to pass)"),(0,r.yg)("li",{parentName:"ul"},"Register and schedule for the exam")))}g.isMDXComponent=!0}}]);