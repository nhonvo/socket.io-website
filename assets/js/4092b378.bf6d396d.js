"use strict";(self.webpackChunksample_website=self.webpackChunksample_website||[]).push([[774],{5680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>g});var r=n(6540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=c(n),p=a,g=m["".concat(l,".").concat(p)]||m[p]||d[p]||o;return n?r.createElement(g,s(s({ref:t},u),{},{components:n})):r.createElement(g,s({ref:t},u))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[m]="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},9365:(e,t,n)=>{n.d(t,{A:()=>s});var r=n(6540),a=n(53);const o={tabItem:"tabItem_Ymn6"};function s(e){let{children:t,hidden:n,className:s}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.A)(o.tabItem,s),hidden:n},t)}},1470:(e,t,n)=>{n.d(t,{A:()=>E});var r=n(8168),a=n(6540),o=n(53),s=n(3104),i=n(6347),l=n(7485),c=n(1682),u=n(9466);function m(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}function d(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??m(n);return function(e){const t=(0,c.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function p(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:n}=e;const r=(0,i.W6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l.aZ)(o),(0,a.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(r.location.search);t.set(o,e),r.replace({...r.location,search:t.toString()})}),[o,r])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,o=d(e),[s,i]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:o}))),[l,c]=g({queryString:n,groupId:r}),[m,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,o]=(0,u.Dv)(n);return[r,(0,a.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:r}),h=(()=>{const e=l??m;return p({value:e,tabValues:o})?e:null})();(0,a.useLayoutEffect)((()=>{h&&i(h)}),[h]);return{selectedValue:s,selectValue:(0,a.useCallback)((e=>{if(!p({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);i(e),c(e),f(e)}),[c,f,o]),tabValues:o}}var h=n(2303);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function y(e){let{className:t,block:n,selectedValue:i,selectValue:l,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:m}=(0,s.a_)(),d=e=>{const t=e.currentTarget,n=u.indexOf(t),r=c[n].value;r!==i&&(m(t),l(r))},p=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:s}=e;return a.createElement("li",(0,r.A)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>u.push(e),onKeyDown:p,onClick:d},s,{className:(0,o.A)("tabs__item",b.tabItem,s?.className,{"tabs__item--active":i===t})}),n??t)})))}function v(e){let{lazy:t,children:n,selectedValue:r}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function k(e){const t=f(e);return a.createElement("div",{className:(0,o.A)("tabs-container",b.tabList)},a.createElement(y,(0,r.A)({},e,t)),a.createElement(v,(0,r.A)({},e,t)))}function E(e){const t=(0,h.A)();return a.createElement(k,(0,r.A)({key:String(t)},e))}},5737:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>g,frontMatter:()=>i,metadata:()=>c,toc:()=>m});var r=n(8168),a=(n(6540),n(5680)),o=n(1470),s=n(9365);const i={title:"Ending notes",slug:"ending-notes"},l="Ending notes",c={unversionedId:"tutorial/ending-notes",id:"tutorial/ending-notes",title:"Ending notes",description:"Final server code",source:"@site/docs/tutorial/13-ending-notes.md",sourceDirName:"tutorial",slug:"/tutorial/ending-notes",permalink:"/socket.io-website/docs/v4/tutorial/ending-notes",draft:!1,editUrl:"https://github.com/socketio/socket.io-website/edit/main/docs/tutorial/13-ending-notes.md",tags:[],version:"current",lastUpdatedAt:1700215757,formattedLastUpdatedAt:"Nov 17, 2023",sidebarPosition:13,frontMatter:{title:"Ending notes",slug:"ending-notes"},sidebar:"tutorialSidebar",previous:{title:"Step #9: Scaling horizontally",permalink:"/socket.io-website/docs/v4/tutorial/step-9"}},u={},m=[{value:"Final server code",id:"final-server-code",level:2},{value:"Final client code",id:"final-client-code",level:2},{value:"Homework",id:"homework",level:2},{value:"Getting this example",id:"getting-this-example",level:2},{value:"Next steps",id:"next-steps",level:2}],d={toc:m},p="wrapper";function g(e){let{components:t,...n}=e;return(0,a.yg)(p,(0,r.A)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"ending-notes"},"Ending notes"),(0,a.yg)("h2",{id:"final-server-code"},"Final server code"),(0,a.yg)(o.A,{groupId:"lang",mdxType:"Tabs"},(0,a.yg)(s.A,{value:"cjs",label:"CommonJS",default:!0,mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="index.js"',title:'"index.js"'},"const express = require('express');\nconst { createServer } = require('node:http');\nconst { join } = require('node:path');\nconst { Server } = require('socket.io');\nconst sqlite3 = require('sqlite3');\nconst { open } = require('sqlite');\nconst { availableParallelism } = require('node:os');\nconst cluster = require('node:cluster');\nconst { createAdapter, setupPrimary } = require('@socket.io/cluster-adapter');\n\nif (cluster.isPrimary) {\n  const numCPUs = availableParallelism();\n  for (let i = 0; i < numCPUs; i++) {\n    cluster.fork({\n      PORT: 3000 + i\n    });\n  }\n\n  return setupPrimary();\n}\n\nasync function main() {\n  const db = await open({\n    filename: 'chat.db',\n    driver: sqlite3.Database\n  });\n\n  await db.exec(`\n    CREATE TABLE IF NOT EXISTS messages (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      client_offset TEXT UNIQUE,\n      content TEXT\n    );\n  `);\n\n  const app = express();\n  const server = createServer(app);\n  const io = new Server(server, {\n    connectionStateRecovery: {},\n    adapter: createAdapter()\n  });\n\n  app.get('/', (req, res) => {\n    res.sendFile(join(__dirname, 'index.html'));\n  });\n\n  io.on('connection', async (socket) => {\n    socket.on('chat message', async (msg, clientOffset, callback) => {\n      let result;\n      try {\n        result = await db.run('INSERT INTO messages (content, client_offset) VALUES (?, ?)', msg, clientOffset);\n      } catch (e) {\n        if (e.errno === 19 /* SQLITE_CONSTRAINT */ ) {\n          callback();\n        } else {\n          // nothing to do, just let the client retry\n        }\n        return;\n      }\n      io.emit('chat message', msg, result.lastID);\n      callback();\n    });\n\n    if (!socket.recovered) {\n      try {\n        await db.each('SELECT id, content FROM messages WHERE id > ?',\n          [socket.handshake.auth.serverOffset || 0],\n          (_err, row) => {\n            socket.emit('chat message', row.content, row.id);\n          }\n        )\n      } catch (e) {\n        // something went wrong\n      }\n    }\n  });\n\n  const port = process.env.PORT;\n\n  server.listen(port, () => {\n    console.log(`server running at http://localhost:${port}`);\n  });\n}\n\nmain();\n"))),(0,a.yg)(s.A,{value:"mjs",label:"ES modules",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="index.js"',title:'"index.js"'},"import express from 'express';\nimport { createServer } from 'node:http';\nimport { fileURLToPath } from 'node:url';\nimport { dirname, join } from 'node:path';\nimport { Server } from 'socket.io';\nimport sqlite3 from 'sqlite3';\nimport { open } from 'sqlite';\nimport { availableParallelism } from 'node:os';\nimport cluster from 'node:cluster';\nimport { createAdapter, setupPrimary } from '@socket.io/cluster-adapter';\n\nif (cluster.isPrimary) {\n  const numCPUs = availableParallelism();\n  for (let i = 0; i < numCPUs; i++) {\n    cluster.fork({\n      PORT: 3000 + i\n    });\n  }\n\n  setupPrimary();\n} else {\n  const db = await open({\n    filename: 'chat.db',\n    driver: sqlite3.Database\n  });\n\n  await db.exec(`\n    CREATE TABLE IF NOT EXISTS messages (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      client_offset TEXT UNIQUE,\n      content TEXT\n    );\n  `);\n\n  const app = express();\n  const server = createServer(app);\n  const io = new Server(server, {\n    connectionStateRecovery: {},\n    adapter: createAdapter()\n  });\n\n  const __dirname = dirname(fileURLToPath(import.meta.url));\n\n  app.get('/', (req, res) => {\n    res.sendFile(join(__dirname, 'index.html'));\n  });\n\n  io.on('connection', async (socket) => {\n    socket.on('chat message', async (msg, clientOffset, callback) => {\n      let result;\n      try {\n        result = await db.run('INSERT INTO messages (content, client_offset) VALUES (?, ?)', msg, clientOffset);\n      } catch (e) {\n        if (e.errno === 19 /* SQLITE_CONSTRAINT */ ) {\n          callback();\n        } else {\n          // nothing to do, just let the client retry\n        }\n        return;\n      }\n      io.emit('chat message', msg, result.lastID);\n      callback();\n    });\n\n    if (!socket.recovered) {\n      try {\n        await db.each('SELECT id, content FROM messages WHERE id > ?',\n          [socket.handshake.auth.serverOffset || 0],\n          (_err, row) => {\n            socket.emit('chat message', row.content, row.id);\n          }\n        )\n      } catch (e) {\n        // something went wrong\n      }\n    }\n  });\n\n  const port = process.env.PORT;\n\n  server.listen(port, () => {\n    console.log(`server running at http://localhost:${port}`);\n  });\n}\n")))),(0,a.yg)("h2",{id:"final-client-code"},"Final client code"),(0,a.yg)(o.A,{groupId:"syntax",mdxType:"Tabs"},(0,a.yg)(s.A,{value:"es6",label:"ES6",default:!0,mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-html",metastring:'title="index.html"',title:'"index.html"'},'<!DOCTYPE html>\n<html>\n  <head>\n    <meta name="viewport" content="width=device-width,initial-scale=1.0">\n    <title>Socket.IO chat</title>\n    <style>\n      body { margin: 0; padding-bottom: 3rem; font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif; }\n\n      #form { background: rgba(0, 0, 0, 0.15); padding: 0.25rem; position: fixed; bottom: 0; left: 0; right: 0; display: flex; height: 3rem; box-sizing: border-box; backdrop-filter: blur(10px); }\n      #input { border: none; padding: 0 1rem; flex-grow: 1; border-radius: 2rem; margin: 0.25rem; }\n      #input:focus { outline: none; }\n      #form > button { background: #333; border: none; padding: 0 1rem; margin: 0.25rem; border-radius: 3px; outline: none; color: #fff; }\n\n      #messages { list-style-type: none; margin: 0; padding: 0; }\n      #messages > li { padding: 0.5rem 1rem; }\n      #messages > li:nth-child(odd) { background: #efefef; }\n    </style>\n  </head>\n  <body>\n    <ul id="messages"></ul>\n    <form id="form" action="">\n      <input id="input" autocomplete="off" /><button>Send</button>\n    </form>\n    <script src="/socket.io/socket.io.js"><\/script>\n    <script>\n      let counter = 0;\n  \n      const socket = io({\n        ackTimeout: 10000,\n        retries: 3,\n        auth: {\n          serverOffset: 0\n        }\n      });\n  \n      const form = document.getElementById(\'form\');\n      const input = document.getElementById(\'input\');\n      const messages = document.getElementById(\'messages\');\n  \n      form.addEventListener(\'submit\', (e) => {\n        e.preventDefault();\n        if (input.value) {\n          const clientOffset = `${socket.id}-${counter++}`;\n          socket.emit(\'chat message\', input.value, clientOffset);\n          input.value = \'\';\n        }\n      });\n  \n      socket.on(\'chat message\', (msg, serverOffset) => {\n        const item = document.createElement(\'li\');\n        item.textContent = msg;\n        messages.appendChild(item);\n        window.scrollTo(0, document.body.scrollHeight);\n        socket.auth.serverOffset = serverOffset;\n      });\n    <\/script>\n  </body>\n</html>\n'))),(0,a.yg)(s.A,{value:"es5",label:"ES5",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-html",metastring:'title="index.html"',title:'"index.html"'},'<!DOCTYPE html>\n<html>\n  <head>\n    <meta name="viewport" content="width=device-width,initial-scale=1.0">\n    <title>Socket.IO chat</title>\n    <style>\n      body { margin: 0; padding-bottom: 3rem; font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif; }\n\n      #form { background: rgba(0, 0, 0, 0.15); padding: 0.25rem; position: fixed; bottom: 0; left: 0; right: 0; display: flex; height: 3rem; box-sizing: border-box; backdrop-filter: blur(10px); }\n      #input { border: none; padding: 0 1rem; flex-grow: 1; border-radius: 2rem; margin: 0.25rem; }\n      #input:focus { outline: none; }\n      #form > button { background: #333; border: none; padding: 0 1rem; margin: 0.25rem; border-radius: 3px; outline: none; color: #fff; }\n\n      #messages { list-style-type: none; margin: 0; padding: 0; }\n      #messages > li { padding: 0.5rem 1rem; }\n      #messages > li:nth-child(odd) { background: #efefef; }\n    </style>\n  </head>\n  <body>\n    <ul id="messages"></ul>\n    <form id="form" action="">\n      <input id="input" autocomplete="off" /><button>Send</button>\n    </form>\n    <script src="/socket.io/socket.io.js"><\/script>\n    <script>\n      var counter = 0;\n  \n      var socket = io({\n        ackTimeout: 10000,\n        retries: 3,\n        auth: {\n          serverOffset: 0\n        }\n      });\n  \n      var form = document.getElementById(\'form\');\n      var input = document.getElementById(\'input\');\n      var messages = document.getElementById(\'messages\');\n  \n      form.addEventListener(\'submit\', function(e) {\n        e.preventDefault();\n        if (input.value) {\n          const clientOffset = `${socket.id}-${counter++}`;\n          socket.emit(\'chat message\', input.value, clientOffset);\n          input.value = \'\';\n        }\n      });\n  \n      socket.on(\'chat message\', function(msg, serverOffset) {\n        var item = document.createElement(\'li\');\n        item.textContent = msg;\n        messages.appendChild(item);\n        window.scrollTo(0, document.body.scrollHeight);\n        socket.auth.serverOffset = serverOffset;\n      });\n    <\/script>\n  </body>\n</html>\n')))),(0,a.yg)("h2",{id:"homework"},"Homework"),(0,a.yg)("p",null,"Here are some ideas to improve the application:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Broadcast a message to connected users when someone connects or disconnects."),(0,a.yg)("li",{parentName:"ul"},"Add support for nicknames."),(0,a.yg)("li",{parentName:"ul"},"Don\u2019t send the same message to the user that sent it. Instead, append the message directly as soon as they press enter."),(0,a.yg)("li",{parentName:"ul"},"Add \u201c{user} is typing\u201d functionality."),(0,a.yg)("li",{parentName:"ul"},"Show who\u2019s online."),(0,a.yg)("li",{parentName:"ul"},"Add private messaging."),(0,a.yg)("li",{parentName:"ul"},"Share your improvements!")),(0,a.yg)("h2",{id:"getting-this-example"},"Getting this example"),(0,a.yg)("p",null,"You can find it on GitHub ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/socketio/chat-example"},"here"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"git clone https://github.com/socketio/chat-example.git\n")),(0,a.yg)("h2",{id:"next-steps"},"Next steps"),(0,a.yg)("p",null,"Please check out:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"/get-started/"},"our other examples")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"/socket.io-website/docs/v4/troubleshooting-connection-issues/"},"our Troubleshooting guide")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"/socket.io-website/docs/v4/emit-cheatsheet/"},"the Emit cheatsheet")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"/socket.io-website/docs/v4/server-api/"},"the complete Server API")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"/socket.io-website/docs/v4/client-api/"},"the complete Client API")),(0,a.yg)("li",{parentName:"ul"},"the different sections of ",(0,a.yg)("a",{parentName:"li",href:"/socket.io-website/docs/v4/"},"our guide"))))}g.isMDXComponent=!0}}]);